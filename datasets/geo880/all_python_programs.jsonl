{"qid": "geo880_0", "query": "Give me the cities in Virginia .", "python": "List[City]:\n    virginia_state = geo_model.find_state(\"virginia\")\n    return virginia_state.cities"}
{"qid": "geo880_1", "query": "What are the high points of states surrounding Mississippi ?", "python": "List[Place]:\n    mississippi_state = geo_model.find_state('mississippi')\n    return [s.high_point for s in mississippi_state.next_to]"}
{"qid": "geo880_2", "query": "Name the rivers in Arkansas .", "python": "List[River]:\n    arkansas_state = geo_model.find_state(\"arkansas\")\n    return arkansas_state.rivers"}
{"qid": "geo880_3", "query": "Name all the rivers in Colorado .", "python": "List[River]:\n    colorado_state = geo_model.find_state(\"colorado\")\n    return colorado_state.rivers"}
{"qid": "geo880_4", "query": "Can you tell me the capital of Texas ?", "python": "City:\n    texas_state = geo_model.find_state(\"texas\")\n    return texas_state.capital"}
{"qid": "geo880_5", "query": "Could you tell me what is the highest point in the state of Oregon ?", "python": "Place:\n    oregon_state = geo_model.find_state(\"oregon\")\n    return oregon_state.high_point"}
{"qid": "geo880_6", "query": "Count the states which have elevations lower than what Alabama has .", "python": "int:\n    alabama_state = geo_model.find_state(\"alabama\")\n    return len([s for s in geo_model.states if s.low_point.elevation < alabama_state.low_point.elevation])"}
{"qid": "geo880_7", "query": "Give me all the states of USA .", "python": "List[State]:\n    return geo_model.states"}
{"qid": "geo880_8", "query": "Give me the cities in Texas .", "python": "List[City]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.cities"}
{"qid": "geo880_10", "query": "Give me the cities in Virginia .", "python": "List[City]:\n    return geo_model.find_state(\"virginia\").cities"}
{"qid": "geo880_11", "query": "Give me the cities which are in Texas .", "python": "List[City]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.cities"}
{"qid": "geo880_12", "query": "Give me the lakes in California .", "python": "List[Lake]:\n    california_state = geo_model.find_state(\"california\")\n    return california_state.lakes"}
{"qid": "geo880_13", "query": "Give me the largest state .", "python": "State:\n    return max(geo_model.states, key=lambda x: x.area)", "python_oneline": "State:\n    return max(geo_model.states, key=lambda x: x.area)", "python_multiline": "State:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    return largest_state", "python_multiline_discarded": "State:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    return largest_state", "python_oneline_discarded": "State:\n    return max(geo_model.states, key=lambda x: x.area)"}
{"qid": "geo880_14", "query": "Give me the longest river that passes through the US .", "python": "River:\n    rivers_in_usa = geo_model.find_country(\"usa\").rivers\n    return max(rivers_in_usa, key=lambda x: x.length)", "python_oneline": "River:\n    return max(geo_model.find_country(\"usa\").rivers, key=lambda x: x.length)", "python_multiline": "River:\n    rivers_in_usa = geo_model.find_country(\"usa\").rivers\n    return max(rivers_in_usa, key=lambda x: x.length)", "python_multiline_discarded": "River:\n    rivers_in_usa = geo_model.find_country(\"usa\").rivers\n    longest_river = max(rivers_in_usa, key=lambda x: x.length)\n    return longest_river", "python_oneline_discarded": "River:\n    return max(geo_model.find_country(\"usa\").rivers, key=lambda x: x.length)"}
{"qid": "geo880_15", "query": "Give me the number of rivers in California .", "python": "int:\n    california_state = geo_model.find_state('california')\n    return len(california_state.rivers)"}
{"qid": "geo880_16", "query": "Give me the states that border Utah .", "python": "List[State]:\n    utah_state = geo_model.find_state(\"utah\")\n    return utah_state.next_to", "python_oneline": "List[State]:\n    return geo_model.find_state(\"utah\").next_to", "python_multiline": "List[State]:\n    utah_state = geo_model.find_state(\"utah\")\n    return utah_state.next_to", "python_multiline_discarded": "List[State]:\n    utah_state = geo_model.find_state(\"utah\")\n    border_states = utah_state.next_to\n    return border_states", "python_oneline_discarded": "List[State]:\n    return geo_model.find_state(\"utah\").next_to"}
{"qid": "geo880_17", "query": "How big is Alaska ?", "python": "int:\n    alaska_state = geo_model.find_state('alaska')\n    return alaska_state.size"}
{"qid": "geo880_18", "query": "How big is Massachusetts ?", "python": "int:\n    massachusetts_state = geo_model.find_state(\"massachusetts\")\n    return massachusetts_state.size"}
{"qid": "geo880_19", "query": "How big is New Mexico ?", "python": "int:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    return new_mexico_state.size"}
{"qid": "geo880_20", "query": "How big is North Dakota ?", "python": "int:\n    north_dakota_state = geo_model.find_state(\"north dakota\")\n    return north_dakota_state.size", "python_oneline": "int:\n     return geo_model.find_state(\"north dakota\").size", "python_multiline": "int:\n    north_dakota_state = geo_model.find_state(\"north dakota\")\n    return north_dakota_state.size", "python_multiline_discarded": "int:\n    north_dakota_state = geo_model.find_state(\"north dakota\")\n    return north_dakota_state.size", "python_oneline_discarded": "int:\n     return geo_model.find_state(\"north dakota\").size"}
{"qid": "geo880_21", "query": "How big is Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.size"}
{"qid": "geo880_22", "query": "How big is the city of New York ?", "python": "int:\n    new_york_city = geo_model.find_city('new york')\n    return new_york_city.size", "python_oneline": "int:\n     return geo_model.find_city('new york').size", "python_multiline": "int:\n    new_york_city = geo_model.find_city('new york')\n    return new_york_city.size", "python_multiline_discarded": "int:\n    new_york_city = geo_model.find_city('new york')\n    return new_york_city.size", "python_oneline_discarded": "int:\n     return geo_model.find_city('new york').size"}
{"qid": "geo880_25", "query": "How high is Mount McKinley ?", "python": "int:\n    mount_mckinley = geo_model.find_mountain('mckinley')\n    return mount_mckinley.elevation"}
{"qid": "geo880_26", "query": "How high is the highest point in America ?", "python": "int:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point.elevation"}
{"qid": "geo880_27", "query": "How high is the highest point in Montana ?", "python": "int:\n    montana_state = geo_model.find_state('montana')\n    return montana_state.high_point.elevation"}
{"qid": "geo880_28", "query": "How high is the highest point in the largest state ?", "python": "int:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    return largest_state.high_point.elevation"}
{"qid": "geo880_29", "query": "How high is the highest point of Alabama ?", "python": "int:\n    alabama_state = geo_model.find_state(\"alabama\")\n    return alabama_state.high_point.elevation"}
{"qid": "geo880_30", "query": "How high is the highest point of Delaware ?", "python": "int:\n    delaware_state = geo_model.find_state(\"delaware\")\n    return delaware_state.high_point.elevation"}
{"qid": "geo880_31", "query": "How high is the highest point of Florida ?", "python": "int:\n    florida_state = geo_model.find_state('florida')\n    return florida_state.high_point.elevation"}
{"qid": "geo880_32", "query": "How high is the highest point of Louisiana ?", "python": "int:\n    louisiana_state = geo_model.find_state(\"louisiana\")\n    return louisiana_state.high_point.elevation"}
{"qid": "geo880_33", "query": "How large is Alaska ?", "python": "int:\n    alaska_state = geo_model.find_state('alaska')\n    return alaska_state.size"}
{"qid": "geo880_34", "query": "How large is Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.size"}
{"qid": "geo880_35", "query": "How large is the largest city in Alaska ?", "python": "int:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return max(alaska_state.cities, key=lambda x: x.size).size"}
{"qid": "geo880_36", "query": "How long is Rio Grande ?", "python": "int:\n    rio_grande_river = geo_model.find_river(\"rio grande\")\n    return rio_grande_river.length", "python_oneline": "int:\n     return geo_model.find_river(\"rio grande\").length", "python_multiline": "int:\n    rio_grande_river = geo_model.find_river(\"rio grande\")\n    return rio_grande_river.length", "python_multiline_discarded": "int:\n    rio_grande_river = geo_model.find_river(\"rio grande\")\n    length = rio_grande_river.length\n    return length", "python_oneline_discarded": "int:\n     return geo_model.find_river(\"rio grande\").length"}
{"qid": "geo880_37", "query": "How long is the Colorado river ?", "python": "int:\n    colorado_river = geo_model.find_river(\"colorado\")\n    return colorado_river.length"}
{"qid": "geo880_38", "query": "How long is the Delaware river ?", "python": "int:\n    delaware_river = geo_model.find_river(\"delaware\")\n    return delaware_river.length"}
{"qid": "geo880_39", "query": "How long is the longest river in California ?", "python": "int:\n    california_state = geo_model.find_state(\"california\")\n    return max(california_state.rivers, key=lambda x: x.length).length"}
{"qid": "geo880_40", "query": "How long is the longest river in the USA ?", "python": "int:\n    longest_river = max(geo_model.rivers, key=lambda x: x.length)\n    return longest_river.length"}
{"qid": "geo880_41", "query": "How long is the Mississippi ?", "python": "State:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.length"}
{"qid": "geo880_42", "query": "How long is the Mississippi river ?", "python": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.length", "python_oneline": "int:\n     return geo_model.find_river(\"mississippi\").length", "python_multiline": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.length", "python_multiline_discarded": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    river_length = mississippi_river.length\n    return river_length", "python_oneline_discarded": "int:\n     return geo_model.find_river(\"mississippi\").length"}
{"qid": "geo880_43", "query": "How long is the Mississippi river in miles ?", "python": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.length"}
{"qid": "geo880_44", "query": "How long is the Missouri river ?", "python": "River:\n    return geo_model.find_river(\"missouri\").length", "python_oneline": "River:\n    return geo_model.find_river(\"missouri\").length", "python_multiline": "River:\n    river = geo_model.find_river(\"missouri\")\n    length = river.length\n    return length", "python_multiline_discarded": "River:\n    river = geo_model.find_river(\"missouri\")\n    length = river.length\n    return length", "python_oneline_discarded": "River:\n    return geo_model.find_river(\"missouri\").length"}
{"qid": "geo880_45", "query": "How long is the North Platte river ?", "python": "int:\n    north_platte_river = geo_model.find_river(\"north platte\")\n    return north_platte_river.length"}
{"qid": "geo880_46", "query": "How long is the Ohio river ?", "python": "int:\n    ohio_river = geo_model.find_river(\"ohio\")\n    return ohio_river.length"}
{"qid": "geo880_47", "query": "How long is the Rio Grande river ?", "python": "int:\n    rio_grande_river = geo_model.find_river(\"rio grande\")\n    return rio_grande_river.length"}
{"qid": "geo880_48", "query": "How long is the shortest river in the USA ?", "python": "int:\n    shortest_river = min(geo_model.rivers, key=lambda x: x.length)\n    return shortest_river.length"}
{"qid": "geo880_49", "query": "How many big cities are in Pennsylvania ?", "python": "int:\n    cities_in_pennsylvania = geo_model.find_state(\"pennsylvania\").cities\n    return len([c for c in cities_in_pennsylvania if c.is_major])"}
{"qid": "geo880_50", "query": "How many capitals does Rhode Island have ?", "python": "int:\n    rhode_island_state = geo_model.find_state(\"rhode island\")\n    return len([c for c in rhode_island_state.cities if c.is_capital])"}
{"qid": "geo880_51", "query": "How many cities are in Louisiana ?", "python": "int:\n    louisiana_state = geo_model.find_state(\"louisiana\")\n    return len(louisiana_state.cities)"}
{"qid": "geo880_52", "query": "How many cities are in Montana ?", "python": "int:\n    montana_state = geo_model.find_state('montana')\n    return len(montana_state.cities)"}
{"qid": "geo880_53", "query": "How many cities are there in the United States ?", "python": "int:\n    cities_in_us = [c for s in geo_model.states for c in s.cities]\n    return len(cities_in_us)"}
{"qid": "geo880_54", "query": "How many cities are there in the US ?", "python": "int:\n    cities = [c for s in geo_model.states for c in s.cities]\n    return len(cities)"}
{"qid": "geo880_55", "query": "How many cities are there in US ?", "python": "int:\n    cities_in_usa = geo_model.find_country(\"usa\").cities\n    return len(cities_in_usa)", "python_oneline": "int:\n     return len(geo_model.find_country(\"usa\").cities)", "python_multiline": "int:\n    cities_in_usa = geo_model.find_country(\"usa\").cities\n    return len(cities_in_usa)", "python_multiline_discarded": "int:\n    cities_in_usa = geo_model.find_country(\"usa\").cities\n    num_cities = len(cities_in_usa)\n    return num_cities", "python_oneline_discarded": "int:\n     return len(geo_model.find_country(\"usa\").cities)"}
{"qid": "geo880_56", "query": "How many cities are there in USA ?", "python": "int:\n    cities_in_usa = geo_model.find_country(\"usa\").cities\n    return len(cities_in_usa)"}
{"qid": "geo880_57", "query": "How many cities does Texas have ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return len(texas_state.cities)"}
{"qid": "geo880_58", "query": "How many cities does the USA have ?", "python": "int:\n    cities_in_usa = geo_model.find_country(\"usa\").cities\n    return len(cities_in_usa)"}
{"qid": "geo880_59", "query": "How many cities named Austin are there in the USA ?", "python": "int:\n    austin_cities = [c for c in geo_model.cities if c.name == \"austin\"]\n    return len(austin_cities)"}
{"qid": "geo880_60", "query": "How many citizens does the biggest city have in the USA ?", "python": "int:\n    biggest_city = max(geo_model.cities, key=lambda x: x.population)\n    return biggest_city.population"}
{"qid": "geo880_61", "query": "How many citizens in Alabama ?", "python": "int:\n    alabama_state = geo_model.find_state(\"alabama\")\n    return alabama_state.population"}
{"qid": "geo880_62", "query": "How many citizens in Boulder ?", "python": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population"}
{"qid": "geo880_63", "query": "How many citizens live in California ?", "python": "int:\n    california_state = geo_model.find_state('california')\n    return california_state.population"}
{"qid": "geo880_64", "query": "How many Colorado rivers are there ?", "python": "int:\n    colorado_rivers = [r for r in geo_model.rivers if r.name == \"colorado\"]\n    return len(colorado_rivers)"}
{"qid": "geo880_65", "query": "How many inhabitants does Montgomery have ?", "python": "int:\n    montgomery_city = geo_model.find_city(\"montgomery\")\n    return montgomery_city.population"}
{"qid": "geo880_66", "query": "How many major cities are in Arizona ?", "python": "int:\n    arizona_state = geo_model.find_state('arizona')\n    return len([c for c in arizona_state.cities if c.is_major])"}
{"qid": "geo880_67", "query": "How many major cities are in Florida ?", "python": "int:\n    florida_state = geo_model.find_state('florida')\n    return len([c for c in florida_state.cities if c.is_major])"}
{"qid": "geo880_68", "query": "How many major cities are in states bordering Nebraska ?", "python": "int:\n    nebraska_state = geo_model.find_state(\"nebraska\")\n    major_cities = [c for s in nebraska_state.next_to for c in s.cities if c.is_major]\n    return len(major_cities)", "python_oneline": "int:\n     return len([c for s in geo_model.find_state(\"nebraska\").next_to for c in s.cities if c.is_major])", "python_multiline": "int:\n    nebraska_state = geo_model.find_state(\"nebraska\")\n    major_cities = [c for s in nebraska_state.next_to for c in s.cities if c.is_major]\n    return len(major_cities)", "python_multiline_discarded": "int:\n    nebraska_state = geo_model.find_state(\"nebraska\")\n    bordering_states = nebraska_state.next_to\n    major_cities = []\n    for state in bordering_states:\n        for city in state.cities:\n            if city.is_major:\n                major_cities.append(city)\n    return len(major_cities)", "python_oneline_discarded": "int:\n     return len([c for s in geo_model.find_state(\"nebraska\").next_to for c in s.cities if c.is_major])"}
{"qid": "geo880_69", "query": "How many major cities are in states bordering Utah ?", "python": "int:\n    utah_state = geo_model.find_state(\"utah\")\n    states_bordering_utah = utah_state.next_to\n    cities_in_states_bordering_utah = [c for s in states_bordering_utah for c in s.cities]\n    return len([c for c in cities_in_states_bordering_utah if c.is_major])"}
{"qid": "geo880_70", "query": "How many major cities are in Texas ?", "python": "int:\n    texas_state = geo_model.find_state(\"texas\")\n    return len([c for c in texas_state.cities if c.is_major])"}
{"qid": "geo880_71", "query": "How many major cities are there ?", "python": "int:\n    return len([c for c in geo_model.cities if c.is_major])"}
{"qid": "geo880_72", "query": "How many major cities are there in Oregon ?", "python": "int:\n    oregon_state = geo_model.find_state('oregon')\n    major_cities = [c for c in oregon_state.cities if c.is_major]\n    return len(major_cities)"}
{"qid": "geo880_73", "query": "How many major rivers cross Ohio ?", "python": "int:\n    ohio_state = geo_model.find_state(\"ohio\")\n    major_rivers = [r for r in ohio_state.rivers if r.is_major]\n    return len(major_rivers)", "python_oneline": "int:\n     return len([r for r in geo_model.find_state(\"ohio\").rivers if r.is_major])", "python_multiline": "int:\n    ohio_state = geo_model.find_state(\"ohio\")\n    major_rivers = [r for r in ohio_state.rivers if r.is_major]\n    return len(major_rivers)", "python_multiline_discarded": "int:\n    ohio_state = geo_model.find_state(\"ohio\")\n    major_rivers = [r for r in ohio_state.rivers if r.is_major]\n    return len(major_rivers)", "python_oneline_discarded": "int:\n     return len([r for r in geo_model.find_state(\"ohio\").rivers if r.is_major])"}
{"qid": "geo880_74", "query": "How many people are in the state of Nevada ?", "python": "int:\n    nevada_state = geo_model.find_state('nevada')\n    return nevada_state.population"}
{"qid": "geo880_75", "query": "How many people are there in Iowa ?", "python": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return iowa_state.population", "python_oneline": "int:\n     return geo_model.find_state(\"iowa\").population", "python_multiline": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return iowa_state.population", "python_multiline_discarded": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return iowa_state.population", "python_oneline_discarded": "int:\n     return geo_model.find_state(\"iowa\").population"}
{"qid": "geo880_76", "query": "How many people are there in New York ?", "python": "int:\n    new_york_state = geo_model.find_state(\"new york\")\n    return new_york_state.population"}
{"qid": "geo880_77", "query": "How many people in Boulder ?", "python": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population", "python_oneline": "int:\n     return geo_model.find_city('boulder').population", "python_multiline": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population", "python_multiline_discarded": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population", "python_oneline_discarded": "int:\n     return geo_model.find_city('boulder').population"}
{"qid": "geo880_78", "query": "How many people live in Austin ?", "python": "int:\n    austin_city = geo_model.find_city('austin')\n    return austin_city.population"}
{"qid": "geo880_79", "query": "How many people live in Austin Texas ?", "python": "int:\n    austin_city = geo_model.find_city(\"austin\", \"tx\")\n    return austin_city.population", "python_oneline": "int:\n     return geo_model.find_city(\"austin\", \"tx\").population", "python_multiline": "int:\n    austin_city = geo_model.find_city(\"austin\", \"tx\")\n    return austin_city.population", "python_multiline_discarded": "int:\n    austin_city = geo_model.find_city(\"austin\", \"tx\")\n    return austin_city.population", "python_oneline_discarded": "int:\n     return geo_model.find_city(\"austin\", \"tx\").population"}
{"qid": "geo880_80", "query": "How many people live in California ?", "python": "int:\n    california_state = geo_model.find_state('california')\n    return california_state.population"}
{"qid": "geo880_81", "query": "How many people live in Chicago ?", "python": "int:\n    chicago_city = geo_model.find_city('chicago')\n    return chicago_city.population"}
{"qid": "geo880_82", "query": "How many people live in Detroit ?", "python": "int:\n    detroit_city = geo_model.find_city('detroit')\n    return detroit_city.population"}
{"qid": "geo880_83", "query": "How many people live in Hawaii ?", "python": "int:\n    hawaii_state = geo_model.find_state(\"hawaii\")\n    return hawaii_state.population"}
{"qid": "geo880_84", "query": "How many people live in Houston ?", "python": "int:\n    houston_city = geo_model.find_city('houston')\n    return houston_city.population"}
{"qid": "geo880_85", "query": "How many people live in Kalamazoo ?", "python": "int:\n    kalamazoo_city = geo_model.find_city(\"kalamazoo\")\n    return kalamazoo_city.population"}
{"qid": "geo880_86", "query": "How many people live in Kansas ?", "python": "int:\n    kansas_state = geo_model.find_state('kansas')\n    return kansas_state.population"}
{"qid": "geo880_87", "query": "How many people live in Minneapolis Minnesota ?", "python": "int:\n    minneapolis_city = geo_model.find_city('minneapolis', 'mn')\n    return minneapolis_city.population"}
{"qid": "geo880_88", "query": "How many people live in Mississippi ?", "python": "int:\n    mississippi_state = geo_model.find_state(\"mississippi\")\n    return mississippi_state.population"}
{"qid": "geo880_89", "query": "How many people live in Montana ?", "python": "int:\n    montana_state = geo_model.find_state('montana')\n    return montana_state.population"}
{"qid": "geo880_90", "query": "How many people live in New Hampshire ?", "python": "int:\n    new_hampshire_state = geo_model.find_state('new hampshire')\n    return new_hampshire_state.population"}
{"qid": "geo880_91", "query": "How many people live in New Mexico ?", "python": "int:\n    new_mexico_state = geo_model.find_state('new mexico')\n    return new_mexico_state.population"}
{"qid": "geo880_92", "query": "How many people live in New York ?", "python": "int:\n    new_york_state = geo_model.find_state(\"new york\")\n    return new_york_state.population"}
{"qid": "geo880_93", "query": "How many people live in Rhode Island ?", "python": "int:\n    rhode_island_state = geo_model.find_state('rhode island')\n    return rhode_island_state.population"}
{"qid": "geo880_94", "query": "How many people live in Riverside ?", "python": "int:\n    riverside_city = geo_model.find_city('riverside')\n    return riverside_city.population"}
{"qid": "geo880_95", "query": "How many people live in San Francisco ?", "python": "int:\n    san_francisco_city = geo_model.find_city(\"san francisco\")\n    return san_francisco_city.population"}
{"qid": "geo880_96", "query": "How many people live in South Dakota ?", "python": "int:\n    south_dakota_state = geo_model.find_state('south dakota')\n    return south_dakota_state.population"}
{"qid": "geo880_97", "query": "How many people live in Spokane Washington ?", "python": "int:\n    spokane_city = geo_model.find_city('spokane', 'wa')\n    return spokane_city.population", "python_oneline": "int:\n     return geo_model.find_city('spokane', 'wa').population", "python_multiline": "int:\n    spokane_city = geo_model.find_city('spokane', 'wa')\n    return spokane_city.population", "python_multiline_discarded": "int:\n    spokane_city = geo_model.find_city('spokane', 'wa')\n    return spokane_city.population", "python_oneline_discarded": "int:\n     return geo_model.find_city('spokane', 'wa').population"}
{"qid": "geo880_98", "query": "How many people live in Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.population"}
{"qid": "geo880_99", "query": "How many people live in the biggest city in New York state ?", "python": "int:\n    new_york_state = geo_model.find_state('new york')\n    biggest_city = max(new_york_state.cities, key=lambda x: x.population)\n    return biggest_city.population"}
{"qid": "geo880_100", "query": "How many people live in the capital of Georgia ?", "python": "int:\n    georgia_state = geo_model.find_state('georgia')\n    return georgia_state.capital.population"}
{"qid": "geo880_101", "query": "How many people live in the capital of Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.capital.population"}
{"qid": "geo880_102", "query": "How many people live in the smallest state bordering Wyoming ?", "python": "int:\n    wyoming_state = geo_model.find_state(\"wyoming\")\n    smallest_state = min(wyoming_state.next_to, key=lambda x: x.size)\n    return smallest_state.population"}
{"qid": "geo880_103", "query": "How many people live in the state with the largest population density ?", "python": "int:\n    state_with_largest_density = max(geo_model.states, key=lambda x: x.density)\n    return state_with_largest_density.population"}
{"qid": "geo880_104", "query": "How many people live in the United States ?", "python": "List[Tuple[State, Country]]:\n    return geo_model.find_country(\"usa\").population"}
{"qid": "geo880_105", "query": "How many people live in Washington ?", "python": "int:\n    washington_state = geo_model.find_state('washington')\n    return washington_state.population"}
{"qid": "geo880_107", "query": "How many people lived in Austin ?", "python": "int:\n    austin_city = geo_model.find_city(\"austin\")\n    return austin_city.population", "python_oneline": "int:\n     return geo_model.find_city(\"austin\").population", "python_multiline": "int:\n    austin_city = geo_model.find_city(\"austin\")\n    return austin_city.population", "python_multiline_discarded": "int:\n    austin_city = geo_model.find_city(\"austin\")\n    population = austin_city.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_city(\"austin\").population"}
{"qid": "geo880_108", "query": "How many people reside in Utah ?", "python": "int:\n    utah_state = geo_model.find_state('utah')\n    return utah_state.population"}
{"qid": "geo880_109", "query": "How many people stay in Utah ?", "python": "int:\n    utah_state = geo_model.find_state(\"utah\")\n    return utah_state.population"}
{"qid": "geo880_110", "query": "How many residents live in Texas ?", "python": "int:\n    texas_state = geo_model.find_state(\"texas\")\n    return texas_state.population"}
{"qid": "geo880_111", "query": "How many rivers are called Colorado ?", "python": "int:\n    return len([r for r in geo_model.rivers if r.name == \"colorado\"])"}
{"qid": "geo880_112", "query": "How many rivers are found in Colorado ?", "python": "int:\n    rivers_in_colorado = geo_model.find_state('colorado').rivers\n    return len(rivers_in_colorado)"}
{"qid": "geo880_113", "query": "How many rivers are in Colorado ?", "python": "int:\n    colorado_state = geo_model.find_state('colorado')\n    return len(colorado_state.rivers)"}
{"qid": "geo880_114", "query": "How many rivers are in Iowa ?", "python": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return len(iowa_state.rivers)"}
{"qid": "geo880_115", "query": "How many rivers are in Missouri ?", "python": "int:\n    rivers_in_missouri = geo_model.find_state('missouri').rivers\n    return len(rivers_in_missouri)"}
{"qid": "geo880_116", "query": "How many rivers are in New York ?", "python": "int:\n    new_york_state = geo_model.find_state(\"new york\")\n    return len(new_york_state.rivers)"}
{"qid": "geo880_117", "query": "How many rivers are in the state that has the most rivers ?", "python": "int:\n    states_with_most_rivers = max(geo_model.states, key=lambda x: len(x.rivers))\n    return len(states_with_most_rivers.rivers)"}
{"qid": "geo880_118", "query": "How many rivers are in the state with the highest point ?", "python": "int:\n    highest_state = max(geo_model.states, key=lambda x: x.high_point.elevation)\n    return len(highest_state.rivers)", "python_oneline": "int:\n     return len(max(geo_model.states, key=lambda x: x.high_point.elevation).rivers)", "python_multiline": "int:\n    highest_state = max(geo_model.states, key=lambda x: x.high_point.elevation)\n    return len(highest_state.rivers)", "python_multiline_discarded": "int:\n    highest_state = max(geo_model.states, key=lambda x: x.high_point.elevation)\n    num_rivers = len(highest_state.rivers)\n    return num_rivers", "python_oneline_discarded": "int:\n     return len(max(geo_model.states, key=lambda x: x.high_point.elevation).rivers)"}
{"qid": "geo880_119", "query": "How many rivers are in the state with the largest population ?", "python": "int:\n    state_with_largest_population = max(geo_model.states, key=lambda x: x.population)\n    return len(state_with_largest_population.rivers)"}
{"qid": "geo880_120", "query": "How many rivers are there in Idaho ?", "python": "int:\n    idaho_state = geo_model.find_state(\"idaho\")\n    return len(idaho_state.rivers)", "python_oneline": "int:\n     return len(geo_model.find_state(\"idaho\").rivers)", "python_multiline": "int:\n    idaho_state = geo_model.find_state(\"idaho\")\n    return len(idaho_state.rivers)", "python_multiline_discarded": "int:\n    idaho_state = geo_model.find_state(\"idaho\")\n    num_rivers = len(idaho_state.rivers)\n    return num_rivers", "python_oneline_discarded": "int:\n     return len(geo_model.find_state(\"idaho\").rivers)"}
{"qid": "geo880_121", "query": "How many rivers are there in Texas ?", "python": "int:\n    texas_state = geo_model.find_state(\"texas\")\n    return len(texas_state.rivers)", "python_oneline": "int:\n     return len(geo_model.find_state(\"texas\").rivers)", "python_multiline": "int:\n    texas_state = geo_model.find_state(\"texas\")\n    return len(texas_state.rivers)", "python_multiline_discarded": "int:\n    texas_state = geo_model.find_state(\"texas\")\n    num_rivers = len(texas_state.rivers)\n    return num_rivers", "python_oneline_discarded": "int:\n     return len(geo_model.find_state(\"texas\").rivers)"}
{"qid": "geo880_122", "query": "How many rivers are there in US ?", "python": "int:\n    rivers = geo_model.find_country(\"usa\").rivers\n    return len(rivers)"}
{"qid": "geo880_123", "query": "How many rivers do not traverse the state with the capital Albany ?", "python": "int:\n    albany_state = [s for s in geo_model.states if s.capital and s.capital.name == \"albany\"][0]\n    return len([r for r in geo_model.rivers if albany_state not in r.traverses])"}
{"qid": "geo880_124", "query": "How many rivers does Alaska have ?", "python": "int:\n    alaska_state = geo_model.find_state('alaska')\n    return len(alaska_state.rivers)"}
{"qid": "geo880_125", "query": "How many rivers does Colorado have ?", "python": "int:\n    colorado_state = geo_model.find_state('colorado')\n    return len(colorado_state.rivers)"}
{"qid": "geo880_126", "query": "How many rivers in Texas are longer than the Red ?", "python": "int:\n    red_river = geo_model.find_river(\"red\")\n    texas_state = geo_model.find_state(\"texas\")\n    return len([r for r in texas_state.rivers if r.length > red_river.length])"}
{"qid": "geo880_127", "query": "How many rivers in Washington ?", "python": "int:\n    washington_state = geo_model.find_state('washington')\n    return len(washington_state.rivers)"}
{"qid": "geo880_128", "query": "How many rivers run through Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return len(texas_state.rivers)"}
{"qid": "geo880_130", "query": "How many square kilometers in the US ?", "python": "int:\n    usa_country = geo_model.find_country(\"usa\")\n    return usa_country.area"}
{"qid": "geo880_131", "query": "How many states are in the United States ?", "python": "int:\n    return len(geo_model.find_country(\"usa\").states)"}
{"qid": "geo880_132", "query": "How many states are in the USA ?", "python": "int:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return len(states_in_usa)", "python_oneline": "int:\n     return len(geo_model.find_country(\"usa\").states)", "python_multiline": "int:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return len(states_in_usa)", "python_multiline_discarded": "int:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    num_states = len(states_in_usa)\n    return num_states", "python_oneline_discarded": "int:\n     return len(geo_model.find_country(\"usa\").states)"}
{"qid": "geo880_134", "query": "How many states are there ?", "python": "int:\n    return len(geo_model.states)"}
{"qid": "geo880_135", "query": "How many states are there in the USA ?", "python": "int:\n    return len(geo_model.states)"}
{"qid": "geo880_136", "query": "How many states are there in United States ?", "python": "int:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return len(states_in_usa)"}
{"qid": "geo880_137", "query": "How many states border Alaska ?", "python": "int:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return len(alaska_state.next_to)"}
{"qid": "geo880_138", "query": "How many states border at least one other state ?", "python": "int:\n    return len([s for s in geo_model.states if s.next_to])", "python_oneline": "int:\n    return len([s for s in geo_model.states if s.next_to])", "python_multiline": "int:\n    states_with_neighbors = [s for s in geo_model.states if s.next_to]\n    num_states_with_neighbors = len(states_with_neighbors)\n    return num_states_with_neighbors", "python_multiline_discarded": "int:\n    states_with_neighbors = [s for s in geo_model.states if s.next_to]\n    num_states_with_neighbors = len(states_with_neighbors)\n    return num_states_with_neighbors", "python_oneline_discarded": "int:\n     return len([s for s in geo_model.states if s.next_to])"}
{"qid": "geo880_139", "query": "How many states border Colorado and border New Mexico ?", "python": "int:\n    colorado_state = geo_model.find_state(\"colorado\")\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    states_bordering_colorado = colorado_state.next_to\n    states_bordering_new_mexico = new_mexico_state.next_to\n    return len(set(states_bordering_colorado).intersection(states_bordering_new_mexico))"}
{"qid": "geo880_140", "query": "How many states border Hawaii ?", "python": "int:\n    hawaii_state = geo_model.find_state('hawaii')\n    return len(hawaii_state.next_to)", "python_oneline": "int:\n     return len(geo_model.find_state('hawaii').next_to)", "python_multiline": "int:\n    hawaii_state = geo_model.find_state('hawaii')\n    return len(hawaii_state.next_to)", "python_multiline_discarded": "int:\n    hawaii_state = geo_model.find_state('hawaii')\n    num_states = len(hawaii_state.next_to)\n    return num_states", "python_oneline_discarded": "int:\n     return len(geo_model.find_state('hawaii').next_to)"}
{"qid": "geo880_141", "query": "How many states border Iowa ?", "python": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return len(iowa_state.next_to)", "python_oneline": "int:\n     return len(geo_model.find_state(\"iowa\").next_to)", "python_multiline": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return len(iowa_state.next_to)", "python_multiline_discarded": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    num_states = len(iowa_state.next_to)\n    return num_states", "python_oneline_discarded": "int:\n     return len(geo_model.find_state(\"iowa\").next_to)"}
{"qid": "geo880_142", "query": "How many states border on the state whose capital is Boston ?", "python": "int:\n    boston_city = geo_model.find_city('boston')\n    states_bordering_boston = boston_city.state.next_to\n    return len(states_bordering_boston)"}
{"qid": "geo880_143", "query": "How many states border Tennessee ?", "python": "int:\n    states_bordering_tennessee = geo_model.find_state('tennessee').next_to\n    return len(states_bordering_tennessee)"}
{"qid": "geo880_144", "query": "How many states border Texas ?", "python": "int:\n    texas_state = geo_model.find_state(\"texas\")\n    return len(texas_state.next_to)"}
{"qid": "geo880_145", "query": "How many states border the largest state ?", "python": "int:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    return len(largest_state.next_to)"}
{"qid": "geo880_147", "query": "How many states border the state that borders the most states ?", "python": "int:\n    state_with_most_borders = max(geo_model.states, key=lambda x: len(x.next_to))\n    return len(state_with_most_borders.next_to)"}
{"qid": "geo880_148", "query": "How many states border the state with the largest population ?", "python": "int:\n    largest_state = max(geo_model.states, key=lambda x: x.population)\n    return len(largest_state.next_to)"}
{"qid": "geo880_149", "query": "How many states do not have rivers ?", "python": "int:\n    states_without_rivers = [state for state in geo_model.states if not state.rivers]\n    return len(states_without_rivers)"}
{"qid": "geo880_150", "query": "How many states does Iowa border ?", "python": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return len(iowa_state.next_to)"}
{"qid": "geo880_151", "query": "How many states does Missouri border ?", "python": "int:\n    missouri_state = geo_model.find_state('missouri')\n    return len(missouri_state.next_to)"}
{"qid": "geo880_152", "query": "How many states does Tennessee border ?", "python": "int:\n    return len(geo_model.find_state(\"tennessee\").next_to)"}
{"qid": "geo880_153", "query": "How many states does the Colorado river flow through ?", "python": "int:\n    colorado_river = geo_model.find_river(\"colorado\")\n    return len(colorado_river.traverses)"}
{"qid": "geo880_154", "query": "How many states does the Colorado river run through ?", "python": "int:\n    colorado_river = geo_model.find_river(\"colorado\")\n    return len(colorado_river.traverses)"}
{"qid": "geo880_155", "query": "How many states does the Mississippi river run through ?", "python": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return len(mississippi_river.traverses)"}
{"qid": "geo880_156", "query": "How many states does the Mississippi run through ?", "python": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return len(mississippi_river.traverses)", "python_oneline": "int:\n     return len(geo_model.find_river(\"mississippi\").traverses)", "python_multiline": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return len(mississippi_river.traverses)", "python_multiline_discarded": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    num_states = len(mississippi_river.traverses)\n    return num_states", "python_oneline_discarded": "int:\n     return len(geo_model.find_river(\"mississippi\").traverses)"}
{"qid": "geo880_157", "query": "How many states does the Missouri river run through ?", "python": "int:\n    missouri_river = geo_model.find_river(\"missouri\")\n    return len(missouri_river.traverses)"}
{"qid": "geo880_158", "query": "How many states does USA have ?", "python": "int:\n    return len(geo_model.find_country(\"usa\").states)"}
{"qid": "geo880_159", "query": "How many states have a city called Rochester ?", "python": "int:\n    rochester_cities = [c for c in geo_model.cities if c.name == \"Rochester\"]\n    return len(set([c.state for c in rochester_cities]))", "python_oneline": "int:\n     return len(set([c.state for c in [c for c in geo_model.cities if c.name == \"Rochester\"]]))", "python_multiline": "int:\n    rochester_cities = [c for c in geo_model.cities if c.name == \"Rochester\"]\n    return len(set([c.state for c in rochester_cities]))", "python_multiline_discarded": "int:\n    rochester_cities = [c for c in geo_model.cities if c.name == \"Rochester\"]\n    states = [c.state for c in rochester_cities]\n    unique_states = set(states)\n    return len(unique_states)", "python_oneline_discarded": "int:\n     return len(set([c.state for c in [c for c in geo_model.cities if c.name == \"Rochester\"]]))"}
{"qid": "geo880_160", "query": "How many states have a city named Springfield ?", "python": "int:\n    count = 0\n    for state in geo_model.states:\n        for city in state.cities:\n            if city.name == \"springfield\":\n                count += 1\n    return count"}
{"qid": "geo880_161", "query": "How many states have a higher point than the highest point of the state with the largest capital city in the US ?", "python": "int:\n    largest_capital_city = max(geo_model.cities, key=lambda x: x.size if x.is_capital else 0)\n    largest_capital_state = largest_capital_city.state\n    highest_point_in_largest_capital_state = largest_capital_state.high_point\n    return len([s for s in geo_model.states if s.high_point.elevation > highest_point_in_largest_capital_state.elevation])"}
{"qid": "geo880_162", "query": "How many states have cities named Austin ?", "python": "int:\n    count = 0\n    for state in geo_model.states:\n        for city in state.cities:\n            if city.name == \"austin\":\n                count += 1\n    return count"}
{"qid": "geo880_163", "query": "How many states have cities or towns named Springfield ?", "python": "int:\n    states_with_springfield = [s for s in geo_model.states if any(c.name == \"springfield\" for c in s.cities)]\n    return len(states_with_springfield)"}
{"qid": "geo880_164", "query": "How many states have major rivers ?", "python": "int:\n    return len([s for s in geo_model.states if any(r.is_major for r in s.rivers)])"}
{"qid": "geo880_165", "query": "How many states in the US does the shortest river run through ?", "python": "int:\n    shortest_river = min(geo_model.rivers, key=lambda x: x.length)\n    states_traversed_by_shortest_river = shortest_river.traverses\n    return len(states_traversed_by_shortest_river)"}
{"qid": "geo880_166", "query": "How much population does Texas have ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.population"}
{"qid": "geo880_168", "query": "How tall is the highest point in Montana ?", "python": "int:\n    montana_state = geo_model.find_state('montana')\n    return montana_state.high_point.elevation"}
{"qid": "geo880_169", "query": "In what state is Mount McKinley ?", "python": "State:\n    mount_mckinley = geo_model.find_mountain('mckinley')\n    return mount_mckinley.state"}
{"qid": "geo880_170", "query": "In which state does the highest point in USA exist ?", "python": "State:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point.state"}
{"qid": "geo880_172", "query": "Iowa borders how many states ?", "python": "int:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return len(iowa_state.next_to)"}
{"qid": "geo880_173", "query": "List the states .", "python": "List[State]:\n    return geo_model.states"}
{"qid": "geo880_174", "query": "Name all the lakes of US .", "python": "List[Lake]:\n    return geo_model.find_country(\"usa\").lakes"}
{"qid": "geo880_175", "query": "Name all the rivers in Colorado .", "python": "List[River]:\n    colorado_state = geo_model.find_state('colorado')\n    return colorado_state.rivers"}
{"qid": "geo880_176", "query": "Name the 50 capitals in the USA .", "python": "List[City]:\n    capitals_in_usa = [c for s in geo_model.states if s.capital for c in s.cities if c.is_capital]\n    return capitals_in_usa[:50]"}
{"qid": "geo880_177", "query": "Name the longest river in US .", "python": "River:\n    longest_river = max(geo_model.rivers, key=lambda x: x.length)\n    return longest_river"}
{"qid": "geo880_178", "query": "Name the major lakes in Michigan .", "python": "List[Lake]:\n    michigan_state = geo_model.find_state(\"michigan\")\n    return [l for l in michigan_state.lakes if l.is_major]"}
{"qid": "geo880_179", "query": "Name the major rivers in Florida .", "python": "List[River]:\n    rivers_in_florida = geo_model.find_state(\"florida\").rivers\n    return [r for r in rivers_in_florida if r.is_major]", "python_oneline": "List[River]:\n    return [r for r in geo_model.find_state(\"florida\").rivers if r.is_major]", "python_multiline": "List[River]:\n    rivers_in_florida = geo_model.find_state(\"florida\").rivers\n    return [r for r in rivers_in_florida if r.is_major]", "python_multiline_discarded": "from typing import List\n\nList[River]:\n    rivers_in_florida = geo_model.find_state(\"florida\").rivers\n    major_rivers = [r for r in rivers_in_florida if r.is_major]\n    return major_rivers", "python_oneline_discarded": "List[River]:\n    return [r for r in geo_model.find_state(\"florida\").rivers if r.is_major]"}
{"qid": "geo880_180", "query": "Name the rivers in Arkansas .", "python": "List[River]:\n    return geo_model.find_state(\"arkansas\").rivers"}
{"qid": "geo880_181", "query": "Name the states which have no surrounding states .", "python": "List[State]:\n    states_with_no_neighbors = []\n    for state in geo_model.states:\n        if len(state.next_to) == 0:\n            states_with_no_neighbors.append(state)\n    return states_with_no_neighbors"}
{"qid": "geo880_182", "query": "Number of citizens in Boulder ?", "python": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population", "python_oneline": "int:\n     return geo_model.find_city('boulder').population", "python_multiline": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population", "python_multiline_discarded": "int:\n    boulder_city = geo_model.find_city('boulder')\n    population = boulder_city.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_city('boulder').population"}
{"qid": "geo880_183", "query": "Number of people in Boulder ?", "python": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population"}
{"qid": "geo880_184", "query": "Number of states bordering Iowa ?", "python": "int:\n    states_bordering_iowa = geo_model.find_state('iowa').next_to\n    return len(states_bordering_iowa)", "python_oneline": "int:\n     return len(geo_model.find_state('iowa').next_to)", "python_multiline": "int:\n    states_bordering_iowa = geo_model.find_state('iowa').next_to\n    return len(states_bordering_iowa)", "python_multiline_discarded": "int:\n    states_bordering_iowa = geo_model.find_state('iowa').next_to\n    return len(states_bordering_iowa)", "python_oneline_discarded": "int:\n     return len(geo_model.find_state('iowa').next_to)"}
{"qid": "geo880_185", "query": "Of the states washed by the Mississippi river which has the lowest point ?", "python": "State:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return min(mississippi_river.traverses, key=lambda x: x.low_point.elevation)"}
{"qid": "geo880_186", "query": "People in Boulder ?", "python": "int:\n    boulder_city = geo_model.find_city(\"boulder\")\n    return boulder_city.population", "python_oneline": "int:\n     return geo_model.find_city(\"boulder\").population", "python_multiline": "int:\n    boulder_city = geo_model.find_city(\"boulder\")\n    return boulder_city.population", "python_multiline_discarded": "int:\n    boulder_city = geo_model.find_city(\"boulder\")\n    return boulder_city.population", "python_oneline_discarded": "int:\n     return geo_model.find_city(\"boulder\").population"}
{"qid": "geo880_187", "query": "Population of Boulder ?", "python": "int:\n    boulder_city = geo_model.find_city(\"boulder\")\n    return boulder_city.population"}
{"qid": "geo880_188", "query": "Rivers in New York ?", "python": "List[River]:\n    new_york_state = geo_model.find_state(\"new york\")\n    return new_york_state.rivers"}
{"qid": "geo880_189", "query": "Sacramento is the capital of which state ?", "python": "State:\n    sacramento_city = geo_model.find_city(\"sacramento\")\n    return sacramento_city.state"}
{"qid": "geo880_190", "query": "San Antonio is in what state ?", "python": "State:\n    san_antonio_city = geo_model.find_city(\"san antonio\")\n    return san_antonio_city.state"}
{"qid": "geo880_191", "query": "Show major cities in Colorado .", "python": "List[City]:\n    colorado_state = geo_model.find_state('colorado')\n    return [c for c in colorado_state.cities if c.is_major]"}
{"qid": "geo880_193", "query": "State the state with the largest area .", "python": "State:\n    return max(geo_model.states, key=lambda x: x.area)", "python_oneline": "State:\n    return max(geo_model.states, key=lambda x: x.area)", "python_multiline": "State:\n    return max(geo_model.states, key=lambda x: x.area)", "python_multiline_discarded": "State:\n    return max(geo_model.states, key=lambda x: x.area)", "python_oneline_discarded": "State:\n    return max(geo_model.states, key=lambda x: x.area)"}
{"qid": "geo880_194", "query": "States bordering Iowa ?", "python": "List[State]:\n    return geo_model.find_state(\"iowa\").next_to", "python_oneline": "List[State]:\n    return geo_model.find_state(\"iowa\").next_to", "python_multiline": "List[State]:\n    state = geo_model.find_state(\"iowa\")\n    next_to = state.next_to\n    return next_to", "python_multiline_discarded": "List[State]:\n    state = geo_model.find_state(\"iowa\")\n    next_to = state.next_to\n    return next_to", "python_oneline_discarded": "List[State]:\n    return [state for state in geo_model.states if \"iowa\" in state.next_to]"}
{"qid": "geo880_195", "query": "Tell me what cities are in Texas .", "python": "List[City]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.cities"}
{"qid": "geo880_196", "query": "Through which states does the longest river in Texas run ?", "python": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    longest_river_in_texas = max(texas_state.rivers, key=lambda x: x.length)\n    return longest_river_in_texas.traverses", "python_oneline": "List[State]:\n    return max(geo_model.find_state('texas').rivers, key=lambda x: x.length).traverses", "python_multiline": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    longest_river_in_texas = max(texas_state.rivers, key=lambda x: x.length)\n    return longest_river_in_texas.traverses", "python_multiline_discarded": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    longest_river_in_texas = max(texas_state.rivers, key=lambda x: x.length)\n    return longest_river_in_texas.traverses", "python_oneline_discarded": "List[State]:\n    return max(geo_model.find_state('texas').rivers, key=lambda x: x.length).traverses"}
{"qid": "geo880_197", "query": "Through which states does the Mississippi flow ?", "python": "List[State]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.traverses"}
{"qid": "geo880_198", "query": "Through which states does the Mississippi run ?", "python": "List[State]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.traverses"}
{"qid": "geo880_199", "query": "What are all the rivers in Texas ?", "python": "List[River]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.rivers", "python_oneline": "List[River]:\n    return geo_model.find_state('texas').rivers", "python_multiline": "List[River]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.rivers", "python_multiline_discarded": "List[River]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.rivers", "python_oneline_discarded": "List[River]:\n    return geo_model.find_state('texas').rivers"}
{"qid": "geo880_200", "query": "What are major rivers in Texas ?", "python": "List[River]:\n    texas_state = geo_model.find_state('texas')\n    return [r for r in texas_state.rivers if r.is_major]"}
{"qid": "geo880_202", "query": "What are the capital cities of the states which border Texas ?", "python": "List[City]:\n    texas_state = geo_model.find_state(\"texas\")\n    bordering_states = texas_state.next_to\n    return [s.capital for s in bordering_states if s.capital]", "python_oneline": "List[City]:\n    return [s.capital for s in geo_model.find_state(\"texas\").next_to if s.capital]", "python_multiline": "List[City]:\n    texas_state = geo_model.find_state(\"texas\")\n    bordering_states = texas_state.next_to\n    return [s.capital for s in bordering_states if s.capital]", "python_multiline_discarded": "List[City]:\n    texas_state = geo_model.find_state(\"texas\")\n    bordering_states = texas_state.next_to\n    capital_cities = []\n    for state in bordering_states:\n        if state.capital:\n            capital_cities.append(state.capital)\n    return capital_cities", "python_oneline_discarded": "List[City]:\n    return [s.capital for s in geo_model.find_state(\"texas\").next_to if s.capital]"}
{"qid": "geo880_203", "query": "What is the capital city in Texas ?", "python": "City:\n    return geo_model.find_state(\"texas\").capital"}
{"qid": "geo880_204", "query": "What are the capitals of states that border Missouri ?", "python": "List[City]:\n    missouri_state = geo_model.find_state('missouri')\n    states_bordering_missouri = missouri_state.next_to\n    return [s.capital for s in states_bordering_missouri]"}
{"qid": "geo880_205", "query": "What are the capitals of the states that border Texas ?", "python": "List[City]:\n    texas_state = geo_model.find_state(\"texas\")\n    bordering_states = texas_state.next_to\n    return [s.capital for s in bordering_states if s.capital is not None]"}
{"qid": "geo880_206", "query": "What are the cities in California ?", "python": "List[City]:\n    california_state = geo_model.find_state('california')\n    return california_state.cities", "python_oneline": "List[City]:\n    return geo_model.find_state('california').cities", "python_multiline": "List[City]:\n    california_state = geo_model.find_state('california')\n    return california_state.cities", "python_multiline_discarded": "List[City]:\n    california_state = geo_model.find_state('california')\n    cities = california_state.cities\n    return cities", "python_oneline_discarded": "List[City]:\n    return geo_model.find_state('california').cities"}
{"qid": "geo880_207", "query": "What are the cities in states through which the Mississippi runs ?", "python": "List[City]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    states_traversed = mississippi_river.traverses\n    cities_in_states = [city for state in states_traversed for city in state.cities]\n    return cities_in_states"}
{"qid": "geo880_208", "query": "What are the cities of the state with the highest point ?", "python": "List[City]:\n    highest_state = max(geo_model.states, key=lambda x: x.high_point.elevation)\n    return highest_state.cities"}
{"qid": "geo880_211", "query": "What are the lakes in states bordering Texas ?", "python": "List[Lake]:\n    texas_state = geo_model.find_state('texas')\n    return [l for s in texas_state.next_to for l in s.lakes]"}
{"qid": "geo880_212", "query": "What are the largest cities in the states that border the largest state ?", "python": "List[City]:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    bordering_states = largest_state.next_to\n    largest_cities = [max(s.cities, key=lambda x: x.size) for s in bordering_states]\n    return largest_cities"}
{"qid": "geo880_213", "query": "What are the major cities in Alabama ?", "python": "List[City]:\n    cities_in_alabama = geo_model.find_state(\"alabama\").cities\n    return [c for c in cities_in_alabama if c.is_major]"}
{"qid": "geo880_214", "query": "What are the major cities in Alaska ?", "python": "List[City]:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return [c for c in alaska_state.cities if c.is_major]"}
{"qid": "geo880_215", "query": "What are the major cities in California ?", "python": "List[City]:\n    california_state = geo_model.find_state(\"california\")\n    return [c for c in california_state.cities if c.is_major]"}
{"qid": "geo880_216", "query": "What are the major cities in Delaware ?", "python": "List[City]:\n    delaware_state = geo_model.find_state(\"delaware\")\n    return [c for c in delaware_state.cities if c.is_major]"}
{"qid": "geo880_217", "query": "What are the major cities in Kansas ?", "python": "List[City]:\n    kansas_state = geo_model.find_state(\"kansas\")\n    return [c for c in kansas_state.cities if c.is_major]"}
{"qid": "geo880_218", "query": "What are the major cities in Missouri ?", "python": "List[City]:\n    missouri_state = geo_model.find_state(\"missouri\")\n    return [c for c in missouri_state.cities if c.is_major]"}
{"qid": "geo880_219", "query": "What are the major cities in New Mexico ?", "python": "List[City]:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    return [c for c in new_mexico_state.cities if c.is_major]"}
{"qid": "geo880_220", "query": "What are the major cities in New York ?", "python": "List[City]:\n    new_york_state = geo_model.find_state('new york')\n    return [c for c in new_york_state.cities if c.is_major]"}
{"qid": "geo880_221", "query": "What are the major cities in North Carolina ?", "python": "List[City]:\n    north_carolina_state = geo_model.find_state(\"north carolina\")\n    return [c for c in north_carolina_state.cities if c.is_major]"}
{"qid": "geo880_222", "query": "What are the major cities in Ohio ?", "python": "List[City]:\n    cities_in_ohio = geo_model.find_state(\"ohio\").cities\n    return [c for c in cities_in_ohio if c.is_major]"}
{"qid": "geo880_223", "query": "What are the major cities in Oklahoma ?", "python": "List[City]:\n    oklahoma_state = geo_model.find_state('oklahoma')\n    return [c for c in oklahoma_state.cities if c.is_major]"}
{"qid": "geo880_224", "query": "What are the major cities in Rhode Island ?", "python": "List[City]:\n    rhode_island_state = geo_model.find_state('rhode island')\n    return [city for city in rhode_island_state.cities if city.is_major]"}
{"qid": "geo880_225", "query": "What are the major cities in states through which the Mississippi runs ?", "python": "List[City]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    states_through_mississippi = mississippi_river.traverses\n    major_cities = []\n    for state in states_through_mississippi:\n        major_cities.extend([c for c in state.cities if c.is_major])\n    return major_cities"}
{"qid": "geo880_226", "query": "What are the major cities in Texas ?", "python": "List[City]:\n    texas_state = geo_model.find_state('texas')\n    return [city for city in texas_state.cities if city.is_major]"}
{"qid": "geo880_227", "query": "What are the major cities in the largest state ?", "python": "List[City]:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    return [c for c in largest_state.cities if c.is_major]"}
{"qid": "geo880_228", "query": "What are the major cities in the smallest state in the US ?", "python": "List[City]:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    smallest_state = min(states_in_usa, key=lambda x: x.size)\n    return [c for c in smallest_state.cities if c.is_major]"}
{"qid": "geo880_229", "query": "What are the major cities in the state of California ?", "python": "List[City]:\n    california_state = geo_model.find_state('california')\n    return [c for c in california_state.cities if c.is_major]"}
{"qid": "geo880_230", "query": "What are the major cities in the states through which the major river in Virginia runs ?", "python": "List[City]:\n    virginia_state = geo_model.find_state(\"virginia\")\n    major_rivers_in_virginia = [r for r in virginia_state.rivers if r.is_major]\n    states_traversed_by_major_rivers = [s for r in major_rivers_in_virginia for s in r.traverses]\n    major_cities_in_states = [c for s in states_traversed_by_major_rivers for c in s.cities if c.is_major]\n    return major_cities_in_states"}
{"qid": "geo880_231", "query": "What are the major cities in the USA ?", "python": "List[City]:\n    cities = geo_model.find_country(\"usa\").cities\n    return [c for c in cities if c.is_major]"}
{"qid": "geo880_232", "query": "What are the major cities in Vermont ?", "python": "List[City]:\n    vermont_state = geo_model.find_state(\"vermont\")\n    return [c for c in vermont_state.cities if c.is_major]"}
{"qid": "geo880_233", "query": "What are the major cities in Wyoming ?", "python": "List[City]:\n    wyoming_state = geo_model.find_state('wyoming')\n    return [c for c in wyoming_state.cities if c.is_major]"}
{"qid": "geo880_234", "query": "What are the major cities of Texas ?", "python": "List[City]:\n    cities_in_texas = geo_model.find_state(\"texas\").cities\n    return [c for c in cities_in_texas if c.is_major]"}
{"qid": "geo880_235", "query": "What are the major cities of the United States ?", "python": "List[City]:\n    major_cities = [c for c in geo_model.cities if c.is_major]\n    return major_cities"}
{"qid": "geo880_236", "query": "What are the major cities of the US ?", "python": "List[City]:\n    cities_in_usa = geo_model.find_country(\"usa\").cities\n    return [c for c in cities_in_usa if c.is_major]"}
{"qid": "geo880_237", "query": "What are the major lakes in United States ?", "python": "List[Lake]:\n    usa_country = geo_model.find_country(\"usa\")\n    states_in_usa = usa_country.states\n    major_lakes_in_usa = [l for s in states_in_usa for l in s.lakes if l.is_major]\n    return major_lakes_in_usa"}
{"qid": "geo880_238", "query": "What are the major rivers in Ohio ?", "python": "List[River]:\n    ohio_state = geo_model.find_state('ohio')\n    return [r for r in ohio_state.rivers if r.is_major]"}
{"qid": "geo880_239", "query": "What are the major rivers in the US ?", "python": "List[River]:\n    return [r for r in geo_model.rivers if r.is_major]"}
{"qid": "geo880_240", "query": "What are the names of the major cities in Illinois ?", "python": "List[str]:\n    illinois_state = geo_model.find_state(\"illinois\")\n    major_cities = [c for c in illinois_state.cities if c.is_major]\n    return [c.name for c in major_cities]"}
{"qid": "geo880_241", "query": "What are the neighboring states for Michigan ?", "python": "List[State]:\n    michigan_state = geo_model.find_state(\"michigan\")\n    return michigan_state.next_to"}
{"qid": "geo880_242", "query": "What are the population densities of each US state ?", "python": "List[float]:\n    us_states = [s for s in geo_model.states if s.country.name == \"usa\"]\n    return [s.density for s in us_states]"}
{"qid": "geo880_243", "query": "What is the population of Mississippi ?", "python": "int:\n    mississippi_state = geo_model.find_state(\"mississippi\")\n    return mississippi_state.population"}
{"qid": "geo880_244", "query": "What are the populations of all the major cities in Montana ?", "python": "List[int]:\n    major_cities_in_montana = [c for c in geo_model.find_state(\"montana\").cities if c.is_major]\n    return [c.population for c in major_cities_in_montana]"}
{"qid": "geo880_245", "query": "What are the populations of states through which the Mississippi river runs ?", "python": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [s.population for s in mississippi_river.traverses]"}
{"qid": "geo880_246", "query": "What are the populations of states through which the Mississippi river runs ?", "python": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [s.population for s in mississippi_river.traverses]"}
{"qid": "geo880_247", "query": "What are the populations of states through which the Mississippi runs ?", "python": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [s.population for s in mississippi_river.traverses]"}
{"qid": "geo880_248", "query": "What are the populations of states through which the Mississippi runs ?", "python": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [s.population for s in mississippi_river.traverses]"}
{"qid": "geo880_249", "query": "What are the populations of states which border Texas ?", "python": "List[int]:\n    states_bordering_texas = geo_model.find_state(\"texas\").next_to\n    return [s.population for s in states_bordering_texas]"}
{"qid": "geo880_250", "query": "What are the populations of the major cities of Texas ?", "python": "List[int]:\n    texas_state = geo_model.find_state('texas')\n    major_cities_in_texas = [c for c in texas_state.cities if c.is_major]\n    return [c.population for c in major_cities_in_texas]", "python_oneline": "List[int]:\n    return [c.population for c in geo_model.find_state('texas').cities if c.is_major]", "python_multiline": "List[int]:\n    texas_state = geo_model.find_state('texas')\n    major_cities_in_texas = [c for c in texas_state.cities if c.is_major]\n    return [c.population for c in major_cities_in_texas]", "python_multiline_discarded": "List[int]:\n    texas_state = geo_model.find_state('texas')\n    major_cities_in_texas = [c for c in texas_state.cities if c.is_major]\n    populations = [c.population for c in major_cities_in_texas]\n    return populations", "python_oneline_discarded": "List[int]:\n    return [c.population for c in geo_model.find_state('texas').cities if c.is_major]"}
{"qid": "geo880_251", "query": "What are the populations of the states through which the Mississippi river runs ?", "python": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [s.population for s in mississippi_river.traverses]"}
{"qid": "geo880_252", "query": "What are the populations of the states through which the Mississippi river runs ?", "python": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [s.population for s in mississippi_river.traverses]"}
{"qid": "geo880_253", "query": "What are the populations of the states through which the Mississippi runs ?", "python": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [s.population for s in mississippi_river.traverses]"}
{"qid": "geo880_254", "query": "What are the populations of the states through which the Mississippi runs ?", "python": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [state.population for state in mississippi_river.traverses]", "python_oneline": "List[int]:\n    return [state.population for state in geo_model.find_river(\"mississippi\").traverses]", "python_multiline": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return [state.population for state in mississippi_river.traverses]", "python_multiline_discarded": "List[int]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    populations = []\n    for state in mississippi_river.traverses:\n        populations.append(state.population)\n    return populations", "python_oneline_discarded": "List[int]:\n    return [state.population for state in geo_model.find_river(\"mississippi\").traverses]"}
{"qid": "geo880_255", "query": "What are the rivers in Alaska ?", "python": "List[River]:\n    alaska_state = geo_model.find_state('alaska')\n    return alaska_state.rivers"}
{"qid": "geo880_256", "query": "What are the rivers in the state of Indiana ?", "python": "List[River]:\n    indiana_state = geo_model.find_state(\"indiana\")\n    return indiana_state.rivers"}
{"qid": "geo880_257", "query": "What are the rivers in the state of Texas ?", "python": "List[River]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.rivers"}
{"qid": "geo880_258", "query": "What are the rivers of Montana ?", "python": "List[River]:\n    montana_state = geo_model.find_state('montana')\n    return montana_state.rivers"}
{"qid": "geo880_259", "query": "What are the states ?", "python": "List[State]:\n    return geo_model.states"}
{"qid": "geo880_260", "query": "What are the states that border the state with the greatest population ?", "python": "List[State]:\n    state_with_greatest_population = max(geo_model.states, key=lambda x: x.population)\n    return state_with_greatest_population.next_to"}
{"qid": "geo880_261", "query": "What are the states that the Potomac runs through ?", "python": "List[State]:\n    potomac_river = geo_model.find_river(\"potomac\")\n    return potomac_river.traverses"}
{"qid": "geo880_262", "query": "What are the states through which the longest river runs ?", "python": "List[State]:\n    longest_river = max(geo_model.rivers, key=lambda x: x.length)\n    return longest_river.traverses"}
{"qid": "geo880_263", "query": "What can you tell me about the population of Missouri ?", "python": "int:\n    missouri_state = geo_model.find_state('missouri')\n    return missouri_state.population", "python_oneline": "int:\n     return geo_model.find_state('missouri').population", "python_multiline": "int:\n    missouri_state = geo_model.find_state('missouri')\n    return missouri_state.population", "python_multiline_discarded": "int:\n    missouri_state = geo_model.find_state('missouri')\n    population = missouri_state.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_state('missouri').population"}
{"qid": "geo880_264", "query": "What capital has the largest population ?", "python": "City:\n    capitals = [c for c in geo_model.cities if c.is_capital]\n    return max(capitals, key=lambda x: x.population)", "python_oneline": "City:\n     return max([c for c in geo_model.cities if c.is_capital], key=lambda x: x.population)", "python_multiline": "City:\n    capitals = [c for c in geo_model.cities if c.is_capital]\n    return max(capitals, key=lambda x: x.population)", "python_multiline_discarded": "City:\n    capitals = [c for c in geo_model.cities if c.is_capital]\n    largest_population = max(capitals, key=lambda x: x.population)\n    return largest_population", "python_oneline_discarded": "City:\n     return max([c for c in geo_model.cities if c.is_capital], key=lambda x: x.population)"}
{"qid": "geo880_265", "query": "What capital is the largest in the US ?", "python": "State:\n    capitals = [s.capital for s in geo_model.find_country(\"usa\").states if s.capital]\n    return max(capitals, key=lambda x: x.size)"}
{"qid": "geo880_266", "query": "What cities are located in Pennsylvania ?", "python": "List[City]:\n    pennsylvania_state = geo_model.find_state(\"pennsylvania\")\n    return pennsylvania_state.cities"}
{"qid": "geo880_267", "query": "What cities in California ?", "python": "List[City]:\n    california_state = geo_model.find_state('california')\n    return california_state.cities"}
{"qid": "geo880_268", "query": "What cities in Texas have the highest number of citizens ?", "python": "List[City]:\n    cities_in_texas = geo_model.find_state(\"texas\").cities\n    return max(cities_in_texas, key=lambda x: x.population)"}
{"qid": "geo880_269", "query": "What cities in Texas have the highest populations ?", "python": "List[City]:\n    texas_state = geo_model.find_state(\"texas\")\n    return max(texas_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_270", "query": "What city has the largest population ?", "python": "City:\n    return max(geo_model.cities, key=lambda x: x.population)"}
{"qid": "geo880_271", "query": "What city has the least population ?", "python": "City:\n    return min(geo_model.cities, key=lambda x: x.population)", "python_oneline": "City:\n    return min(geo_model.cities, key=lambda x: x.population)", "python_multiline": "City:\n    cities = geo_model.cities\n    least_population_city = min(cities, key=lambda x: x.population)\n    return least_population_city", "python_multiline_discarded": "City:\n    cities = geo_model.cities\n    least_population_city = min(cities, key=lambda x: x.population)\n    return least_population_city", "python_oneline_discarded": "City:\n    return min(geo_model.cities, key=lambda x: x.population)"}
{"qid": "geo880_272", "query": "What city has the most people ?", "python": "City:\n    biggest_city = max(geo_model.cities, key=lambda x: x.population)\n    return biggest_city"}
{"qid": "geo880_273", "query": "What city in the United States has the highest population density ?", "python": "City:\n    cities_in_usa = [c for s in geo_model.states for c in s.cities]\n    return max(cities_in_usa, key=lambda x: x.density)"}
{"qid": "geo880_274", "query": "What is capital of Iowa ?", "python": "Optional[City]:\n    iowa_state = geo_model.find_state('iowa')\n    return iowa_state.capital"}
{"qid": "geo880_275", "query": "What is capital of the state with the lowest point ?", "python": "City:\n    lowest_state = min(geo_model.states, key=lambda x: x.low_point.elevation)\n    return lowest_state.capital"}
{"qid": "geo880_276", "query": "What is largest capital ?", "python": "City:\n    capitals = [c for c in geo_model.cities if c.is_capital]\n    return max(capitals, key=lambda x: x.size)"}
{"qid": "geo880_277", "query": "What is the adjacent state of California ?", "python": "List[State]:\n    california_state = geo_model.find_state(\"california\")\n    return california_state.next_to", "python_oneline": "List[State]:\n    return geo_model.find_state(\"california\").next_to", "python_multiline": "List[State]:\n    california_state = geo_model.find_state(\"california\")\n    return california_state.next_to", "python_multiline_discarded": "List[State]:\n    california_state = geo_model.find_state(\"california\")\n    adjacent_state = california_state.next_to\n    return adjacent_state", "python_oneline_discarded": "List[State]:\n    return geo_model.find_state(\"california\").next_to"}
{"qid": "geo880_278", "query": "What is the area of Alaska ?", "python": "int:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return alaska_state.area"}
{"qid": "geo880_279", "query": "What is the area of all the states combined ?", "python": "int:\n    return sum(s.area for s in geo_model.states)"}
{"qid": "geo880_280", "query": "What is the area of California ?", "python": "int:\n    california_state = geo_model.find_state(\"california\")\n    return california_state.area"}
{"qid": "geo880_281", "query": "What is the area of Florida ?", "python": "int:\n    florida_state = geo_model.find_state('florida')\n    return florida_state.area"}
{"qid": "geo880_282", "query": "What is the area of Idaho ?", "python": "State:\n    idaho_state = geo_model.find_state('idaho')\n    return idaho_state.area"}
{"qid": "geo880_283", "query": "What is the area of Maine ?", "python": "int:\n    maine_state = geo_model.find_state('maine')\n    return maine_state.area"}
{"qid": "geo880_285", "query": "What is the area of New Mexico ?", "python": "int:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    return new_mexico_state.area"}
{"qid": "geo880_286", "query": "What is the area of Ohio ?", "python": "int:\n    ohio_state = geo_model.find_state(\"ohio\")\n    return ohio_state.area"}
{"qid": "geo880_288", "query": "What is the area of South Carolina ?", "python": "int:\n    south_carolina_state = geo_model.find_state('south carolina')\n    return south_carolina_state.area"}
{"qid": "geo880_289", "query": "What is the area of Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.area"}
{"qid": "geo880_290", "query": "What is the area of the largest state ?", "python": "int:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    return largest_state.area"}
{"qid": "geo880_291", "query": "What is the area of the smallest state ?", "python": "int:\n    return min(geo_model.states, key=lambda x: x.size).area"}
{"qid": "geo880_292", "query": "What is the area of the state with the capital Albany ?", "python": "int:\n    state = [s for s in geo_model.states if s.capital and s.capital.name == \"albany\"][0]\n    return state.area"}
{"qid": "geo880_293", "query": "What is the area of the state with the smallest population density ?", "python": "int:\n    states = geo_model.states\n    return min(states, key=lambda x: x.density).area"}
{"qid": "geo880_294", "query": "What is the area of the states ?", "python": "List[int]:\n    return [s.area for s in geo_model.states]"}
{"qid": "geo880_295", "query": "What is the area of the Texas state ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.area", "python_oneline": "int:\n     return geo_model.find_state('texas').area", "python_multiline": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.area", "python_multiline_discarded": "int:\n    texas_state = geo_model.find_state('texas')\n    area = texas_state.area\n    return area", "python_oneline_discarded": "int:\n     return geo_model.find_state('texas').area"}
{"qid": "geo880_296", "query": "What is the area of Wisconsin ?", "python": "int:\n    wisconsin_state = geo_model.find_state('wisconsin')\n    return wisconsin_state.area"}
{"qid": "geo880_298", "query": "What is the average population per square km in Pennsylvania ?", "python": "float:\n    pennsylvania_state = geo_model.find_state(\"pennsylvania\")\n    return pennsylvania_state.density"}
{"qid": "geo880_299", "query": "What is the average population per square km in the US ?", "python": "List[Union[State, Country]]:\n    return geo_model.find_country(\"usa\").density"}
{"qid": "geo880_300", "query": "What is the biggest American city in a state with a river ?", "python": "City:\n    states_with_rivers = [s for s in geo_model.states if s.rivers]\n    cities_in_states_with_rivers = [c for s in states_with_rivers for c in s.cities]\n    return max(cities_in_states_with_rivers, key=lambda x: x.size)", "python_oneline": "City:\n    return max([c for s in geo_model.states if s.rivers for c in s.cities], key=lambda x: x.size)", "python_multiline": "City:\n    states_with_rivers = [s for s in geo_model.states if s.rivers]\n    cities_in_states_with_rivers = [c for s in states_with_rivers for c in s.cities]\n    return max(cities_in_states_with_rivers, key=lambda x: x.size)", "python_multiline_discarded": "City:\n    states_with_rivers = [s for s in geo_model.states if s.rivers]\n    cities_in_states_with_rivers = []\n    for s in states_with_rivers:\n        for c in s.cities:\n            cities_in_states_with_rivers.append(c)\n    return max(cities_in_states_with_rivers, key=lambda x: x.size)", "python_oneline_discarded": "City:\n    return max([c for s in geo_model.states if s.rivers for c in s.cities], key=lambda x: x.size)"}
{"qid": "geo880_301", "query": "What is the biggest capital city in the US ?", "python": "City:\n    capitals_in_usa = [c for s in geo_model.states if s.capital for c in s.cities if c.is_capital]\n    return max(capitals_in_usa, key=lambda x: x.size)"}
{"qid": "geo880_302", "query": "What is the biggest city in Arizona ?", "python": "City:\n    arizona_state = geo_model.find_state('arizona')\n    return max(arizona_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_303", "query": "What is the biggest city in Georgia ?", "python": "City:\n    cities_in_georgia = geo_model.find_state(\"georgia\").cities\n    return max(cities_in_georgia, key=lambda x: x.size)"}
{"qid": "geo880_304", "query": "What is the biggest city in Kansas ?", "python": "City:\n    kansas_state = geo_model.find_state('kansas')\n    return max(kansas_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_305", "query": "What is the biggest city in Louisiana ?", "python": "City:\n    louisiana_state = geo_model.find_state('louisiana')\n    return max(louisiana_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_306", "query": "What is the biggest city in Nebraska ?", "python": "City:\n    nebraska_state = geo_model.find_state('nebraska')\n    return max(nebraska_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_307", "query": "What is the biggest city in Oregon ?", "python": "City:\n    cities_in_oregon = geo_model.find_state(\"oregon\").cities\n    return max(cities_in_oregon, key=lambda x: x.size)", "python_oneline": "City:\n    return max(geo_model.find_state(\"oregon\").cities, key=lambda x: x.size)", "python_multiline": "City:\n    cities_in_oregon = geo_model.find_state(\"oregon\").cities\n    return max(cities_in_oregon, key=lambda x: x.size)", "python_multiline_discarded": "City:\n    cities_in_oregon = geo_model.find_state(\"oregon\").cities\n    biggest_city = max(cities_in_oregon, key=lambda x: x.size)\n    return biggest_city", "python_oneline_discarded": "City:\n    return max(geo_model.find_state(\"oregon\").cities, key=lambda x: x.size)"}
{"qid": "geo880_308", "query": "What is the biggest city in Texas ?", "python": "City:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.cities, key=lambda x: x.size)", "python_oneline": "City:\n    return max(geo_model.find_state('texas').cities, key=lambda x: x.size)", "python_multiline": "City:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.cities, key=lambda x: x.size)", "python_multiline_discarded": "City:\n    texas_state = geo_model.find_state('texas')\n    biggest_city = max(texas_state.cities, key=lambda x: x.size)\n    return biggest_city", "python_oneline_discarded": "City:\n    return max(geo_model.find_state('texas').cities, key=lambda x: x.size)"}
{"qid": "geo880_309", "query": "What is the biggest city in the smallest state ?", "python": "City:\n    smallest_state = min(geo_model.states, key=lambda x: x.size)\n    return max(smallest_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_310", "query": "What is the biggest city in the US ?", "python": "City:\n    cities = geo_model.find_country(\"usa\").cities\n    return max(cities, key=lambda x: x.size)"}
{"qid": "geo880_311", "query": "What is the biggest city in the USA ?", "python": "City:\n    cities_in_usa = [c for s in geo_model.find_country(\"usa\").states for c in s.cities]\n    return max(cities_in_usa, key=lambda x: x.size)"}
{"qid": "geo880_312", "query": "What is the biggest city in USA ?", "python": "City:\n    cities = geo_model.find_country(\"usa\").cities\n    return max(cities, key=lambda x: x.size)"}
{"qid": "geo880_313", "query": "What is the biggest city in Wyoming ?", "python": "City:\n    cities_in_wyoming = geo_model.find_state(\"wyoming\").cities\n    return max(cities_in_wyoming, key=lambda x: x.size)", "python_oneline": "City:\n    return max(geo_model.find_state(\"wyoming\").cities, key=lambda x: x.size)", "python_multiline": "City:\n    cities_in_wyoming = geo_model.find_state(\"wyoming\").cities\n    return max(cities_in_wyoming, key=lambda x: x.size)", "python_multiline_discarded": "City:\n    cities_in_wyoming = geo_model.find_state(\"wyoming\").cities\n    biggest_city = max(cities_in_wyoming, key=lambda x: x.size)\n    return biggest_city", "python_oneline_discarded": "City:\n    return max(geo_model.find_state(\"wyoming\").cities, key=lambda x: x.size)"}
{"qid": "geo880_314", "query": "What is the biggest river in Illinois ?", "python": "River:\n    rivers_in_illinois = geo_model.find_state(\"illinois\").rivers\n    return max(rivers_in_illinois, key=lambda x: x.length)"}
{"qid": "geo880_315", "query": "What is the biggest state ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.area)"}
{"qid": "geo880_317", "query": "What is the biggest state in the USA ?", "python": "State:\n    biggest_state = max(geo_model.states, key=lambda x: x.size)\n    return biggest_state"}
{"qid": "geo880_319", "query": "What is the capital of California ?", "python": "City:\n    california_state = geo_model.find_state(\"california\")\n    return california_state.capital"}
{"qid": "geo880_320", "query": "What is the capital of Colorado ?", "python": "City:\n    colorado_state = geo_model.find_state('colorado')\n    return colorado_state.capital"}
{"qid": "geo880_321", "query": "What is the capital of Georgia ?", "python": "City:\n    return geo_model.find_state(\"georgia\").capital"}
{"qid": "geo880_322", "query": "What is the capital of Hawaii ?", "python": "Optional[City]:\n    hawaii_state = geo_model.find_state('hawaii')\n    return hawaii_state.capital"}
{"qid": "geo880_323", "query": "What is the capital of Illinois ?", "python": "City:\n    return geo_model.find_state(\"illinois\").capital"}
{"qid": "geo880_324", "query": "What is the capital of Indiana ?", "python": "City:\n    indiana_state = geo_model.find_state(\"indiana\")\n    return indiana_state.capital"}
{"qid": "geo880_325", "query": "What is the capital of Iowa ?", "python": "City:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return iowa_state.capital"}
{"qid": "geo880_326", "query": "What is the capital of Maine ?", "python": "Optional[City]:\n    maine_state = geo_model.find_state(\"maine\")\n    return maine_state.capital"}
{"qid": "geo880_327", "query": "What is the capital of Maryland ?", "python": "City:\n    maryland_state = geo_model.find_state(\"maryland\")\n    return maryland_state.capital"}
{"qid": "geo880_328", "query": "What is the capital of Massachusetts ?", "python": "City:\n    massachusetts_state = geo_model.find_state(\"massachusetts\")\n    return massachusetts_state.capital"}
{"qid": "geo880_329", "query": "What is the capital of Michigan ?", "python": "City:\n    michigan_state = geo_model.find_state(\"michigan\")\n    return michigan_state.capital", "python_oneline": "City:\n     return geo_model.find_state(\"michigan\").capital", "python_multiline": "City:\n    michigan_state = geo_model.find_state(\"michigan\")\n    return michigan_state.capital", "python_multiline_discarded": "City:\n    michigan_state = geo_model.find_state(\"michigan\")\n    capital = michigan_state.capital\n    return capital", "python_oneline_discarded": "City:\n     return geo_model.find_state(\"michigan\").capital"}
{"qid": "geo880_330", "query": "What is the capital of New Hampshire ?", "python": "City:\n    return geo_model.find_state(\"new hampshire\").capital"}
{"qid": "geo880_331", "query": "What is the capital of New Jersey ?", "python": "City:\n    new_jersey_state = geo_model.find_state(\"new jersey\")\n    return new_jersey_state.capital"}
{"qid": "geo880_332", "query": "What is the capital of New York ?", "python": "City:\n    new_york_state = geo_model.find_state(\"new york\")\n    return new_york_state.capital"}
{"qid": "geo880_333", "query": "What is the capital of North Dakota ?", "python": "City:\n    north_dakota_state = geo_model.find_state(\"north dakota\")\n    return north_dakota_state.capital"}
{"qid": "geo880_334", "query": "What is the capital of Ohio ?", "python": "City:\n    return geo_model.find_state(\"ohio\").capital"}
{"qid": "geo880_335", "query": "What is the capital of Pennsylvania ?", "python": "City:\n    pennsylvania_state = geo_model.find_state(\"pennsylvania\")\n    return pennsylvania_state.capital", "python_oneline": "City:\n     return geo_model.find_state(\"pennsylvania\").capital", "python_multiline": "City:\n    pennsylvania_state = geo_model.find_state(\"pennsylvania\")\n    return pennsylvania_state.capital", "python_multiline_discarded": "City:\n    pennsylvania_state = geo_model.find_state(\"pennsylvania\")\n    capital = pennsylvania_state.capital\n    return capital", "python_oneline_discarded": "City:\n     return geo_model.find_state(\"pennsylvania\").capital"}
{"qid": "geo880_336", "query": "What is the capital of states that have cities named Durham ?", "python": "List[City]:\n    durham_cities = [c for c in geo_model.cities if c.name == \"durham\"]\n    return [c.state.capital for c in durham_cities]"}
{"qid": "geo880_337", "query": "What is the capital of Texas ?", "python": "City:\n    return geo_model.find_state(\"texas\").capital"}
{"qid": "geo880_338", "query": "What is the capital of the Alabama state ?", "python": "Optional[City]:\n    alabama_state = geo_model.find_state('alabama')\n    return alabama_state.capital"}
{"qid": "geo880_339", "query": "What is the capital of the Florida state ?", "python": "Optional[City]:\n    florida_state = geo_model.find_state('florida')\n    return florida_state.capital"}
{"qid": "geo880_340", "query": "What is the capital of the largest state ?", "python": "City:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    return largest_state.capital"}
{"qid": "geo880_341", "query": "What is the capital of the smallest state ?", "python": "City:\n    smallest_state = min(geo_model.states, key=lambda x: x.size)\n    return smallest_state.capital"}
{"qid": "geo880_342", "query": "What is the capital of the state Texas ?", "python": "Optional[City]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.capital"}
{"qid": "geo880_343", "query": "What is the capital of the state that borders the most states ?", "python": "Optional[City]:\n    state_with_most_neighbors = max(geo_model.states, key=lambda x: len(x.next_to))\n    return state_with_most_neighbors.capital"}
{"qid": "geo880_345", "query": "What is the capital of the state with the highest elevation ?", "python": "Optional[City]:\n    state_with_highest_elevation = max(geo_model.states, key=lambda x: x.high_point.elevation)\n    return state_with_highest_elevation.capital"}
{"qid": "geo880_346", "query": "What is the capital of the state with the highest point ?", "python": "City:\n    highest_state = max(geo_model.states, key=lambda x: x.high_point.elevation)\n    return highest_state.capital"}
{"qid": "geo880_347", "query": "What is the capital of the state with the largest population ?", "python": "City:\n    state_with_largest_population = max(geo_model.states, key=lambda x: x.population)\n    return state_with_largest_population.capital"}
{"qid": "geo880_348", "query": "What is the capital of the state with the largest population density ?", "python": "City:\n    states = geo_model.states\n    state_with_largest_density = max(states, key=lambda x: x.density)\n    return state_with_largest_density.capital"}
{"qid": "geo880_350", "query": "What is the capital of the state with the most inhabitants ?", "python": "City:\n    state_with_most_inhabitants = max(geo_model.states, key=lambda x: x.population)\n    return state_with_most_inhabitants.capital"}
{"qid": "geo880_351", "query": "What is the capital of Utah ?", "python": "Optional[City]:\n    utah_state = geo_model.find_state('utah')\n    return utah_state.capital"}
{"qid": "geo880_352", "query": "What is the capital of Vermont ?", "python": "City:\n    vermont_state = geo_model.find_state(\"vermont\")\n    return vermont_state.capital"}
{"qid": "geo880_353", "query": "What is the capital of Washington ?", "python": "City:\n    washington_state = geo_model.find_state(\"washington\")\n    return washington_state.capital"}
{"qid": "geo880_354", "query": "What is the city in Texas with the largest population ?", "python": "City:\n    cities_in_texas = geo_model.find_state(\"texas\").cities\n    return max(cities_in_texas, key=lambda x: x.population)"}
{"qid": "geo880_355", "query": "What is the city with the smallest population ?", "python": "City:\n    return min(geo_model.cities, key=lambda x: x.population)"}
{"qid": "geo880_356", "query": "What is the combined area of all 50 states ?", "python": "int:\n    return sum(s.area for s in geo_model.states)"}
{"qid": "geo880_357", "query": "What is the combined population of all 50 states ?", "python": "int:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return sum(s.population for s in states_in_usa)"}
{"qid": "geo880_358", "query": "What is the density of Texas ?", "python": "float:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.density"}
{"qid": "geo880_359", "query": "What is the density of the New York ?", "python": "float:\n    new_york_state = geo_model.find_state('new york')\n    return new_york_state.density"}
{"qid": "geo880_360", "query": "What is the elevation of Death Valley ?", "python": "int:\n    death_valley = geo_model.find_place(\"death valley\")\n    return death_valley.elevation"}
{"qid": "geo880_361", "query": "What is the elevation of the highest point in the USA ?", "python": "int:\n    highest_state = max(geo_model.states, key=lambda x: x.high_point.elevation)\n    return highest_state.high_point.elevation"}
{"qid": "geo880_362", "query": "What is the height of Mount McKinley ?", "python": "int:\n    mount_mckinley = geo_model.find_mountain('mckinley')\n    return mount_mckinley.elevation"}
{"qid": "geo880_364", "query": "What is the height of the highest point in the USA ?", "python": "int:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return max(states_in_usa, key=lambda x: x.high_point.elevation).high_point.elevation"}
{"qid": "geo880_365", "query": "What is the high point of Wyoming ?", "python": "Place:\n    wyoming_state = geo_model.find_state(\"wyoming\")\n    return wyoming_state.high_point"}
{"qid": "geo880_366", "query": "What is the highest elevation in New Mexico ?", "python": "Place:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    return max(new_mexico_state.places, key=lambda x: x.elevation)"}
{"qid": "geo880_367", "query": "What is the highest elevation in South Carolina ?", "python": "Place:\n    south_carolina_state = geo_model.find_state(\"south carolina\")\n    return max(south_carolina_state.places, key=lambda x: x.elevation)", "python_oneline": "Place:\n    return max(geo_model.find_state(\"south carolina\").places, key=lambda x: x.elevation)", "python_multiline": "Place:\n    south_carolina_state = geo_model.find_state(\"south carolina\")\n    return max(south_carolina_state.places, key=lambda x: x.elevation)", "python_multiline_discarded": "Place:\n    south_carolina_state = geo_model.find_state(\"south carolina\")\n    highest_elevation = max(south_carolina_state.places, key=lambda x: x.elevation)\n    return highest_elevation", "python_oneline_discarded": "Place:\n    return max(geo_model.find_state(\"south carolina\").places, key=lambda x: x.elevation)"}
{"qid": "geo880_368", "query": "What is the highest elevation in Texas ?", "python": "Place:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.places, key=lambda x: x.elevation)"}
{"qid": "geo880_369", "query": "What is the highest elevation in the United States ?", "python": "Place:\n    places = geo_model.find_country(\"usa\").places\n    return max(places, key=lambda x: x.elevation)"}
{"qid": "geo880_373", "query": "What is the highest mountain in US ?", "python": "Mountain:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return max(states_in_usa, key=lambda x: x.high_point.elevation).high_point"}
{"qid": "geo880_374", "query": "What is the highest point in Colorado ?", "python": "Place:\n    colorado_state = geo_model.find_state(\"colorado\")\n    return colorado_state.high_point"}
{"qid": "geo880_375", "query": "What is the highest point in Delaware ?", "python": "Place:\n    delaware_state = geo_model.find_state(\"delaware\")\n    return delaware_state.high_point"}
{"qid": "geo880_377", "query": "What is the highest point in Florida ?", "python": "Place:\n    florida_state = geo_model.find_state('florida')\n    return florida_state.high_point"}
{"qid": "geo880_378", "query": "What is the highest point in Iowa ?", "python": "Place:\n    iowa_state = geo_model.find_state('iowa')\n    return iowa_state.high_point"}
{"qid": "geo880_379", "query": "What is the highest point in Kansas ?", "python": "Place:\n    kansas_state = geo_model.find_state('kansas')\n    return kansas_state.high_point"}
{"qid": "geo880_380", "query": "What is the highest point in Maine ?", "python": "Place:\n    maine_state = geo_model.find_state(\"maine\")\n    return max(maine_state.places, key=lambda x: x.elevation)"}
{"qid": "geo880_381", "query": "What is the highest point in Montana ?", "python": "Place:\n    montana_state = geo_model.find_state('montana')\n    return montana_state.high_point"}
{"qid": "geo880_383", "query": "What is the highest point in New Mexico ?", "python": "Place:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    return new_mexico_state.high_point"}
{"qid": "geo880_384", "query": "What is the highest point in Ohio ?", "python": "Place:\n    ohio_state = geo_model.find_state('ohio')\n    return max(ohio_state.places, key=lambda x: x.elevation)", "python_oneline": "Place:\n     return max(geo_model.find_state('ohio').places, key=lambda x: x.elevation)", "python_multiline": "Place:\n    ohio_state = geo_model.find_state('ohio')\n    return max(ohio_state.places, key=lambda x: x.elevation)", "python_multiline_discarded": "Place:\n    ohio_state = geo_model.find_state('ohio')\n    highest_point = max(ohio_state.places, key=lambda x: x.elevation)\n    return highest_point", "python_oneline_discarded": "Place:\n     return max(geo_model.find_state('ohio').places, key=lambda x: x.elevation)"}
{"qid": "geo880_385", "query": "What is the highest point in Rhode Island ?", "python": "Place:\n    rhode_island_state = geo_model.find_state('rhode island')\n    return rhode_island_state.high_point", "python_oneline": "Place:\n     return geo_model.find_state('rhode island').high_point", "python_multiline": "Place:\n    rhode_island_state = geo_model.find_state('rhode island')\n    return rhode_island_state.high_point", "python_multiline_discarded": "Place:\n    rhode_island_state = geo_model.find_state('rhode island')\n    highest_point = rhode_island_state.high_point\n    return highest_point", "python_oneline_discarded": "Place:\n     return geo_model.find_state('rhode island').high_point"}
{"qid": "geo880_386", "query": "What is the highest point in states bordering Georgia ?", "python": "Place:\n    georgia_state = geo_model.find_state(\"georgia\")\n    return max([s.high_point for s in georgia_state.next_to], key=lambda x: x.elevation)"}
{"qid": "geo880_387", "query": "What is the highest point in Texas ?", "python": "Place:\n    texas_state = geo_model.find_state(\"texas\")\n    return texas_state.high_point"}
{"qid": "geo880_388", "query": "What is the highest point in the country ?", "python": "Place:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point", "python_oneline": "Place:\n    return max(geo_model.places, key=lambda x: x.elevation)", "python_multiline": "Place:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point", "python_multiline_discarded": "Place:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point", "python_oneline_discarded": "Place:\n    return max(geo_model.places, key=lambda x: x.elevation)"}
{"qid": "geo880_389", "query": "What is the highest point in the smallest state ?", "python": "Place:\n    smallest_state = min(geo_model.states, key=lambda x: x.size)\n    return smallest_state.high_point"}
{"qid": "geo880_390", "query": "What is the highest point in the state with capital Austin ?", "python": "Place:\n    austin_state = [s for s in geo_model.states if s.capital and s.capital.name == \"Austin\"]\n    return austin_state[0].high_point"}
{"qid": "geo880_391", "query": "What is the highest point in the state with capital Des Moines ?", "python": "Place:\n    des_moines_city = geo_model.find_city(\"des moines\")\n    des_moines_state = des_moines_city.state\n    return des_moines_state.high_point"}
{"qid": "geo880_392", "query": "What is the highest point in the state with the capital Des Moines ?", "python": "Place:\n    state = [s for s in geo_model.states if s.capital and s.capital.name == \"des moines\"][0]\n    return state.high_point"}
{"qid": "geo880_393", "query": "What is the highest point in the state with the most rivers ?", "python": "Place:\n    state_with_most_rivers = max(geo_model.states, key=lambda x: len(x.rivers))\n    return state_with_most_rivers.high_point"}
{"qid": "geo880_394", "query": "What is the highest point in the state with the smallest population ?", "python": "State:\n    smallest_state = min(geo_model.states, key=lambda x: x.population)\n    return smallest_state.high_point"}
{"qid": "geo880_395", "query": "What is the highest point in the states bordering Colorado ?", "python": "Place:\n    colorado_state = geo_model.find_state(\"colorado\")\n    states_bordering_colorado = colorado_state.next_to\n    return max(states_bordering_colorado, key=lambda x: x.high_point.elevation).high_point"}
{"qid": "geo880_396", "query": "What is the highest point in the United States ?", "python": "Place:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point"}
{"qid": "geo880_397", "query": "What is the highest point in the US ?", "python": "Place:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point"}
{"qid": "geo880_398", "query": "What is the highest point in the USA ?", "python": "Place:\n    return max(geo_model.states, key=lambda x: x.high_point.elevation).high_point"}
{"qid": "geo880_399", "query": "What is the highest point in Virginia ?", "python": "Place:\n    virginia_state = geo_model.find_state('virginia')\n    return virginia_state.high_point"}
{"qid": "geo880_400", "query": "What is the highest point in Wyoming ?", "python": "Place:\n    wyoming_state = geo_model.find_state(\"wyoming\")\n    return wyoming_state.high_point"}
{"qid": "geo880_401", "query": "What is the highest point of the state with the largest area ?", "python": "Place:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    return largest_state.high_point"}
{"qid": "geo880_402", "query": "What is the highest point of the state with the smallest population density ?", "python": "Place:\n    state_with_lowest_density = min(geo_model.states, key=lambda x: x.density)\n    return max(state_with_lowest_density.places, key=lambda x: x.elevation)"}
{"qid": "geo880_403", "query": "What is the highest point of the USA ?", "python": "Place:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point"}
{"qid": "geo880_404", "query": "What is the largest capital ?", "python": "City:\n    capitals = [c for s in geo_model.states for c in s.cities if c.is_capital]\n    return max(capitals, key=lambda x: x.size)"}
{"qid": "geo880_405", "query": "What is the largest capital city in the USA ?", "python": "City:\n    capitals_in_usa = [c for s in geo_model.states if s.capital for c in s.cities if c.is_capital]\n    return max(capitals_in_usa, key=lambda x: x.size)"}
{"qid": "geo880_406", "query": "What is the largest city in a state that borders Texas ?", "python": "City:\n    states_bordering_texas = geo_model.find_state(\"texas\").next_to\n    cities_in_bordering_states = [c for s in states_bordering_texas for c in s.cities]\n    return max(cities_in_bordering_states, key=lambda x: x.population)"}
{"qid": "geo880_407", "query": "What is the largest city in Alabama ?", "python": "City:\n    alabama_state = geo_model.find_state('alabama')\n    return max(alabama_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_408", "query": "What is the largest city in California ?", "python": "City:\n    cities_in_california = geo_model.find_state(\"california\").cities\n    return max(cities_in_california, key=lambda x: x.size)"}
{"qid": "geo880_409", "query": "What is the largest city in Michigan ?", "python": "City:\n    cities_in_michigan = geo_model.find_state(\"michigan\").cities\n    return max(cities_in_michigan, key=lambda x: x.size)"}
{"qid": "geo880_410", "query": "What is the largest city in Minnesota by population ?", "python": "City:\n    minnesota_state = geo_model.find_state(\"minnesota\")\n    return max(minnesota_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_411", "query": "What is the largest city in Missouri ?", "python": "City:\n    missouri_state = geo_model.find_state('missouri')\n    return max(missouri_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_412", "query": "What is the largest city in Rhode Island ?", "python": "City:\n    rhode_island_state = geo_model.find_state(\"rhode island\")\n    return max(rhode_island_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_413", "query": "What is the largest city in smallest state through which the Mississippi runs ?", "python": "City:\n    states_traversed_by_mississippi = [\n        state for state in geo_model.states\n        if geo_model.find_river(\"mississippi\") in state.rivers\n    ]\n    smallest_state = min(states_traversed_by_mississippi, key=lambda x: x.area)\n    return max(smallest_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_414", "query": "What is the largest city in states that border California ?", "python": "State:\n    states_bordering_california = geo_model.find_state(\"california\").next_to\n    cities_bordering = [c for s in states_bordering_california for c in s.cities]\n    return max(cities_bordering, key=lambda x: x.size)"}
{"qid": "geo880_415", "query": "What is the largest city in Texas ?", "python": "City:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_416", "query": "What is the largest city in the smallest state in the USA ?", "python": "City:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    smallest_state = min(states_in_usa, key=lambda x: x.size)\n    return max(smallest_state.cities, key=lambda x: x.size)", "python_oneline": "City:\n    return max(min(geo_model.find_country(\"usa\").states, key=lambda x: x.size).cities, key=lambda x: x.size)", "python_multiline": "City:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    smallest_state = min(states_in_usa, key=lambda x: x.size)\n    return max(smallest_state.cities, key=lambda x: x.size)", "python_multiline_discarded": "City:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    smallest_state = min(states_in_usa, key=lambda x: x.size)\n    largest_city = max(smallest_state.cities, key=lambda x: x.size)\n    return largest_city", "python_oneline_discarded": "City:\n    return max(min(geo_model.find_country(\"usa\").states, key=lambda x: x.size).cities, key=lambda x: x.size)"}
{"qid": "geo880_417", "query": "What is the largest city in Wisconsin ?", "python": "City:\n    wisconsin_state = geo_model.find_state(\"wisconsin\")\n    return max(wisconsin_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_418", "query": "What is the largest city of Kansas ?", "python": "City:\n    kansas_state = geo_model.find_state('kansas')\n    return max(kansas_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_419", "query": "What is the largest of the states that the Rio Grande runs through ?", "python": "State:\n    rio_grande_river = geo_model.find_river(\"rio grande\")\n    states_traversed = rio_grande_river.traverses\n    return max(states_traversed, key=lambda x: x.size)"}
{"qid": "geo880_420", "query": "What is the largest river in Washington state ?", "python": "River:\n    rivers_in_washington = geo_model.find_state('washington').rivers\n    return max(rivers_in_washington, key=lambda x: x.length)"}
{"qid": "geo880_421", "query": "What is the largest state ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.size)"}
{"qid": "geo880_422", "query": "What is the largest state bordering Arkansas ?", "python": "State:\n    arkansas_state = geo_model.find_state('arkansas')\n    return max(arkansas_state.next_to, key=lambda x: x.area)"}
{"qid": "geo880_423", "query": "What is the largest state bordering Texas ?", "python": "State:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.next_to, key=lambda x: x.area)", "python_oneline": "State:\n    return max(geo_model.find_state('texas').next_to, key=lambda x: x.area)", "python_multiline": "State:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.next_to, key=lambda x: x.area)", "python_multiline_discarded": "State:\n    texas_state = geo_model.find_state('texas')\n    largest_state = max(texas_state.next_to, key=lambda x: x.area)\n    return largest_state", "python_oneline_discarded": "State:\n    return max(geo_model.find_state('texas').next_to, key=lambda x: x.area)"}
{"qid": "geo880_424", "query": "What is the largest state capital in population ?", "python": "City:\n    capitals = [s.capital for s in geo_model.states if s.capital]\n    return max(capitals, key=lambda x: x.population)", "python_oneline": "City:\n     return max([s.capital for s in geo_model.states if s.capital], key=lambda x: x.population)", "python_multiline": "City:\n    capitals = [s.capital for s in geo_model.states if s.capital]\n    return max(capitals, key=lambda x: x.population)", "python_multiline_discarded": "City:\n    capitals = [s.capital for s in geo_model.states if s.capital]\n    largest_capital = max(capitals, key=lambda x: x.population)\n    return largest_capital", "python_oneline_discarded": "City:\n     return max([s.capital for s in geo_model.states if s.capital], key=lambda x: x.population)"}
{"qid": "geo880_425", "query": "What is the largest state in the US ?", "python": "State:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return max(states_in_usa, key=lambda x: x.size)"}
{"qid": "geo880_426", "query": "What is the largest state in USA ?", "python": "State:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return max(states_in_usa, key=lambda x: x.size)"}
{"qid": "geo880_427", "query": "What is the largest state that borders California ?", "python": "State:\n    california_state = geo_model.find_state('california')\n    states_bordering_california = california_state.next_to\n    return max(states_bordering_california, key=lambda x: x.size)", "python_oneline": "State:\n    return max(geo_model.find_state('california').next_to, key=lambda x: x.size)", "python_multiline": "State:\n    california_state = geo_model.find_state('california')\n    states_bordering_california = california_state.next_to\n    return max(states_bordering_california, key=lambda x: x.size)", "python_multiline_discarded": "State:\n    california_state = geo_model.find_state('california')\n    states_bordering_california = california_state.next_to\n    largest_state = max(states_bordering_california, key=lambda x: x.size)\n    return largest_state", "python_oneline_discarded": "State:\n    return max(geo_model.find_state('california').next_to, key=lambda x: x.size)"}
{"qid": "geo880_428", "query": "What is the largest state that borders Texas ?", "python": "State:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.next_to, key=lambda x: x.area)"}
{"qid": "geo880_429", "query": "What is the largest state that borders the state with the highest population ?", "python": "State:\n    state_with_highest_population = max(geo_model.states, key=lambda x: x.population)\n    states_that_border_highest_population = state_with_highest_population.next_to\n    return max(states_that_border_highest_population, key=lambda x: x.area)"}
{"qid": "geo880_430", "query": "What is the largest state that borders the state with the lowest point in the USA ?", "python": "State:\n    state_with_lowest_point = min(geo_model.states, key=lambda x: x.low_point.elevation)\n    return max(state_with_lowest_point.next_to, key=lambda x: x.population)"}
{"qid": "geo880_431", "query": "What is the largest state traversed by the Mississippi river ?", "python": "State:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    states_traversed_by_mississippi = mississippi_river.traverses\n    return max(states_traversed_by_mississippi, key=lambda x: x.size)"}
{"qid": "geo880_432", "query": "What is the least populous state ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_433", "query": "What is the length of the Colorado river ?", "python": "int:\n    colorado_river = geo_model.find_river(\"colorado\")\n    return colorado_river.length"}
{"qid": "geo880_434", "query": "What is the length of the Colorado river in Texas ?", "python": "int:\n    colorado_river = geo_model.find_river(\"colorado\")\n    texas_state = geo_model.find_state('texas')\n    return [r.length for r in colorado_river.traverses if r == texas_state][0]"}
{"qid": "geo880_435", "query": "What is the length of the longest river in the USA ?", "python": "int:\n    rivers_in_usa = [r for r in geo_model.rivers if any(s in geo_model.find_country(\"usa\").states for s in r.traverses)]\n    return max(rivers_in_usa, key=lambda x: x.length).length"}
{"qid": "geo880_436", "query": "What is the length of the longest river that runs through Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    longest_river_in_texas = max(texas_state.rivers, key=lambda x: x.length)\n    return longest_river_in_texas.length"}
{"qid": "geo880_437", "query": "What is the length of the Mississippi river ?", "python": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.length"}
{"qid": "geo880_438", "query": "What is the length of the river that flows through the most states ?", "python": "int:\n    river_with_most_states = max(geo_model.rivers, key=lambda x: len(x.traverses))\n    return river_with_most_states.length"}
{"qid": "geo880_439", "query": "What is the length of the river that runs through the most number of states ?", "python": "int:\n    longest_river = max(geo_model.rivers, key=lambda x: len(x.traverses))\n    return longest_river.length", "python_oneline": "int:\n     return max(geo_model.rivers, key=lambda x: len(x.traverses)).length", "python_multiline": "int:\n    longest_river = max(geo_model.rivers, key=lambda x: len(x.traverses))\n    return longest_river.length", "python_multiline_discarded": "int:\n    longest_river = max(geo_model.rivers, key=lambda x: len(x.traverses))\n    return longest_river.length", "python_oneline_discarded": "int:\n     return max(geo_model.rivers, key=lambda x: len(x.traverses)).length"}
{"qid": "geo880_440", "query": "What is the length of the river that runs through the most states ?", "python": "int:\n    rivers = geo_model.rivers\n    longest_river = max(rivers, key=lambda x: len(x.traverses))\n    return longest_river.length"}
{"qid": "geo880_441", "query": "What is the length of the river that traverses the most states ?", "python": "int:\n    longest_river = max(geo_model.rivers, key=lambda x: len(x.traverses))\n    return longest_river.length"}
{"qid": "geo880_442", "query": "What is the longest river ?", "python": "River:\n    return max(geo_model.rivers, key=lambda x: x.length)"}
{"qid": "geo880_443", "query": "What is the longest river flowing through New York ?", "python": "River:\n    new_york_state = geo_model.find_state('new york')\n    rivers_in_new_york = new_york_state.rivers\n    return max(rivers_in_new_york, key=lambda x: x.length)"}
{"qid": "geo880_444", "query": "What is the longest river in America ?", "python": "River:\n    rivers_in_america = geo_model.find_country(\"usa\").rivers\n    return max(rivers_in_america, key=lambda x: x.length)"}
{"qid": "geo880_445", "query": "What is the longest river in California ?", "python": "River:\n    california_state = geo_model.find_state(\"california\")\n    return max(california_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_446", "query": "What is the longest river in Florida ?", "python": "River:\n    rivers_in_florida = geo_model.find_state(\"florida\").rivers\n    return max(rivers_in_florida, key=lambda x: x.length)"}
{"qid": "geo880_447", "query": "What is the longest river in Mississippi ?", "python": "River:\n    mississippi_state = geo_model.find_state(\"mississippi\")\n    return max(mississippi_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_448", "query": "What is the longest river in New York ?", "python": "River:\n    new_york_state = geo_model.find_state('new york')\n    return max(new_york_state.rivers, key=lambda x: x.length)", "python_oneline": "River:\n    return max(geo_model.find_state('new york').rivers, key=lambda x: x.length)", "python_multiline": "River:\n    new_york_state = geo_model.find_state('new york')\n    return max(new_york_state.rivers, key=lambda x: x.length)", "python_multiline_discarded": "River:\n    new_york_state = geo_model.find_state('new york')\n    longest_river = max(new_york_state.rivers, key=lambda x: x.length)\n    return longest_river", "python_oneline_discarded": "River:\n    return max(geo_model.find_state('new york').rivers, key=lambda x: x.length)"}
{"qid": "geo880_449", "query": "What is the longest river in Pennsylvania ?", "python": "River:\n    pennsylvania_state = geo_model.find_state(\"pennsylvania\")\n    return max(pennsylvania_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_450", "query": "What is the longest river in Texas ?", "python": "River:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.rivers, key=lambda x: x.length)", "python_oneline": "River:\n    return max(geo_model.find_state('texas').rivers, key=lambda x: x.length)", "python_multiline": "River:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.rivers, key=lambda x: x.length)", "python_multiline_discarded": "River:\n    texas_state = geo_model.find_state('texas')\n    longest_river = max(texas_state.rivers, key=lambda x: x.length)\n    return longest_river", "python_oneline_discarded": "River:\n    return max(geo_model.find_state('texas').rivers, key=lambda x: x.length)"}
{"qid": "geo880_451", "query": "What is the longest river in the largest state ?", "python": "River:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    return max(largest_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_452", "query": "What is the longest river in the smallest state in the USA ?", "python": "River:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    smallest_state = min(states_in_usa, key=lambda x: x.size)\n    return max(smallest_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_453", "query": "What is the longest river in the state with the highest point ?", "python": "River:\n    highest_point_state = max(geo_model.states, key=lambda x: x.high_point.elevation)\n    return max(highest_point_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_454", "query": "What is the longest river in the state with the most major cities ?", "python": "River:\n    states_with_major_cities = [s for s in geo_model.states if any(c.is_major for c in s.cities)]\n    state_with_most_major_cities = max(states_with_major_cities, key=lambda x: len(x.cities))\n    return max(state_with_most_major_cities.rivers, key=lambda x: x.length)"}
{"qid": "geo880_455", "query": "What is the longest river in the states that border Nebraska ?", "python": "River:\n    nebraska_state = geo_model.find_state('nebraska')\n    bordering_states = nebraska_state.next_to\n    rivers_in_bordering_states = [r for state in bordering_states for r in state.rivers]\n    return max(rivers_in_bordering_states, key=lambda x: x.length)"}
{"qid": "geo880_456", "query": "What is the longest river in the United States ?", "python": "River:\n    rivers_in_usa = geo_model.find_country(\"usa\").rivers\n    return max(rivers_in_usa, key=lambda x: x.length)"}
{"qid": "geo880_457", "query": "What is the longest river in the US ?", "python": "River:\n    rivers_in_usa = geo_model.find_country(\"usa\").rivers\n    return max(rivers_in_usa, key=lambda x: x.length)"}
{"qid": "geo880_458", "query": "What is the longest river that does not run through Texas ?", "python": "River:\n    rivers_not_in_texas = [r for r in geo_model.rivers if geo_model.find_state(\"texas\") not in r.traverses]\n    return max(rivers_not_in_texas, key=lambda x: x.length)"}
{"qid": "geo880_459", "query": "What is the longest river that flows through a state that borders Indiana ?", "python": "River:\n    indiana_state = geo_model.find_state(\"indiana\")\n    bordering_states = indiana_state.next_to\n    rivers_in_bordering_states = [r for s in bordering_states for r in s.rivers]\n    return max(rivers_in_bordering_states, key=lambda x: x.length)"}
{"qid": "geo880_460", "query": "What is the longest river that flows through Colorado ?", "python": "River:\n    colorado_state = geo_model.find_state('colorado')\n    return max(colorado_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_461", "query": "What is the longest river that passes the states that border the state that borders the most states ?", "python": "River:\n    states_with_most_neighbors = max(geo_model.states, key=lambda x: len(x.next_to))\n    states_that_border_most_states = states_with_most_neighbors.next_to\n    rivers_in_states_that_border_most_states = [r for s in states_that_border_most_states for r in s.rivers]\n    return max(rivers_in_states_that_border_most_states, key=lambda x: x.length)"}
{"qid": "geo880_462", "query": "What is the longest river that runs through a state that borders Tennessee ?", "python": "River:\n    tennessee_state = geo_model.find_state(\"tennessee\")\n    states_bordering_tennessee = tennessee_state.next_to\n    longest_river = max(\n        [r for s in states_bordering_tennessee for r in s.rivers],\n        key=lambda x: x.length\n    )\n    return longest_river"}
{"qid": "geo880_463", "query": "What is the lowest elevation in Pennsylvania ?", "python": "Place:\n    pennsylvania_state = geo_model.find_state(\"pennsylvania\")\n    return min(pennsylvania_state.places, key=lambda x: x.elevation)"}
{"qid": "geo880_464", "query": "What is the lowest point in Arkansas ?", "python": "Place:\n    arkansas_state = geo_model.find_state(\"arkansas\")\n    return arkansas_state.low_point"}
{"qid": "geo880_465", "query": "What is the lowest point in California ?", "python": "Place:\n    california_state = geo_model.find_state(\"california\")\n    return california_state.low_point"}
{"qid": "geo880_466", "query": "What is the lowest point in Louisiana ?", "python": "Place:\n    louisiana_state = geo_model.find_state('louisiana')\n    return louisiana_state.low_point"}
{"qid": "geo880_467", "query": "What is the lowest point in Massachusetts ?", "python": "Place:\n    massachusetts_state = geo_model.find_state('massachusetts')\n    return min(massachusetts_state.places, key=lambda x: x.elevation)"}
{"qid": "geo880_468", "query": "What is the lowest point in Mississippi ?", "python": "Place:\n    mississippi_state = geo_model.find_state('mississippi')\n    return mississippi_state.low_point"}
{"qid": "geo880_470", "query": "What is the lowest point in Oregon ?", "python": "Place:\n    oregon_state = geo_model.find_state(\"oregon\")\n    return oregon_state.low_point"}
{"qid": "geo880_471", "query": "What is the lowest point in Texas ?", "python": "Place:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.low_point"}
{"qid": "geo880_472", "query": "What is the lowest point in the state of California ?", "python": "Place:\n    california_state = geo_model.find_state(\"california\")\n    return california_state.low_point"}
{"qid": "geo880_473", "query": "What is the lowest point in the state of Texas ?", "python": "Place:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.low_point"}
{"qid": "geo880_474", "query": "What is the lowest point in the United States ?", "python": "Place:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return min(states_in_usa, key=lambda x: x.low_point.elevation).low_point"}
{"qid": "geo880_475", "query": "What is the lowest point in USA ?", "python": "Place:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return min(states_in_usa, key=lambda x: x.low_point.elevation).low_point"}
{"qid": "geo880_476", "query": "What is the lowest point in Wisconsin ?", "python": "Place:\n    wisconsin_state = geo_model.find_state(\"wisconsin\")\n    return wisconsin_state.low_point"}
{"qid": "geo880_477", "query": "What is the lowest point of all states through which the Colorado river runs through ?", "python": "Place:\n    colorado_river = geo_model.find_river(\"colorado\")\n    lowest_point = min(colorado_river.traverses, key=lambda x: x.low_point.elevation)\n    return lowest_point.low_point"}
{"qid": "geo880_478", "query": "What is the lowest point of Colorado ?", "python": "Place:\n    colorado_state = geo_model.find_state('colorado')\n    return colorado_state.low_point", "python_oneline": "Place:\n     return geo_model.find_state('colorado').low_point", "python_multiline": "Place:\n    colorado_state = geo_model.find_state('colorado')\n    return colorado_state.low_point", "python_multiline_discarded": "Place:\n    colorado_state = geo_model.find_state('colorado')\n    lowest_point = colorado_state.low_point\n    return lowest_point", "python_oneline_discarded": "Place:\n     return geo_model.find_state('colorado').low_point"}
{"qid": "geo880_479", "query": "What is the lowest point of the state with the largest area ?", "python": "Place:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    return largest_state.low_point"}
{"qid": "geo880_480", "query": "What is the lowest point of the US ?", "python": "Place:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return min(states_in_usa, key=lambda x: x.low_point.elevation).low_point"}
{"qid": "geo880_481", "query": "What is the major cities in Montana ?", "python": "List[City]:\n    montana_state = geo_model.find_state('montana')\n    return [city for city in montana_state.cities if city.is_major]"}
{"qid": "geo880_483", "query": "What is the most dense state in the USA ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_484", "query": "What is the most populated capital in the USA ?", "python": "City:\n    capitals = [s.capital for s in geo_model.states if s.capital is not None]\n    return max(capitals, key=lambda x: x.population)", "python_oneline": "City:\n     return max([s.capital for s in geo_model.states if s.capital is not None], key=lambda x: x.population)", "python_multiline": "City:\n    capitals = [s.capital for s in geo_model.states if s.capital is not None]\n    return max(capitals, key=lambda x: x.population)", "python_multiline_discarded": "City:\n    capitals = [s.capital for s in geo_model.states if s.capital is not None]\n    max_capital = max(capitals, key=lambda x: x.population)\n    return max_capital", "python_oneline_discarded": "City:\n     return max([s.capital for s in geo_model.states if s.capital is not None], key=lambda x: x.population)"}
{"qid": "geo880_485", "query": "What is the most populated state bordering Oklahoma ?", "python": "State:\n    oklahoma_state = geo_model.find_state(\"oklahoma\")\n    return max(oklahoma_state.next_to, key=lambda x: x.population)"}
{"qid": "geo880_486", "query": "What is the most populous city ?", "python": "City:\n    return max(geo_model.cities, key=lambda x: x.population)", "python_oneline": "City:\n    return max(geo_model.cities, key=lambda x: x.population)", "python_multiline": "City:\n    cities = geo_model.cities\n    max_city = max(cities, key=lambda x: x.population)\n    return max_city", "python_multiline_discarded": "City:\n    cities = geo_model.cities\n    max_city = max(cities, key=lambda x: x.population)\n    return max_city", "python_oneline_discarded": "City:\n    return max(geo_model.cities, key=lambda x: x.population)"}
{"qid": "geo880_487", "query": "What is the most populous city in Texas ?", "python": "City:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_488", "query": "What is the most populous city in Wyoming ?", "python": "City:\n    cities_in_wyoming = geo_model.find_state(\"wyoming\").cities\n    return max(cities_in_wyoming, key=lambda x: x.population)"}
{"qid": "geo880_489", "query": "What is the most populous state ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)", "python_oneline": "State:\n    return max(geo_model.states, key=lambda x: x.population)", "python_multiline": "State:\n    return max(geo_model.states, key=lambda x: x.population)", "python_multiline_discarded": "State:\n    return max(geo_model.states, key=lambda x: x.population)", "python_oneline_discarded": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_490", "query": "What is the most populous state in the US ?", "python": "State:\n    most_populous_state = max(geo_model.states, key=lambda x: x.population)\n    return most_populous_state"}
{"qid": "geo880_491", "query": "What is the most populous state through which the Mississippi runs ?", "python": "State:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    states_traversed_by_mississippi = mississippi_river.traverses\n    return max(states_traversed_by_mississippi, key=lambda x: x.population)"}
{"qid": "geo880_492", "query": "What is the name of the state with the lowest point ?", "python": "str:\n    lowest_point = min(geo_model.places, key=lambda x: x.elevation)\n    return lowest_point.state.name"}
{"qid": "geo880_493", "query": "What is the number of neighboring states for Kentucky ?", "python": "int:\n    kentucky_state = geo_model.find_state(\"kentucky\")\n    return len(kentucky_state.next_to)"}
{"qid": "geo880_494", "query": "What is the population density in the state with capital Austin ?", "python": "float:\n    state = [s for s in geo_model.states if s.capital and s.capital.name == \"austin\"][0]\n    return state.density"}
{"qid": "geo880_495", "query": "What is the population density of Maine ?", "python": "float:\n    maine_state = geo_model.find_state(\"maine\")\n    return maine_state.density"}
{"qid": "geo880_496", "query": "What is the population density of South Dakota ?", "python": "float:\n    south_dakota_state = geo_model.find_state(\"south dakota\")\n    return south_dakota_state.density"}
{"qid": "geo880_497", "query": "What is the population density of Texas ?", "python": "State:\n    texas = geo_model.find_state(\"texas\")\n    return texas.density"}
{"qid": "geo880_498", "query": "What is the population density of the largest state ?", "python": "float:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    return largest_state.density"}
{"qid": "geo880_499", "query": "What is the population density of the smallest state ?", "python": "float:\n    smallest_state = min(geo_model.states, key=lambda x: x.size)\n    return smallest_state.density"}
{"qid": "geo880_500", "query": "What is the population density of the state with the smallest area ?", "python": "float:\n    smallest_state = min(geo_model.states, key=lambda x: x.area)\n    return smallest_state.density"}
{"qid": "geo880_501", "query": "What is the population density of the state with the smallest population ?", "python": "float:\n    smallest_state = min(geo_model.states, key=lambda x: x.population)\n    return smallest_state.density"}
{"qid": "geo880_502", "query": "What is the population density of Wyoming ?", "python": "float:\n    wyoming_state = geo_model.find_state(\"wyoming\")\n    return wyoming_state.density"}
{"qid": "geo880_503", "query": "What is the population in Boston ?", "python": "int:\n    boston_city = geo_model.find_city('boston')\n    return boston_city.population"}
{"qid": "geo880_504", "query": "What is the population of Alaska ?", "python": "int:\n    alaska_state = geo_model.find_state('alaska')\n    return alaska_state.population", "python_oneline": "int:\n     return geo_model.find_state('alaska').population", "python_multiline": "int:\n    alaska_state = geo_model.find_state('alaska')\n    return alaska_state.population", "python_multiline_discarded": "int:\n    alaska_state = geo_model.find_state('alaska')\n    population = alaska_state.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_state('alaska').population"}
{"qid": "geo880_505", "query": "What is the population of Arizona ?", "python": "int:\n    arizona_state = geo_model.find_state(\"arizona\")\n    return arizona_state.population"}
{"qid": "geo880_506", "query": "What is the population of Atlanta ?", "python": "int:\n    atlanta_city = geo_model.find_city('atlanta')\n    return atlanta_city.population"}
{"qid": "geo880_507", "query": "What is the population of Atlanta GA ?", "python": "int:\n    atlanta_city = geo_model.find_city('atlanta', 'ga')\n    return atlanta_city.population"}
{"qid": "geo880_508", "query": "What is the population of Austin ?", "python": "int:\n    austin_city = geo_model.find_city(\"austin\")\n    return austin_city.population", "python_oneline": "int:\n     return geo_model.find_city(\"austin\").population", "python_multiline": "int:\n    austin_city = geo_model.find_city(\"austin\")\n    return austin_city.population", "python_multiline_discarded": "int:\n    austin_city = geo_model.find_city(\"austin\")\n    population = austin_city.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_city(\"austin\").population"}
{"qid": "geo880_509", "query": "What is the population of Austin Texas ?", "python": "int:\n    austin_city = geo_model.find_city(\"austin\", \"tx\")\n    return austin_city.population", "python_oneline": "int:\n     return geo_model.find_city(\"austin\", \"tx\").population", "python_multiline": "int:\n    austin_city = geo_model.find_city(\"austin\", \"tx\")\n    return austin_city.population", "python_multiline_discarded": "int:\n    austin_city = geo_model.find_city(\"austin\", \"tx\")\n    return austin_city.population", "python_oneline_discarded": "int:\n     return geo_model.find_city(\"austin\", \"tx\").population"}
{"qid": "geo880_510", "query": "What is the population of Boston Massachusetts ?", "python": "int:\n    boston_city = geo_model.find_city('boston', 'ma')\n    return boston_city.population"}
{"qid": "geo880_511", "query": "What is the population of Boulder ?", "python": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population", "python_oneline": "int:\n     return geo_model.find_city('boulder').population", "python_multiline": "int:\n    boulder_city = geo_model.find_city('boulder')\n    return boulder_city.population", "python_multiline_discarded": "int:\n    boulder_city = geo_model.find_city('boulder')\n    population = boulder_city.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_city('boulder').population"}
{"qid": "geo880_512", "query": "What is the population of California ?", "python": "int:\n    california_state = geo_model.find_state(\"california\")\n    return california_state.population"}
{"qid": "geo880_513", "query": "What is the population of Dallas ?", "python": "int:\n    dallas_city = geo_model.find_city(\"dallas\")\n    return dallas_city.population"}
{"qid": "geo880_514", "query": "What is the population of Denver ?", "python": "int:\n    denver_city = geo_model.find_city('denver')\n    return denver_city.population"}
{"qid": "geo880_515", "query": "What is the population of Erie Pennsylvania ?", "python": "City:\n    erie_city = geo_model.find_city(\"erie\", \"pa\")\n    return erie_city.population"}
{"qid": "geo880_516", "query": "What is the population of Hawaii ?", "python": "int:\n    hawaii_state = geo_model.find_state('hawaii')\n    return hawaii_state.population"}
{"qid": "geo880_517", "query": "What is the population of Houston ?", "python": "int:\n    houston_city = geo_model.find_city('houston')\n    return houston_city.population"}
{"qid": "geo880_518", "query": "What is the population of Idaho ?", "python": "State:\n    idaho_state = geo_model.find_state(\"idaho\")\n    return idaho_state.population", "python_oneline": "State:\n    return geo_model.find_state(\"idaho\").population", "python_multiline": "State:\n    idaho_state = geo_model.find_state(\"idaho\")\n    return idaho_state.population", "python_multiline_discarded": "State:\n    idaho_state = geo_model.find_state(\"idaho\")\n    population = idaho_state.population\n    return population", "python_oneline_discarded": "State:\n    return geo_model.find_state(\"idaho\").population"}
{"qid": "geo880_519", "query": "What is the population of Illinois ?", "python": "int:\n    illinois_state = geo_model.find_state(\"illinois\")\n    return illinois_state.population"}
{"qid": "geo880_520", "query": "What is the population of Maine ?", "python": "int:\n    maine_state = geo_model.find_state(\"maine\")\n    return maine_state.population"}
{"qid": "geo880_521", "query": "What is the population of Maryland ?", "python": "int:\n    maryland_state = geo_model.find_state(\"maryland\")\n    return maryland_state.population"}
{"qid": "geo880_522", "query": "What is the population of Minnesota ?", "python": "int:\n    minnesota_state = geo_model.find_state(\"minnesota\")\n    return minnesota_state.population", "python_oneline": "int:\n     return geo_model.find_state(\"minnesota\").population", "python_multiline": "int:\n    minnesota_state = geo_model.find_state(\"minnesota\")\n    return minnesota_state.population", "python_multiline_discarded": "int:\n    minnesota_state = geo_model.find_state(\"minnesota\")\n    population = minnesota_state.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_state(\"minnesota\").population"}
{"qid": "geo880_523", "query": "What is the population of Montana ?", "python": "State:\n    montana_state = geo_model.find_state(\"montana\")\n    return montana_state.population", "python_oneline": "State:\n    return geo_model.find_state(\"montana\").population", "python_multiline": "State:\n    montana_state = geo_model.find_state(\"montana\")\n    return montana_state.population", "python_multiline_discarded": "State:\n    montana_state = geo_model.find_state(\"montana\")\n    population = montana_state.population\n    return population", "python_oneline_discarded": "State:\n    return geo_model.find_state(\"montana\").population"}
{"qid": "geo880_524", "query": "What is the population of New Mexico ?", "python": "State:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    return new_mexico_state.population"}
{"qid": "geo880_525", "query": "What is the population of New York ?", "python": "int:\n    new_york_state = geo_model.find_state(\"new york\")\n    return new_york_state.population"}
{"qid": "geo880_526", "query": "What is the population of New York City ?", "python": "int:\n    new_york_city = geo_model.find_city(\"new york\")\n    return new_york_city.population"}
{"qid": "geo880_527", "query": "What is the population of Oregon ?", "python": "int:\n    oregon_state = geo_model.find_state(\"oregon\")\n    return oregon_state.population", "python_oneline": "int:\n     return geo_model.find_state(\"oregon\").population", "python_multiline": "int:\n    oregon_state = geo_model.find_state(\"oregon\")\n    return oregon_state.population", "python_multiline_discarded": "int:\n    oregon_state = geo_model.find_state(\"oregon\")\n    population = oregon_state.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_state(\"oregon\").population"}
{"qid": "geo880_528", "query": "What is the population of Portland Maine ?", "python": "int:\n    portland_city = geo_model.find_city('portland', 'me')\n    return portland_city.population"}
{"qid": "geo880_529", "query": "What is the population of Rhode Island ?", "python": "int:\n    rhode_island_state = geo_model.find_state(\"rhode island\")\n    return rhode_island_state.population", "python_oneline": "int:\n     return geo_model.find_state(\"rhode island\").population", "python_multiline": "int:\n    rhode_island_state = geo_model.find_state(\"rhode island\")\n    return rhode_island_state.population", "python_multiline_discarded": "int:\n    rhode_island_state = geo_model.find_state(\"rhode island\")\n    population = rhode_island_state.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_state(\"rhode island\").population"}
{"qid": "geo880_530", "query": "What is the population of Sacramento ?", "python": "int:\n    sacramento_city = geo_model.find_city(\"sacramento\")\n    return sacramento_city.population", "python_oneline": "int:\n     return geo_model.find_city(\"sacramento\").population", "python_multiline": "int:\n    sacramento_city = geo_model.find_city(\"sacramento\")\n    return sacramento_city.population", "python_multiline_discarded": "int:\n    sacramento_city = geo_model.find_city(\"sacramento\")\n    population = sacramento_city.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_city(\"sacramento\").population"}
{"qid": "geo880_531", "query": "What is the population of San Antonio ?", "python": "int:\n    san_antonio_city = geo_model.find_city('san antonio')\n    return san_antonio_city.population"}
{"qid": "geo880_532", "query": "What is the population of Seattle ?", "python": "int:\n    seattle_city = geo_model.find_city(\"seattle\")\n    return seattle_city.population"}
{"qid": "geo880_533", "query": "What is the population of Seattle Washington ?", "python": "int:\n    seattle_city = geo_model.find_city(\"seattle\", \"wa\")\n    return seattle_city.population"}
{"qid": "geo880_534", "query": "What is the population of South Dakota ?", "python": "int:\n    south_dakota_state = geo_model.find_state(\"south dakota\")\n    return south_dakota_state.population"}
{"qid": "geo880_537", "query": "What is the population of Tempe Arizona ?", "python": "int:\n    tempe_city = geo_model.find_city(\"tempe\", \"az\")\n    return tempe_city.population"}
{"qid": "geo880_538", "query": "What is the population of Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.population"}
{"qid": "geo880_539", "query": "What is the population of the capital of the largest state ?", "python": "int:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    return largest_state.capital.population"}
{"qid": "geo880_540", "query": "What is the population of the capital of the largest state through which the Mississippi runs ?", "python": "int:\n    states_through_mississippi = [s for s in geo_model.states if geo_model.find_river(\"mississippi\") in s.rivers]\n    largest_state = max(states_through_mississippi, key=lambda x: x.size)\n    return largest_state.capital.population"}
{"qid": "geo880_541", "query": "What is the population of the capital of the smallest state ?", "python": "int:\n    smallest_state = min(geo_model.states, key=lambda x: x.area)\n    return smallest_state.capital.population"}
{"qid": "geo880_542", "query": "What is the population of the largest city in the state with the largest area ?", "python": "int:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    largest_city_in_largest_state = max(largest_state.cities, key=lambda x: x.population)\n    return largest_city_in_largest_state.population"}
{"qid": "geo880_543", "query": "What is the population of the largest state ?", "python": "int:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    return largest_state.population"}
{"qid": "geo880_544", "query": "What is the population of the largest state that borders Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    bordering_states = texas_state.next_to\n    largest_state = max(bordering_states, key=lambda x: x.size)\n    return largest_state.population"}
{"qid": "geo880_545", "query": "What is the population of the major cities in Wisconsin ?", "python": "List[int]:\n    wisconsin_state = geo_model.find_state(\"wisconsin\")\n    major_cities = [c for c in wisconsin_state.cities if c.is_major]\n    return [c.population for c in major_cities]"}
{"qid": "geo880_547", "query": "What is the population of the state that borders the most states ?", "python": "int:\n    states_with_most_neighbors = max(geo_model.states, key=lambda x: len(x.next_to))\n    return states_with_most_neighbors.population"}
{"qid": "geo880_548", "query": "What is the population of the state with the highest population density ?", "python": "int:\n    state_with_highest_density = max(geo_model.states, key=lambda x: x.density)\n    return state_with_highest_density.population"}
{"qid": "geo880_549", "query": "What is the population of the state with the largest area ?", "python": "int:\n    largest_state = max(geo_model.states, key=lambda x: x.area)\n    return largest_state.population"}
{"qid": "geo880_550", "query": "What is the population of Tucson ?", "python": "int:\n    tucson_city = geo_model.find_city(\"tucson\")\n    return tucson_city.population"}
{"qid": "geo880_551", "query": "What is the population of Utah ?", "python": "int:\n    utah_state = geo_model.find_state('utah')\n    return utah_state.population", "python_oneline": "int:\n     return geo_model.find_state('utah').population", "python_multiline": "int:\n    utah_state = geo_model.find_state('utah')\n    return utah_state.population", "python_multiline_discarded": "int:\n    utah_state = geo_model.find_state('utah')\n    population = utah_state.population\n    return population", "python_oneline_discarded": "int:\n     return geo_model.find_state('utah').population"}
{"qid": "geo880_552", "query": "What is the population of Washington ?", "python": "int:\n    washington_state = geo_model.find_state(\"washington\")\n    return washington_state.population"}
{"qid": "geo880_554", "query": "What is the river that cross over Ohio ?", "python": "List[River]:\n    ohio_state = geo_model.find_state(\"ohio\")\n    return ohio_state.rivers"}
{"qid": "geo880_555", "query": "What is the shortest river ?", "python": "River:\n    return min(geo_model.rivers, key=lambda x: x.length)"}
{"qid": "geo880_556", "query": "What is the shortest river in Alaska ?", "python": "River:\n    alaska_state = geo_model.find_state('alaska')\n    return min(alaska_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_557", "query": "What is the shortest river in Iowa ?", "python": "River:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return min(iowa_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_558", "query": "What is the shortest river in Nebraska ?", "python": "River:\n    nebraska_state = geo_model.find_state(\"nebraska\")\n    return min(nebraska_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_559", "query": "What is the shortest river in Texas ?", "python": "River:\n    texas_state = geo_model.find_state('texas')\n    return min(texas_state.rivers, key=lambda x: x.length)"}
{"qid": "geo880_560", "query": "What is the shortest river in the United States ?", "python": "River:\n    shortest_river = min(geo_model.rivers, key=lambda x: x.length)\n    return shortest_river"}
{"qid": "geo880_561", "query": "What is the shortest river in the US ?", "python": "River:\n    shortest_river = min(geo_model.rivers, key=lambda x: x.length)\n    return shortest_river"}
{"qid": "geo880_562", "query": "What is the shortest river in the USA ?", "python": "River:\n    shortest_river = min(geo_model.rivers, key=lambda x: x.length)\n    return shortest_river"}
{"qid": "geo880_563", "query": "What is the size of California ?", "python": "State:\n    california_state = geo_model.find_state('california')\n    return california_state.size"}
{"qid": "geo880_564", "query": "What is the size of Florida ?", "python": "int:\n    florida_state = geo_model.find_state(\"florida\")\n    return florida_state.size"}
{"qid": "geo880_565", "query": "What is the size of Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.size"}
{"qid": "geo880_566", "query": "What is the size of the capital of Texas ?", "python": "int:\n    texas_state = geo_model.find_state(\"texas\")\n    return texas_state.capital.size"}
{"qid": "geo880_567", "query": "What is the size of the largest state in the USA ?", "python": "int:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return max(states_in_usa, key=lambda x: x.size).size"}
{"qid": "geo880_568", "query": "What is the smallest city in Alaska ?", "python": "City:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return min(alaska_state.cities, key=lambda x: x.size)", "python_oneline": "City:\n    return min(geo_model.find_state(\"alaska\").cities, key=lambda x: x.size)", "python_multiline": "City:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return min(alaska_state.cities, key=lambda x: x.size)", "python_multiline_discarded": "City:\n    alaska_state = geo_model.find_state(\"alaska\")\n    smallest_city = min(alaska_state.cities, key=lambda x: x.size)\n    return smallest_city", "python_oneline_discarded": "City:\n    return min(geo_model.find_state(\"alaska\").cities, key=lambda x: x.size)"}
{"qid": "geo880_569", "query": "What is the smallest city in Arkansas ?", "python": "City:\n    arkansas_state = geo_model.find_state(\"arkansas\")\n    return min(arkansas_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_570", "query": "What is the smallest city in Hawaii ?", "python": "City:\n    cities_in_hawaii = geo_model.find_state(\"hawaii\").cities\n    return min(cities_in_hawaii, key=lambda x: x.size)"}
{"qid": "geo880_571", "query": "What is the smallest city in the largest state ?", "python": "City:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    return min(largest_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_572", "query": "What is the smallest city in the US ?", "python": "City:\n    return min(geo_model.cities, key=lambda x: x.size)", "python_oneline": "City:\n    return min(geo_model.cities, key=lambda x: x.size)", "python_multiline": "City:\n    smallest_city = min(geo_model.cities, key=lambda x: x.size)\n    return smallest_city", "python_multiline_discarded": "City:\n    smallest_city = min(geo_model.cities, key=lambda x: x.size)\n    return smallest_city", "python_oneline_discarded": "City:\n     return min(geo_model.cities, key=lambda x: x.size)"}
{"qid": "geo880_573", "query": "What is the smallest city in the USA ?", "python": "City:\n    cities_in_usa = geo_model.find_country(\"usa\").cities\n    return min(cities_in_usa, key=lambda x: x.size)"}
{"qid": "geo880_574", "query": "What is the smallest city in Washington ?", "python": "City:\n    washington_state = geo_model.find_state(\"washington\")\n    return min(washington_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_575", "query": "What is the smallest city of the smallest state in the US ?", "python": "City:\n    smallest_state = min(geo_model.states, key=lambda x: x.area)\n    return min(smallest_state.cities, key=lambda x: x.size)"}
{"qid": "geo880_576", "query": "What is the smallest state bordering Ohio ?", "python": "State:\n    ohio_state = geo_model.find_state(\"ohio\")\n    return min(ohio_state.next_to, key=lambda x: x.area)"}
{"qid": "geo880_577", "query": "What is the smallest state bordering Wyoming ?", "python": "State:\n    wyoming_state = geo_model.find_state('wyoming')\n    return min(wyoming_state.next_to, key=lambda x: x.area)"}
{"qid": "geo880_578", "query": "What is the smallest state by area ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.area)"}
{"qid": "geo880_579", "query": "What is the smallest state in the USA ?", "python": "State:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return min(states_in_usa, key=lambda x: x.size)"}
{"qid": "geo880_580", "query": "What is the smallest state that borders Texas ?", "python": "State:\n    states_bordering_texas = geo_model.find_state(\"texas\").next_to\n    return min(states_bordering_texas, key=lambda x: x.size)"}
{"qid": "geo880_582", "query": "What is the smallest state that the Mississippi river runs through ?", "python": "State:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return min(mississippi_river.traverses, key=lambda x: x.area)"}
{"qid": "geo880_583", "query": "What is the smallest state through which the longest river runs ?", "python": "State:\n    longest_river = max(geo_model.rivers, key=lambda x: x.length)\n    return min(longest_river.traverses, key=lambda x: x.area)"}
{"qid": "geo880_584", "query": "What is the state that contains the highest point ?", "python": "State:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point.state"}
{"qid": "geo880_585", "query": "What is the state with the highest elevation in the United States ?", "python": "State:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return max(states_in_usa, key=lambda x: x.high_point.elevation)"}
{"qid": "geo880_586", "query": "What is the state with the largest area ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.area)"}
{"qid": "geo880_587", "query": "What is the state with the largest density in USA ?", "python": "State:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return max(states_in_usa, key=lambda x: x.density)", "python_oneline": "State:\n    return max(geo_model.find_country(\"usa\").states, key=lambda x: x.density)", "python_multiline": "State:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    return max(states_in_usa, key=lambda x: x.density)", "python_multiline_discarded": "State:\n    states_in_usa = geo_model.find_country(\"usa\").states\n    max_density_state = max(states_in_usa, key=lambda x: x.density)\n    return max_density_state", "python_oneline_discarded": "State:\n    return max(geo_model.find_country(\"usa\").states, key=lambda x: x.density)"}
{"qid": "geo880_588", "query": "What is the state with the largest population density ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_589", "query": "What is the state with the lowest point ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.low_point.elevation)", "python_oneline": "State:\n    return min(geo_model.states, key=lambda x: x.low_point.elevation)", "python_multiline": "State:\n    states = geo_model.states\n    lowest_state = min(states, key=lambda x: x.low_point.elevation)\n    return lowest_state", "python_multiline_discarded": "State:\n    states = geo_model.states\n    lowest_state = min(states, key=lambda x: x.low_point.elevation)\n    return lowest_state", "python_oneline_discarded": "State:\n    return min(geo_model.states, key=lambda x: x.low_point.elevation)"}
{"qid": "geo880_590", "query": "What is the state with the lowest population ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_591", "query": "What is the state with the lowest population density ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_592", "query": "What is the state with the smallest area ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.area)"}
{"qid": "geo880_596", "query": "What is the total length of all rivers in the USA ?", "python": "int:\n    rivers_in_usa = geo_model.find_country(\"usa\").rivers\n    return sum(r.length for r in rivers_in_usa)"}
{"qid": "geo880_597", "query": "What is the total population of the states that border Texas ?", "python": "int:\n    texas_state = geo_model.find_state('texas')\n    return sum(s.population for s in texas_state.next_to)"}
{"qid": "geo880_598", "query": "What length is the Mississippi ?", "python": "int:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.length"}
{"qid": "geo880_599", "query": "What major cities are located in Pennsylvania ?", "python": "List[City]:\n    pennsylvania_state = geo_model.find_state('pennsylvania')\n    return [c for c in pennsylvania_state.cities if c.is_major]"}
{"qid": "geo880_600", "query": "What major rivers run through Illinois ?", "python": "List[River]:\n    illinois_state = geo_model.find_state('illinois')\n    return [r for r in illinois_state.rivers if r.is_major]"}
{"qid": "geo880_601", "query": "What mountains are in Alaska ?", "python": "List[Mountain]:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return alaska_state.mountains"}
{"qid": "geo880_602", "query": "What river flows through Kansas ?", "python": "List[River]:\n    kansas_state = geo_model.find_state(\"kansas\")\n    return kansas_state.rivers"}
{"qid": "geo880_603", "query": "What river flows through Texas ?", "python": "List[River]:\n    texas_state = geo_model.find_state(\"texas\")\n    return texas_state.rivers"}
{"qid": "geo880_604", "query": "What river flows through the most states ?", "python": "River:\n    return max(geo_model.rivers, key=lambda x: len(x.traverses))"}
{"qid": "geo880_605", "query": "What river is the longest one in the United States ?", "python": "River:\n    rivers = geo_model.find_country(\"usa\").rivers\n    return max(rivers, key=lambda x: x.length)"}
{"qid": "geo880_606", "query": "What river runs through Illinois ?", "python": "List[River]:\n    illinois_state = geo_model.find_state('illinois')\n    return illinois_state.rivers"}
{"qid": "geo880_607", "query": "What river runs through the most states ?", "python": "River:\n    return max(geo_model.rivers, key=lambda x: len(x.traverses))"}
{"qid": "geo880_608", "query": "What river runs through the state with the most cities ?", "python": "River:\n    state_with_most_cities = max(geo_model.states, key=lambda x: len(x.cities))\n    return max(state_with_most_cities.rivers, key=lambda x: x.length)"}
{"qid": "geo880_609", "query": "What river runs through Virginia ?", "python": "List[River]:\n    return geo_model.find_state(\"virginia\").rivers", "python_oneline": "List[River]:\n    return geo_model.find_state(\"virginia\").rivers", "python_multiline": "List[River]:\n    state = geo_model.find_state(\"virginia\")\n    rivers = state.rivers\n    return rivers", "python_multiline_discarded": "List[River]:\n    state = geo_model.find_state(\"virginia\")\n    rivers = state.rivers\n    return rivers", "python_oneline_discarded": "List[River]:\n    return [river for state in geo_model.states if state.name == \"virginia\" for river in state.rivers]"}
{"qid": "geo880_610", "query": "What river traverses the most states ?", "python": "River:\n    return max(geo_model.rivers, key=lambda x: len(x.traverses))", "python_oneline": "River:\n    return max(geo_model.rivers, key=lambda x: len(x.traverses))", "python_multiline": "River:\n    max_river = max(geo_model.rivers, key=lambda x: len(x.traverses))\n    return max_river", "python_multiline_discarded": "River:\n    max_river = max(geo_model.rivers, key=lambda x: len(x.traverses))\n    return max_river", "python_oneline_discarded": "River:\n    return max(geo_model.rivers, key=lambda x: len(x.traverses))"}
{"qid": "geo880_611", "query": "What river traverses the state which borders the most states ?", "python": "List[River]:\n    state_with_most_borders = max(geo_model.states, key=lambda x: len(x.next_to))\n    return [r for r in state_with_most_borders.rivers if state_with_most_borders in r.traverses]"}
{"qid": "geo880_612", "query": "What rivers are in Nevada ?", "python": "List[River]:\n    nevada_state = geo_model.find_state('nevada')\n    return nevada_state.rivers"}
{"qid": "geo880_613", "query": "What rivers are in New Mexico ?", "python": "List[River]:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    return new_mexico_state.rivers"}
{"qid": "geo880_614", "query": "What rivers are in Oregon ?", "python": "List[River]:\n    oregon_state = geo_model.find_state(\"oregon\")\n    return oregon_state.rivers"}
{"qid": "geo880_615", "query": "What rivers are in states that border Texas ?", "python": "List[River]:\n    texas_state = geo_model.find_state(\"texas\")\n    bordering_states = texas_state.next_to\n    rivers = []\n    for state in bordering_states:\n        rivers.extend(state.rivers)\n    return rivers"}
{"qid": "geo880_616", "query": "What rivers are in Texas ?", "python": "List[River]:\n    texas_state = geo_model.find_state(\"texas\")\n    return texas_state.rivers"}
{"qid": "geo880_617", "query": "What rivers are in Utah ?", "python": "List[River]:\n    utah_state = geo_model.find_state(\"utah\")\n    return utah_state.rivers"}
{"qid": "geo880_618", "query": "What rivers are there in Texas ?", "python": "List[River]:\n    texas_state = geo_model.find_state(\"texas\")\n    return texas_state.rivers"}
{"qid": "geo880_619", "query": "What rivers do not run through Tennessee ?", "python": "List[River]:\n    tennessee_state = geo_model.find_state('tennessee')\n    rivers_in_tennessee = tennessee_state.rivers\n    all_rivers = geo_model.rivers\n    return [r for r in all_rivers if r not in rivers_in_tennessee]"}
{"qid": "geo880_620", "query": "What rivers flow though Colorado ?", "python": "List[River]:\n    colorado_state = geo_model.find_state('colorado')\n    return colorado_state.rivers"}
{"qid": "geo880_621", "query": "What rivers flow through Missouri ?", "python": "List[River]:\n    missouri_state = geo_model.find_state(\"missouri\")\n    return missouri_state.rivers"}
{"qid": "geo880_622", "query": "What rivers flow through states that Alabama borders ?", "python": "List[River]:\n    alabama_state = geo_model.find_state(\"alabama\")\n    states_bordering_alabama = alabama_state.next_to\n    rivers_in_states_bordering_alabama = [r for s in states_bordering_alabama for r in s.rivers]\n    return rivers_in_states_bordering_alabama", "python_oneline": "List[River]:\n    return [r for s in geo_model.find_state(\"alabama\").next_to for r in s.rivers]", "python_multiline": "List[River]:\n    alabama_state = geo_model.find_state(\"alabama\")\n    states_bordering_alabama = alabama_state.next_to\n    rivers_in_states_bordering_alabama = [r for s in states_bordering_alabama for r in s.rivers]\n    return rivers_in_states_bordering_alabama", "python_multiline_discarded": "List[River]:\n    alabama_state = geo_model.find_state(\"alabama\")\n    states_bordering_alabama = alabama_state.next_to\n    rivers_in_states_bordering_alabama = []\n    for s in states_bordering_alabama:\n        for r in s.rivers:\n            rivers_in_states_bordering_alabama.append(r)\n    return rivers_in_states_bordering_alabama", "python_oneline_discarded": "List[River]:\n    return [r for s in geo_model.find_state(\"alabama\").next_to for r in s.rivers]"}
{"qid": "geo880_623", "query": "What rivers flow through states that border the state with the largest population ?", "python": "List[River]:\n    largest_state = max(geo_model.states, key=lambda x: x.population)\n    states_bordering_largest_state = largest_state.next_to\n    rivers_in_states_bordering_largest_state = [r for s in states_bordering_largest_state for r in s.rivers]\n    return rivers_in_states_bordering_largest_state"}
{"qid": "geo880_624", "query": "What rivers flow through the largest state ?", "python": "List[River]:\n    largest_state = max(geo_model.states, key=lambda x: x.size)\n    return largest_state.rivers"}
{"qid": "geo880_625", "query": "What rivers flow through the state with the largest population ?", "python": "List[River]:\n    largest_state = max(geo_model.states, key=lambda x: x.population)\n    return largest_state.rivers"}
{"qid": "geo880_626", "query": "What rivers run through Arizona ?", "python": "List[River]:\n    arizona_state = geo_model.find_state('arizona')\n    return arizona_state.rivers"}
{"qid": "geo880_627", "query": "What rivers run through Austin Texas ?", "python": "List[River]:\n    austin_city = geo_model.find_city('austin', 'tx')\n    austin_state = austin_city.state\n    return [r for r in austin_state.rivers if austin_city in r.traverses]"}
{"qid": "geo880_628", "query": "What rivers run through Colorado ?", "python": "List[River]:\n    colorado_state = geo_model.find_state(\"colorado\")\n    return colorado_state.rivers", "python_oneline": "List[River]:\n    return geo_model.find_state(\"colorado\").rivers", "python_multiline": "List[River]:\n    colorado_state = geo_model.find_state(\"colorado\")\n    return colorado_state.rivers", "python_multiline_discarded": "List[River]:\n    colorado_state = geo_model.find_state(\"colorado\")\n    return colorado_state.rivers", "python_oneline_discarded": "List[River]:\n    return geo_model.find_state(\"colorado\").rivers"}
{"qid": "geo880_629", "query": "What rivers run through Louisiana ?", "python": "List[River]:\n    louisiana_state = geo_model.find_state('louisiana')\n    return louisiana_state.rivers"}
{"qid": "geo880_630", "query": "What rivers run through Maine ?", "python": "List[River]:\n    maine_state = geo_model.find_state('maine')\n    return maine_state.rivers"}
{"qid": "geo880_631", "query": "What rivers run through New York ?", "python": "List[River]:\n    new_york_state = geo_model.find_state(\"new york\")\n    return new_york_state.rivers"}
{"qid": "geo880_632", "query": "What rivers run through the state with the lowest point in the USA ?", "python": "State:\n    lowest_state = min(geo_model.states, key=lambda x: x.low_point.elevation)\n    return lowest_state.rivers"}
{"qid": "geo880_633", "query": "What rivers run through the states that border the state with the capital Atlanta ?", "python": "List[River]:\n    atlanta_city = geo_model.find_city(\"atlanta\")\n    atlanta_state = atlanta_city.state\n    bordering_states = atlanta_state.next_to\n    rivers = []\n    for state in bordering_states:\n        rivers.extend(state.rivers)\n    return rivers"}
{"qid": "geo880_634", "query": "What rivers run through West Virginia ?", "python": "List[River]:\n    west_virginia_state = geo_model.find_state('west virginia')\n    return west_virginia_state.rivers", "python_oneline": "List[River]:\n    return geo_model.find_state('west virginia').rivers", "python_multiline": "List[River]:\n    west_virginia_state = geo_model.find_state('west virginia')\n    return west_virginia_state.rivers", "python_multiline_discarded": "List[River]:\n    west_virginia_state = geo_model.find_state('west virginia')\n    rivers = west_virginia_state.rivers\n    return rivers", "python_oneline_discarded": "List[River]:\n    return geo_model.find_state('west virginia').rivers"}
{"qid": "geo880_635", "query": "What rivers traverses the state which borders the most states ?", "python": "List[River]:\n    state_with_most_borders = max(geo_model.states, key=lambda x: len(x.next_to))\n    return state_with_most_borders.rivers"}
{"qid": "geo880_636", "query": "What state bordering Nevada has the largest population ?", "python": "State:\n    nevada_state = geo_model.find_state(\"nevada\")\n    bordering_states = nevada_state.next_to\n    return max(bordering_states, key=lambda x: x.population)"}
{"qid": "geo880_637", "query": "What state borders Michigan ?", "python": "List[State]:\n    return geo_model.find_state(\"michigan\").next_to"}
{"qid": "geo880_638", "query": "What state borders most other states ?", "python": "State:\n    states = geo_model.states\n    return max(states, key=lambda x: len(x.next_to))"}
{"qid": "geo880_639", "query": "What state borders New York ?", "python": "State:\n    return geo_model.find_state(\"new york\").next_to"}
{"qid": "geo880_640", "query": "What state borders the least states ?", "python": "State:\n    return min(geo_model.states, key=lambda x: len(x.next_to))"}
{"qid": "geo880_641", "query": "What state borders the least states excluding Alaska and excluding Hawaii ?", "python": "State:\n    states_excluding_alaska_and_hawaii = [s for s in geo_model.states if s.name not in [\"alaska\", \"hawaii\"]]\n    return min(states_excluding_alaska_and_hawaii, key=lambda x: len(x.next_to))"}
{"qid": "geo880_642", "query": "What state borders the most states ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len(x.next_to))"}
{"qid": "geo880_643", "query": "What state borders the state with the smallest population ?", "python": "List[State]:\n    smallest_state = min(geo_model.states, key=lambda x: x.population)\n    return smallest_state.next_to"}
{"qid": "geo880_644", "query": "What state contains the highest point in the US ?", "python": "State:\n    highest_point = max(geo_model.places, key=lambda x: x.elevation)\n    return highest_point.state"}
{"qid": "geo880_645", "query": "What state contains the highest point of those the Colorado river traverses ?", "python": "State:\n    colorado_river = geo_model.find_river(\"colorado\")\n    states_traversed_by_colorado = colorado_river.traverses\n    return max(states_traversed_by_colorado, key=lambda x: x.high_point.elevation)"}
{"qid": "geo880_646", "query": "What state has highest elevation ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.high_point.elevation)"}
{"qid": "geo880_647", "query": "What state has no rivers ?", "python": "State:\n    states_with_no_rivers = []\n    for state in geo_model.states:\n        if not state.rivers:\n            states_with_no_rivers.append(state)\n    return states_with_no_rivers"}
{"qid": "geo880_648", "query": "What state has the capital Salem ?", "python": "State:\n    salem_city = geo_model.find_city(\"salem\")\n    return salem_city.state", "python_oneline": "State:\n    return geo_model.find_city(\"salem\").state", "python_multiline": "State:\n    salem_city = geo_model.find_city(\"salem\")\n    return salem_city.state", "python_multiline_discarded": "State:\n    salem_city = geo_model.find_city(\"salem\")\n    state = salem_city.state\n    return state", "python_oneline_discarded": "State:\n    return geo_model.find_city(\"salem\").state"}
{"qid": "geo880_649", "query": "What state has the city Flint ?", "python": "State:\n    flint_city = geo_model.find_city(\"flint\")\n    return flint_city.state", "python_oneline": "State:\n    return geo_model.find_city(\"flint\").state", "python_multiline": "State:\n    flint_city = geo_model.find_city(\"flint\")\n    return flint_city.state", "python_multiline_discarded": "State:\n    flint_city = geo_model.find_city(\"flint\")\n    state = flint_city.state\n    return state", "python_oneline_discarded": "State:\n    return geo_model.find_city(\"flint\").state"}
{"qid": "geo880_650", "query": "What state has the city with the largest population ?", "python": "State:\n    largest_city = max(geo_model.cities, key=lambda x: x.population)\n    return largest_city.state"}
{"qid": "geo880_651", "query": "What state has the city with the most population ?", "python": "State:\n    most_populous_city = max(geo_model.cities, key=lambda x: x.population)\n    return most_populous_city.state"}
{"qid": "geo880_652", "query": "What state has the greatest population density ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_653", "query": "What state has the highest elevation ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.high_point.elevation)"}
{"qid": "geo880_654", "query": "What state has the highest population ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_655", "query": "What state has the highest population density ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_656", "query": "What state has the largest area ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.area)"}
{"qid": "geo880_657", "query": "What state has the largest capital ?", "python": "State:\n    capitals = [c for c in geo_model.cities if c.is_capital]\n    largest_capital = max(capitals, key=lambda x: x.size)\n    return largest_capital.state"}
{"qid": "geo880_658", "query": "What state has the largest city ?", "python": "State:\n    largest_city = max(geo_model.cities, key=lambda x: x.population)\n    return largest_city.state"}
{"qid": "geo880_659", "query": "What state has the largest population ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_660", "query": "What state has the largest population density ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_661", "query": "What state has the largest urban population ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_662", "query": "What state has the least population density ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_664", "query": "What state has the lowest population density ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_665", "query": "What state has the most cities ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len(x.cities))"}
{"qid": "geo880_666", "query": "What state has the most major cities ?", "python": "State:\n    states_with_major_cities = [s for s in geo_model.states if any(c.is_major for c in s.cities)]\n    return max(states_with_major_cities, key=lambda x: len([c for c in x.cities if c.is_major]))"}
{"qid": "geo880_667", "query": "What state has the most major rivers running through it ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len([r for r in x.rivers if r.is_major]))"}
{"qid": "geo880_668", "query": "What state has the most people ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_669", "query": "What state has the most rivers ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))"}
{"qid": "geo880_670", "query": "What state has the most rivers running through it ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))"}
{"qid": "geo880_672", "query": "What state has the smallest area ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.area)"}
{"qid": "geo880_673", "query": "What state has the smallest capital ?", "python": "State:\n    capitals = [s.capital for s in geo_model.states if s.capital is not None]\n    return min(capitals, key=lambda x: x.size).state"}
{"qid": "geo880_674", "query": "What state has the smallest population ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_675", "query": "What state has the smallest population density ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_676", "query": "What state has the smallest urban population ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_677", "query": "What state has the sparsest population density ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_678", "query": "What state is Austin in ?", "python": "State:\n    austin_city = geo_model.find_city(\"austin\")\n    return austin_city.state"}
{"qid": "geo880_679", "query": "What state is Austin the capital of ?", "python": "State:\n    austin_city = geo_model.find_city(\"austin\")\n    return austin_city.state"}
{"qid": "geo880_680", "query": "What state is Boston in ?", "python": "State:\n    boston_city = geo_model.find_city('boston')\n    return boston_city.state"}
{"qid": "geo880_681", "query": "What state is Columbus the capital of ?", "python": "State:\n    columbus_city = [c for c in geo_model.cities if c.name == \"Columbus\" and c.is_capital]\n    return columbus_city[0].state", "python_oneline": "State:\n    return [c.state for c in geo_model.cities if c.name == \"Columbus\" and c.is_capital][0]", "python_multiline": "State:\n    columbus_city = [c for c in geo_model.cities if c.name == \"Columbus\" and c.is_capital]\n    return columbus_city[0].state", "python_multiline_discarded": "State:\n    columbus_city = [c for c in geo_model.cities if c.name == \"Columbus\" and c.is_capital]\n    state = columbus_city[0].state\n    return state", "python_oneline_discarded": "State:\n    return [c.state for c in geo_model.cities if c.name == \"Columbus\" and c.is_capital][0]"}
{"qid": "geo880_682", "query": "What state is Dallas in ?", "python": "State:\n    dallas_city = geo_model.find_city('dallas')\n    return dallas_city.state", "python_oneline": "State:\n    return geo_model.find_city('dallas').state", "python_multiline": "State:\n    dallas_city = geo_model.find_city('dallas')\n    return dallas_city.state", "python_multiline_discarded": "State:\n    dallas_city = geo_model.find_city('dallas')\n    state = dallas_city.state\n    return state", "python_oneline_discarded": "State:\n    return geo_model.find_city('dallas').state"}
{"qid": "geo880_683", "query": "What state is Des Moines located in ?", "python": "State:\n    des_moines_city = geo_model.find_city('des moines')\n    return des_moines_city.state"}
{"qid": "geo880_684", "query": "What state is Miami in ?", "python": "State:\n    miami_city = geo_model.find_city('miami')\n    return miami_city.state"}
{"qid": "geo880_685", "query": "What state is Pittsburgh in ?", "python": "State:\n    pittsburgh_city = geo_model.find_city(\"pittsburgh\")\n    return pittsburgh_city.state"}
{"qid": "geo880_686", "query": "What state is the biggest ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.size)"}
{"qid": "geo880_687", "query": "What state is the largest in population ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_688", "query": "What state is the state with the most rivers ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))"}
{"qid": "geo880_689", "query": "What state that borders Texas has the highest population ?", "python": "State:\n    states_bordering_texas = geo_model.find_state(\"texas\").next_to\n    return max(states_bordering_texas, key=lambda x: x.population)"}
{"qid": "geo880_690", "query": "What state that borders Texas is the largest ?", "python": "State:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.next_to, key=lambda x: x.area)"}
{"qid": "geo880_691", "query": "What state which the Mississippi runs through has the largest population ?", "python": "State:\n    states_traversed_by_mississippi = [s for s in geo_model.states if geo_model.find_river(\"mississippi\") in s.rivers]\n    return max(states_traversed_by_mississippi, key=lambda x: x.population)"}
{"qid": "geo880_692", "query": "What states are next to Arizona ?", "python": "List[State]:\n    arizona_state = geo_model.find_state('arizona')\n    return arizona_state.next_to"}
{"qid": "geo880_693", "query": "What states are next to Texas ?", "python": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.next_to", "python_oneline": "List[State]:\n    return geo_model.find_state('texas').next_to", "python_multiline": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.next_to", "python_multiline_discarded": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    next_to_states = texas_state.next_to\n    return next_to_states", "python_oneline_discarded": "List[State]:\n    return geo_model.find_state('texas').next_to"}
{"qid": "geo880_695", "query": "What states border Alaska ?", "python": "List[State]:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return alaska_state.next_to", "python_oneline": "List[State]:\n    return geo_model.find_state(\"alaska\").next_to", "python_multiline": "List[State]:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return alaska_state.next_to", "python_multiline_discarded": "List[State]:\n    alaska_state = geo_model.find_state(\"alaska\")\n    next_to_states = alaska_state.next_to\n    return next_to_states", "python_oneline_discarded": "List[State]:\n    return geo_model.find_state(\"alaska\").next_to"}
{"qid": "geo880_696", "query": "What states border Arkansas ?", "python": "List[State]:\n    return geo_model.find_state(\"arkansas\").next_to"}
{"qid": "geo880_697", "query": "What states border Delaware ?", "python": "List[State]:\n    delaware_state = geo_model.find_state(\"delaware\")\n    return delaware_state.next_to"}
{"qid": "geo880_698", "query": "What states border Florida ?", "python": "List[State]:\n    florida_state = geo_model.find_state(\"florida\")\n    return florida_state.next_to"}
{"qid": "geo880_699", "query": "What states border Georgia ?", "python": "List[State]:\n    georgia_state = geo_model.find_state(\"georgia\")\n    return georgia_state.next_to"}
{"qid": "geo880_700", "query": "What states border Hawaii ?", "python": "List[State]:\n    hawaii_state = geo_model.find_state(\"hawaii\")\n    return hawaii_state.next_to"}
{"qid": "geo880_701", "query": "What states border Indiana ?", "python": "List[State]:\n    return geo_model.find_state(\"indiana\").next_to"}
{"qid": "geo880_702", "query": "What states border Kentucky ?", "python": "List[State]:\n    kentucky_state = geo_model.find_state(\"kentucky\")\n    return kentucky_state.next_to"}
{"qid": "geo880_703", "query": "What states border Michigan ?", "python": "List[State]:\n    michigan_state = geo_model.find_state(\"michigan\")\n    return michigan_state.next_to"}
{"qid": "geo880_704", "query": "What states border Missouri ?", "python": "List[State]:\n    missouri_state = geo_model.find_state(\"missouri\")\n    return missouri_state.next_to"}
{"qid": "geo880_705", "query": "What states border Montana ?", "python": "List[State]:\n    montana_state = geo_model.find_state(\"montana\")\n    return montana_state.next_to"}
{"qid": "geo880_706", "query": "What states border New Hampshire ?", "python": "List[State]:\n    return geo_model.find_state(\"new hampshire\").next_to", "python_oneline": "List[State]:\n    return geo_model.find_state(\"new hampshire\").next_to", "python_multiline": "List[State]:\n    state = geo_model.find_state(\"new hampshire\")\n    next_to = state.next_to\n    return next_to", "python_multiline_discarded": "List[State]:\n    state = geo_model.find_state(\"new hampshire\")\n    next_to = state.next_to\n    return next_to", "python_oneline_discarded": "List[State]:\n    return geo_model.find_state(\"new hampshire\").next_to"}
{"qid": "geo880_707", "query": "What states border New Jersey ?", "python": "List[State]:\n    new_jersey_state = geo_model.find_state(\"new jersey\")\n    return new_jersey_state.next_to"}
{"qid": "geo880_708", "query": "What states border Ohio ?", "python": "List[State]:\n    return geo_model.find_state(\"ohio\").next_to"}
{"qid": "geo880_709", "query": "What states border Rhode Island ?", "python": "List[State]:\n    rhode_island_state = geo_model.find_state(\"rhode island\")\n    return rhode_island_state.next_to"}
{"qid": "geo880_710", "query": "What states border states that border Colorado ?", "python": "List[State]:\n    states_bordering_colorado = geo_model.find_state(\"colorado\").next_to\n    states_bordering_states_bordering_colorado = []\n    for state in states_bordering_colorado:\n        states_bordering_states_bordering_colorado.extend(state.next_to)\n    return states_bordering_states_bordering_colorado"}
{"qid": "geo880_711", "query": "What states border states that border Mississippi ?", "python": "List[State]:\n    states_bordering_mississippi = geo_model.find_state(\"mississippi\").next_to\n    states_bordering_states_bordering_mississippi = []\n    for state in states_bordering_mississippi:\n        for bordering_state in state.next_to:\n            if bordering_state not in states_bordering_states_bordering_mississippi:\n                states_bordering_states_bordering_mississippi.append(bordering_state)\n    return states_bordering_states_bordering_mississippi"}
{"qid": "geo880_712", "query": "What states border states that border states that border Florida ?", "python": "List[State]:\n    florida_state = geo_model.find_state(\"florida\")\n    states_bordering_florida = florida_state.next_to\n    states_bordering_states_bordering_florida = [\n        state for state in geo_model.states\n        if any(s in states_bordering_florida for s in state.next_to)\n    ]\n    states_bordering_states_bordering_states_bordering_florida = [\n        state for state in geo_model.states\n        if any(s in states_bordering_states_bordering_florida for s in state.next_to)\n    ]\n    return states_bordering_states_bordering_states_bordering_florida"}
{"qid": "geo880_713", "query": "What states border states that border states that border states that border Texas ?", "python": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    bordering_states = texas_state.next_to\n    states_to_check = bordering_states\n    for _ in range(3):\n        new_states_to_check = []\n        for state in states_to_check:\n            new_states_to_check.extend(state.next_to)\n        states_to_check = new_states_to_check\n    return states_to_check"}
{"qid": "geo880_714", "query": "What states border states that border the state with the largest population ?", "python": "List[State]:\n    states_with_largest_population = max(geo_model.states, key=lambda x: x.population)\n    states_bordering_largest_population = states_with_largest_population.next_to\n    states_bordering_states_bordering_largest_population = [\n        state for state in geo_model.states\n        if any(s in states_bordering_largest_population for s in state.next_to)\n    ]\n    return states_bordering_states_bordering_largest_population"}
{"qid": "geo880_715", "query": "What states border states that the Mississippi runs through ?", "python": "List[State]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    states_traversed_by_mississippi = mississippi_river.traverses\n    states_bordering_states_traversed_by_mississippi = [\n        state for state in geo_model.states\n        if any(s in states_traversed_by_mississippi for s in state.next_to)\n    ]\n    return states_bordering_states_traversed_by_mississippi"}
{"qid": "geo880_716", "query": "What states border states that the Ohio runs through ?", "python": "List[State]:\n    states_traversed_by_ohio = [\n        state for state in geo_model.states\n        if geo_model.find_river(\"ohio\") in state.rivers\n    ]\n    states_bordering_states_traversed_by_ohio = [\n        state for state in geo_model.states\n        if any(s in state.next_to for s in states_traversed_by_ohio)\n    ]\n    return states_bordering_states_traversed_by_ohio"}
{"qid": "geo880_717", "query": "What states border states which the Mississippi runs through ?", "python": "List[State]:\n    states_through_mississippi = [s for s in geo_model.states if geo_model.find_river(\"mississippi\") in s.rivers]\n    bordering_states = []\n    for state in states_through_mississippi:\n        bordering_states.extend(state.next_to)\n    return bordering_states"}
{"qid": "geo880_718", "query": "What states border Texas ?", "python": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.next_to"}
{"qid": "geo880_719", "query": "What states border Texas and have a major river ?", "python": "List[State]:\n    texas_state = geo_model.find_state(\"texas\")\n    states_bordering_texas = texas_state.next_to\n    major_rivers = [r for r in geo_model.rivers if r.is_major]\n    return [s for s in states_bordering_texas if any(r for r in major_rivers if s in r.traverses)]"}
{"qid": "geo880_721", "query": "What states border the most populous state ?", "python": "List[State]:\n    most_populous_state = max(geo_model.states, key=lambda x: x.population)\n    return most_populous_state.next_to"}
{"qid": "geo880_722", "query": "What states border the state that borders the most states ?", "python": "List[State]:\n    most_bordering_state = max(geo_model.states, key=lambda x: len(x.next_to))\n    return most_bordering_state.next_to"}
{"qid": "geo880_723", "query": "What states border the state with the most cities ?", "python": "List[State]:\n    most_cities_state = max(geo_model.states, key=lambda x: len(x.cities))\n    return most_cities_state.next_to"}
{"qid": "geo880_724", "query": "What states border the state with the most major cities ?", "python": "List[State]:\n    state_with_most_major_cities = max(geo_model.states, key=lambda x: len([c for c in x.cities if c.is_major]))\n    return state_with_most_major_cities.next_to"}
{"qid": "geo880_725", "query": "What states border the state with the smallest area ?", "python": "List[State]:\n    smallest_state = min(geo_model.states, key=lambda x: x.area)\n    return smallest_state.next_to"}
{"qid": "geo880_726", "query": "What states border the states with the most cities ?", "python": "List[State]:\n    state_with_most_cities = max(geo_model.states, key=lambda x: len(x.cities))\n    return state_with_most_cities.next_to"}
{"qid": "geo880_727", "query": "What states border Wisconsin ?", "python": "List[State]:\n    return geo_model.find_state(\"wisconsin\").next_to"}
{"qid": "geo880_728", "query": "What state 's capital is Dover ?", "python": "State:\n    dover_city = geo_model.find_city(\"dover\")\n    return dover_city.state"}
{"qid": "geo880_729", "query": "What states contain at least one major rivers ?", "python": "List[State]:\n    states_with_major_rivers = []\n    for state in geo_model.states:\n        for river in state.rivers:\n            if river.is_major:\n                states_with_major_rivers.append(state)\n                break\n    return states_with_major_rivers"}
{"qid": "geo880_730", "query": "What states does the Colorado river run through ?", "python": "List[State]:\n    colorado_river = geo_model.find_river(\"colorado\")\n    return colorado_river.traverses"}
{"qid": "geo880_731", "query": "What states does the Delaware river run through ?", "python": "List[State]:\n    delaware_river = geo_model.find_river(\"delaware\")\n    return delaware_river.traverses"}
{"qid": "geo880_732", "query": "What states does the Mississippi river run through ?", "python": "List[State]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.traverses"}
{"qid": "geo880_733", "query": "What states does the Mississippi run through ?", "python": "List[State]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.traverses"}
{"qid": "geo880_734", "query": "What states does the Missouri river run through ?", "python": "List[State]:\n    missouri_river = geo_model.find_river(\"missouri\")\n    return missouri_river.traverses", "python_oneline": "List[State]:\n    return geo_model.find_river(\"missouri\").traverses", "python_multiline": "List[State]:\n    missouri_river = geo_model.find_river(\"missouri\")\n    return missouri_river.traverses", "python_multiline_discarded": "List[State]:\n    missouri_river = geo_model.find_river(\"missouri\")\n    return missouri_river.traverses", "python_oneline_discarded": "List[State]:\n    return geo_model.find_river(\"missouri\").traverses"}
{"qid": "geo880_735", "query": "What states does the Missouri run through ?", "python": "List[State]:\n    missouri_river = geo_model.find_river(\"missouri\")\n    return missouri_river.traverses"}
{"qid": "geo880_736", "query": "What states does the Ohio river go through ?", "python": "List[State]:\n    ohio_river = geo_model.find_river(\"ohio\")\n    return ohio_river.traverses"}
{"qid": "geo880_737", "query": "What states does the Ohio river run through ?", "python": "List[State]:\n    ohio_river = geo_model.find_river(\"ohio\")\n    return ohio_river.traverses"}
{"qid": "geo880_738", "query": "What states does the shortest river run through ?", "python": "List[State]:\n    shortest_river = min(geo_model.rivers, key=lambda x: x.length)\n    return shortest_river.traverses", "python_oneline": "List[State]:\n    return min(geo_model.rivers, key=lambda x: x.length).traverses", "python_multiline": "List[State]:\n    shortest_river = min(geo_model.rivers, key=lambda x: x.length)\n    return shortest_river.traverses", "python_multiline_discarded": "List[State]:\n    shortest_river = min(geo_model.rivers, key=lambda x: x.length)\n    return shortest_river.traverses", "python_oneline_discarded": "List[State]:\n    return min(geo_model.rivers, key=lambda x: x.length).traverses"}
{"qid": "geo880_739", "query": "What states have a capital that is the highest point in the state ?", "python": "List[State]:\n    return [s for s in geo_model.states if s.capital == s.high_point]"}
{"qid": "geo880_740", "query": "What states have a city named Austin ?", "python": "List[State]:\n    austin_cities = [c for c in geo_model.cities if c.name == \"austin\"]\n    return [c.state for c in austin_cities]"}
{"qid": "geo880_741", "query": "What states have cities named Austin ?", "python": "List[State]:\n    austin_cities = [c for c in geo_model.cities if c.name == 'austin']\n    return [c.state for c in austin_cities]"}
{"qid": "geo880_742", "query": "What states have cities named Dallas ?", "python": "List[State]:\n    dallas_cities = [c for c in geo_model.cities if c.name == \"Dallas\"]\n    return [c.state for c in dallas_cities]"}
{"qid": "geo880_743", "query": "What states have cities named Plano ?", "python": "List[State]:\n    plano_cities = [c for c in geo_model.cities if c.name == \"plano\"]\n    return [c.state for c in plano_cities]"}
{"qid": "geo880_744", "query": "What states have cities named Portland ?", "python": "List[State]:\n    portland_cities = [c for c in geo_model.cities if c.name == \"Portland\"]\n    return [c.state for c in portland_cities]"}
{"qid": "geo880_745", "query": "What states have cities named Rochester ?", "python": "List[State]:\n    rochester_cities = [c for c in geo_model.cities if c.name == \"rochester\"]\n    return [c.state for c in rochester_cities]"}
{"qid": "geo880_746", "query": "What states have cities named Salt Lake City ?", "python": "List[State]:\n    salt_lake_cities = [c for c in geo_model.cities if c.name == \"Salt Lake City\"]\n    return [c.state for c in salt_lake_cities]"}
{"qid": "geo880_747", "query": "What states have no bordering state ?", "python": "List[State]:\n    return [s for s in geo_model.states if len(s.next_to) == 0]", "python_oneline": "List[State]:\n    return [s for s in geo_model.states if len(s.next_to) == 0]", "python_multiline": "List[State]:\n    result = []\n    for s in geo_model.states:\n        if len(s.next_to) == 0:\n            result.append(s)\n    return result", "python_multiline_discarded": "List[State]:\n    result = []\n    for s in geo_model.states:\n        if len(s.next_to) == 0:\n            result.append(s)\n    return result", "python_oneline_discarded": "List[State]:\n    return list(filter(lambda s: len(s.next_to) == 0, geo_model.states))"}
{"qid": "geo880_748", "query": "What states have rivers named Colorado ?", "python": "List[State]:\n    colorado_rivers = [r for r in geo_model.rivers if r.name == \"colorado\"]\n    return [state for river in colorado_rivers for state in river.traverses]"}
{"qid": "geo880_749", "query": "What states have rivers running through them ?", "python": "List[State]:\n    return [s for s in geo_model.states if s.rivers]"}
{"qid": "geo880_750", "query": "What states have towns named Springfield ?", "python": "List[State]:\n    springfield_towns = [c for s in geo_model.states for c in s.cities if c.name == \"springfield\"]\n    return [c.state for c in springfield_towns]"}
{"qid": "geo880_751", "query": "What state 's high point is higher than that of Colorado ?", "python": "List[State]:\n    colorado_state = geo_model.find_state('colorado')\n    return [s for s in geo_model.states if s.high_point.elevation > colorado_state.high_point.elevation]"}
{"qid": "geo880_752", "query": "What states in the United States have a city of Springfield ?", "python": "List[State]:\n    springfield_cities = [c for c in geo_model.cities if c.name == \"springfield\"]\n    return [c.state for c in springfield_cities]"}
{"qid": "geo880_753", "query": "What states neighbor Maine ?", "python": "List[State]:\n    return geo_model.find_state(\"maine\").next_to"}
{"qid": "geo880_754", "query": "What states surround Kentucky ?", "python": "List[State]:\n    return geo_model.find_state(\"kentucky\").next_to"}
{"qid": "geo880_755", "query": "What Texas city has the largest population ?", "python": "City:\n    texas_state = geo_model.find_state('texas')\n    return max(texas_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_756", "query": "What 's the largest city ?", "python": "City:\n    return max(geo_model.cities, key=lambda x: x.size)"}
{"qid": "geo880_757", "query": "Where are mountains ?", "python": "List[Union[State, Country]]:\n    states = set([m.state for m in geo_model.mountains])\n    countries = set([m.state.country for m in geo_model.mountains])\n    return list(states) + list(countries)"}
{"qid": "geo880_758", "query": "Where is Austin ?", "python": "List[Union[State, Country]]:\n    city = geo_model.find_city(\"dallas\")\n    return [city.state, city.country]"}
{"qid": "geo880_759", "query": "Where is Baton Rouge ?", "python": "List[Union[State, Country]]:\n    city = geo_model.find_city(\"baton rouge\")\n    return [city.state, city.country]"}
{"qid": "geo880_760", "query": "Where is Dallas ?", "python": "List[Union[State, Country]]:\n    return [geo_model.find_city(\"dallas\").state, geo_model.find_city(\"dallas\").country]"}
{"qid": "geo880_763", "query": "Where is Indianapolis ?", "python": "List[Union[State, Country]]:\n    indianapolis_city = geo_model.find_city(\"indianapolis\")\n    return [indianapolis_city.state, indianapolis_city.country]", "python_oneline": "List[Union[State, Country]]:\n    return [geo_model.find_city(\"indianapolis\").state, geo_model.find_city(\"indianapolis\").country]", "python_multiline": "List[Union[State, Country]]:\n    indianapolis_city = geo_model.find_city(\"indianapolis\")\n    return [indianapolis_city.state, indianapolis_city.country]", "python_multiline_discarded": "List[Union[State, Country]]:\n    indianapolis_city = geo_model.find_city(\"indianapolis\")\n    state = indianapolis_city.state\n    country = indianapolis_city.country\n    return [state, country]", "python_oneline_discarded": "List[Union[State, Country]]:\n    return [geo_model.find_city(\"indianapolis\").state, geo_model.find_city(\"indianapolis\").country]"}
{"qid": "geo880_764", "query": "Where is Massachusetts ?", "python": "Country:\n    massachusetts_state = geo_model.find_state('massachusetts')\n    return massachusetts_state.country"}
{"qid": "geo880_765", "query": "Where is Mount Whitney ?", "python": "List[Union[State, Country]]:\n    city = geo_model.find_place(\"mount whitney\")\n    return [city.state, city.state.country]"}
{"qid": "geo880_766", "query": "Where is Mount Whitney located ?", "python": "List[Union[State, Country]]:\n    mountain = geo_model.find_mountain(\"whitney\")\n    return [mountain.state, mountain.state.country]"}
{"qid": "geo880_767", "query": "Where is New Hampshire ?", "python": "Country:\n    return geo_model.find_state(\"new hampshire\").country"}
{"qid": "geo880_768", "query": "Where is New Orleans ?", "python": "List[Union[State, Country]]:\n    city = geo_model.find_city(\"new orleans\")\n    return [city.state, city.country]"}
{"qid": "geo880_770", "query": "Where is San Diego ?", "python": "List[Union[State, Country]]:\n    city = geo_model.find_city(\"san diego\")\n    return [city.state, city.country]"}
{"qid": "geo880_774", "query": "Where is the Chattahoochee river ?", "python": "List[Union[State,Country]]:\n    states = geo_model.find_river(\"chattahoochee\").traverses\n    return states + list(set([s.country for s in states]))\n"}
{"qid": "geo880_775", "query": "Where is the highest mountain of the United States ?", "python": "Mountain:\n    mountains_in_usa = geo_model.find_country(\"usa\").mountains\n    return max(mountains_in_usa, key=lambda x: x.elevation)"}
{"qid": "geo880_776", "query": "Where is the highest point in Hawaii ?", "python": "Place:\n    hawaii_state = geo_model.find_state('hawaii')\n    return hawaii_state.high_point"}
{"qid": "geo880_777", "query": "Where is the highest point in Montana ?", "python": "Place:\n    montana_state = geo_model.find_state(\"montana\")\n    return montana_state.high_point"}
{"qid": "geo880_778", "query": "Where is the lowest point in Maryland ?", "python": "Place:\n    maryland_state = geo_model.find_state(\"maryland\")\n    return maryland_state.low_point"}
{"qid": "geo880_779", "query": "Where is the lowest point in the US ?", "python": "Place:\n    lowest_point = min(geo_model.places, key=lambda x: x.elevation)\n    return lowest_point"}
{"qid": "geo880_780", "query": "Where is the lowest spot in Iowa ?", "python": "Place:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return iowa_state.low_point"}
{"qid": "geo880_781", "query": "Where is the most populated area of New Mexico ?", "python": "City:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    return max(new_mexico_state.cities, key=lambda x: x.population)"}
{"qid": "geo880_783", "query": "Which capitals are in the states that border Texas ?", "python": "List[City]:\n    texas_state = geo_model.find_state('texas')\n    bordering_states = texas_state.next_to\n    return [s.capital for s in bordering_states if s.capital]"}
{"qid": "geo880_785", "query": "Which city in California has the largest population ?", "python": "City:\n    cities_in_california = geo_model.find_state(\"california\").cities\n    return max(cities_in_california, key=lambda x: x.population)"}
{"qid": "geo880_787", "query": "Which is the highest peak not in Alaska ?", "python": "Mountain:\n    mountains_not_in_alaska = [m for m in geo_model.mountains if m.state != geo_model.find_state(\"alaska\")]\n    return max(mountains_not_in_alaska, key=lambda x: x.elevation)"}
{"qid": "geo880_788", "query": "Which is the longest river in USA ?", "python": "River:\n    return max(geo_model.rivers, key=lambda x: x.length)"}
{"qid": "geo880_789", "query": "Which is the lowest point of the states that the Mississippi runs through ?", "python": "Place:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return min(mississippi_river.traverses, key=lambda x: x.low_point.elevation).low_point", "python_oneline": "Place:\n    return min(geo_model.find_river(\"mississippi\").traverses, key=lambda x: x.low_point.elevation).low_point", "python_multiline": "Place:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return min(mississippi_river.traverses, key=lambda x: x.low_point.elevation).low_point", "python_multiline_discarded": "Place:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    lowest_point = min(mississippi_river.traverses, key=lambda x: x.low_point.elevation)\n    return lowest_point.low_point", "python_oneline_discarded": "Place:\n    return min(geo_model.find_river(\"mississippi\").traverses, key=lambda x: x.low_point.elevation).low_point"}
{"qid": "geo880_790", "query": "Which is the shortest river ?", "python": "River:\n    return min(geo_model.rivers, key=lambda x: x.length)"}
{"qid": "geo880_791", "query": "Which is the smallest state ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.size)"}
{"qid": "geo880_792", "query": "Which of the states bordering Pennsylvania has the largest population ?", "python": "State:\n    pennsylvania_state = geo_model.find_state('pennsylvania')\n    return max(pennsylvania_state.next_to, key=lambda x: x.population)"}
{"qid": "geo880_793", "query": "Which river goes through the most states ?", "python": "River:\n    return max(geo_model.rivers, key=lambda x: len(x.traverses))"}
{"qid": "geo880_794", "query": "Which river runs through most states ?", "python": "River:\n    rivers = geo_model.rivers\n    return max(rivers, key=lambda x: len(x.traverses))"}
{"qid": "geo880_795", "query": "Which river runs through the most states ?", "python": "River:\n    rivers = geo_model.rivers\n    return max(rivers, key=lambda x: len(x.traverses))"}
{"qid": "geo880_796", "query": "Which river traverses most states ?", "python": "River:\n    return max(geo_model.rivers, key=lambda x: len(x.traverses))"}
{"qid": "geo880_797", "query": "Which rivers are in Alaska ?", "python": "List[River]:\n    alaska_state = geo_model.find_state('alaska')\n    return alaska_state.rivers"}
{"qid": "geo880_798", "query": "Which rivers do not run through Texas ?", "python": "List[River]:\n    texas_state = geo_model.find_state(\"texas\")\n    texas_rivers = texas_state.rivers\n    all_rivers = geo_model.rivers\n    return [r for r in all_rivers if r not in texas_rivers]"}
{"qid": "geo880_799", "query": "Which rivers do not run through USA ?", "python": "List[River]:\n    rivers_not_in_usa = [r for r in geo_model.rivers if not any(s.country.name == \"usa\" for s in r.traverses)]\n    return rivers_not_in_usa"}
{"qid": "geo880_800", "query": "Which rivers flow through Alaska ?", "python": "List[River]:\n    alaska_state = geo_model.find_state('alaska')\n    return alaska_state.rivers"}
{"qid": "geo880_801", "query": "Which rivers run through states bordering New Mexico ?", "python": "List[River]:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    bordering_states = new_mexico_state.next_to\n    rivers = []\n    for state in bordering_states:\n        rivers.extend(state.rivers)\n    return rivers", "python_oneline": "List[River]:\n    return [river for state in geo_model.find_state(\"new mexico\").next_to for river in state.rivers]", "python_multiline": "List[River]:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    bordering_states = new_mexico_state.next_to\n    rivers = []\n    for state in bordering_states:\n        rivers.extend(state.rivers)\n    return rivers", "python_multiline_discarded": "List[River]:\n    new_mexico_state = geo_model.find_state(\"new mexico\")\n    bordering_states = new_mexico_state.next_to\n    rivers = []\n    \n    for state in bordering_states:\n        rivers.extend(state.rivers)\n    \n    return rivers", "python_oneline_discarded": "List[River]:\n    return [river for state in geo_model.find_state(\"new mexico\").next_to for river in state.rivers]"}
{"qid": "geo880_802", "query": "Which rivers run through states that border the state with the capital Austin ?", "python": "State:\n    state = [s for s in geo_model.states if s.capital and s.capital.name == \"austin\"][0]\n    return [r for s in state.next_to for r in s.rivers]"}
{"qid": "geo880_804", "query": "Which rivers run through the state with the largest city in the US ?", "python": "List[River]:\n    largest_city = max(geo_model.cities, key=lambda x: x.size)\n    state_with_largest_city = largest_city.state\n    return state_with_largest_city.rivers"}
{"qid": "geo880_805", "query": "Which rivers run through the state with the lowest elevation in the USA ?", "python": "List[River]:\n    state_with_lowest_elevation = min(geo_model.states, key=lambda x: x.low_point.elevation)\n    return state_with_lowest_elevation.rivers"}
{"qid": "geo880_806", "query": "Which state border Kentucky ?", "python": "List[State]:\n    kentucky_state = geo_model.find_state(\"kentucky\")\n    return kentucky_state.next_to"}
{"qid": "geo880_807", "query": "Which state borders Florida ?", "python": "List[State]:\n    return geo_model.find_state(\"florida\").next_to"}
{"qid": "geo880_808", "query": "Which state borders Hawaii ?", "python": "List[State]:\n    hawaii_state = geo_model.find_state(\"hawaii\")\n    return hawaii_state.next_to"}
{"qid": "geo880_809", "query": "Which state borders most states ?", "python": "State:\n    max_bordering_states = 0\n    state_with_most_bordering_states = None\n    for state in geo_model.states:\n        num_bordering_states = len(state.next_to)\n        if num_bordering_states > max_bordering_states:\n            max_bordering_states = num_bordering_states\n            state_with_most_bordering_states = state\n    return state_with_most_bordering_states"}
{"qid": "geo880_810", "query": "Which state borders the most states ?", "python": "State:\n    states_with_most_borders = max(geo_model.states, key=lambda x: len(x.next_to))\n    return states_with_most_borders"}
{"qid": "geo880_811", "query": "Which state capital has the smallest population ?", "python": "City:\n    capitals = [s.capital for s in geo_model.states if s.capital]\n    return min(capitals, key=lambda x: x.population)"}
{"qid": "geo880_812", "query": "Which state contains most rivers ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))"}
{"qid": "geo880_813", "query": "Which state has the biggest population ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_814", "query": "Which state has the greatest density ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_815", "query": "Which state has the greatest population ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_816", "query": "Which state has the highest elevation ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.high_point.elevation)", "python_oneline": "State:\n    return max(geo_model.states, key=lambda x: x.high_point.elevation)", "python_multiline": "State:\n    states = geo_model.states\n    highest_state = max(states, key=lambda x: x.high_point.elevation)\n    return highest_state", "python_multiline_discarded": "State:\n    states = geo_model.states\n    highest_state = max(states, key=lambda x: x.high_point.elevation)\n    return highest_state", "python_oneline_discarded": "State:\n    return max(geo_model.states, key=lambda x: x.high_point.elevation)"}
{"qid": "geo880_817", "query": "Which state has the highest peak in the country ?", "python": "State:\n    highest_peak = max(geo_model.mountains, key=lambda x: x.elevation)\n    return highest_peak.state"}
{"qid": "geo880_818", "query": "Which state has the highest point ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.high_point.elevation)"}
{"qid": "geo880_819", "query": "Which state has the highest population density ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_820", "query": "Which state has the largest city ?", "python": "State:\n    largest_city = max(geo_model.cities, key=lambda x: x.population)\n    return largest_city.state"}
{"qid": "geo880_821", "query": "Which state has the largest density ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_822", "query": "Which state has the least population density ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_824", "query": "Which state has the lowest elevation ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.low_point.elevation)"}
{"qid": "geo880_826", "query": "Which state has the lowest population density ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_827", "query": "Which state has the most major cities ?", "python": "State:\n    states_with_major_cities = [s for s in geo_model.states if any(c.is_major for c in s.cities)]\n    return max(states_with_major_cities, key=lambda x: len([c for c in x.cities if c.is_major]))"}
{"qid": "geo880_828", "query": "Which state has the most major rivers ?", "python": "State:\n    states_with_major_rivers = [s for s in geo_model.states if any(r.is_major for r in s.rivers)]\n    return max(states_with_major_rivers, key=lambda x: len(x.rivers))"}
{"qid": "geo880_829", "query": "Which state has the most major rivers running through it ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len([r for r in x.rivers if r.is_major]))"}
{"qid": "geo880_830", "query": "Which state has the most people ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)", "python_oneline": "State:\n    return max(geo_model.states, key=lambda x: x.population)", "python_multiline": "State:\n    return max(geo_model.states, key=lambda x: x.population)", "python_multiline_discarded": "State:\n    return max(geo_model.states, key=lambda x: x.population)", "python_oneline_discarded": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_831", "query": "Which state has the most population ?", "python": "State:\n    return max(geo_model.states, key=lambda x: x.population)"}
{"qid": "geo880_832", "query": "Which state has the most rivers ?", "python": "State:\n    states_with_rivers = [s for s in geo_model.states if s.rivers]\n    return max(states_with_rivers, key=lambda x: len(x.rivers))"}
{"qid": "geo880_833", "query": "Which state has the most rivers running through it ?", "python": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))", "python_oneline": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))", "python_multiline": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))", "python_multiline_discarded": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))", "python_oneline_discarded": "State:\n    return max(geo_model.states, key=lambda x: len(x.rivers))"}
{"qid": "geo880_834", "query": "Which state has the Red river ?", "python": "List[State]:\n    red_river = geo_model.find_river(\"red\")\n    return red_river.traverses", "python_oneline": "List[State]:\n    return geo_model.find_river(\"red\").traverses", "python_multiline": "List[State]:\n    red_river = geo_model.find_river(\"red\")\n    return red_river.traverses", "python_multiline_discarded": "List[State]:\n    red_river = geo_model.find_river(\"red\")\n    return red_river.traverses", "python_oneline_discarded": "List[State]:\n    return geo_model.find_river(\"red\").traverses"}
{"qid": "geo880_835", "query": "Which state has the smallest area that borders Texas ?", "python": "State:\n    texas_state = geo_model.find_state(\"texas\")\n    states_bordering_texas = texas_state.next_to\n    return min(states_bordering_texas, key=lambda x: x.area)"}
{"qid": "geo880_837", "query": "Which state has the smallest population density ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.density)"}
{"qid": "geo880_838", "query": "Which state has the sparsest population density ?", "python": "State:\n    states = geo_model.states\n    return min(states, key=lambda x: x.density)"}
{"qid": "geo880_839", "query": "Which state is Kalamazoo in ?", "python": "State:\n    kalamazoo_city = geo_model.find_city('kalamazoo')\n    return kalamazoo_city.state", "python_oneline": "State:\n    return geo_model.find_city('kalamazoo').state", "python_multiline": "State:\n    kalamazoo_city = geo_model.find_city('kalamazoo')\n    return kalamazoo_city.state", "python_multiline_discarded": "State:\n    kalamazoo_city = geo_model.find_city('kalamazoo')\n    state = kalamazoo_city.state\n    return state", "python_oneline_discarded": "State:\n    return geo_model.find_city('kalamazoo').state"}
{"qid": "geo880_841", "query": "Which state is the city Denver located in ?", "python": "State:\n    denver_city = geo_model.find_city('denver')\n    return denver_city.state"}
{"qid": "geo880_842", "query": "Which state is the largest city in Montana in ?", "python": "State:\n    largest_city_in_montana = max(geo_model.find_state(\"montana\").cities, key=lambda x: x.size)\n    return largest_city_in_montana.state"}
{"qid": "geo880_843", "query": "Which state is the smallest ?", "python": "State:\n    return min(geo_model.states, key=lambda x: x.size)"}
{"qid": "geo880_844", "query": "Which states adjoin Alabama ?", "python": "List[State]:\n    alabama_state = geo_model.find_state(\"alabama\")\n    return alabama_state.next_to"}
{"qid": "geo880_845", "query": "Which states border Alabama ?", "python": "List[State]:\n    alabama_state = geo_model.find_state(\"alabama\")\n    return alabama_state.next_to"}
{"qid": "geo880_846", "query": "Which states border Alaska ?", "python": "List[State]:\n    alaska_state = geo_model.find_state(\"alaska\")\n    return alaska_state.next_to"}
{"qid": "geo880_847", "query": "Which states border Arizona ?", "python": "List[State]:\n    return geo_model.find_state(\"arizona\").next_to"}
{"qid": "geo880_848", "query": "Which states border Colorado ?", "python": "List[State]:\n    return geo_model.find_state(\"colorado\").next_to"}
{"qid": "geo880_849", "query": "Which states border Hawaii ?", "python": "State:\n    return geo_model.find_state(\"hawaii\").next_to"}
{"qid": "geo880_850", "query": "Which states border Illinois ?", "python": "List[State]:\n    return geo_model.find_state(\"illinois\").next_to"}
{"qid": "geo880_851", "query": "Which states border Iowa ?", "python": "List[State]:\n    iowa_state = geo_model.find_state(\"iowa\")\n    return iowa_state.next_to"}
{"qid": "geo880_852", "query": "Which states border Kentucky ?", "python": "List[State]:\n    return geo_model.find_state(\"kentucky\").next_to", "python_oneline": "List[State]:\n    return geo_model.find_state(\"kentucky\").next_to", "python_multiline": "List[State]:\n    state = geo_model.find_state(\"kentucky\")\n    next_to = state.next_to\n    return next_to", "python_multiline_discarded": "List[State]:\n    state = geo_model.find_state(\"kentucky\")\n    next_to = state.next_to\n    return next_to", "python_oneline_discarded": "List[State]:\n    return geo_model.find_state(\"kentucky\").next_to"}
{"qid": "geo880_853", "query": "Which states border Michigan ?", "python": "List[State]:\n    return geo_model.find_state(\"michigan\").next_to"}
{"qid": "geo880_854", "query": "Which states border New York ?", "python": "List[State]:\n    return geo_model.find_state(\"new york\").next_to", "python_oneline": "List[State]:\n    return geo_model.find_state(\"new york\").next_to", "python_multiline": "List[State]:\n    state = geo_model.find_state(\"new york\")\n    next_to = state.next_to\n    return next_to", "python_multiline_discarded": "List[State]:\n    state = geo_model.find_state(\"new york\")\n    next_to = state.next_to\n    return next_to", "python_oneline_discarded": "List[State]:\n    return [state for state in geo_model.states if \"new york\" in state.next_to]"}
{"qid": "geo880_855", "query": "Which states border no other states ?", "python": "List[State]:\n    return [s for s in geo_model.states if len(s.next_to) == 0]"}
{"qid": "geo880_856", "query": "Which states border South Dakota ?", "python": "List[State]:\n    south_dakota_state = geo_model.find_state(\"south dakota\")\n    return south_dakota_state.next_to", "python_oneline": "List[State]:\n    return geo_model.find_state(\"south dakota\").next_to", "python_multiline": "List[State]:\n    south_dakota_state = geo_model.find_state(\"south dakota\")\n    return south_dakota_state.next_to", "python_multiline_discarded": "List[State]:\n    south_dakota_state = geo_model.find_state(\"south dakota\")\n    next_to_states = south_dakota_state.next_to\n    return next_to_states", "python_oneline_discarded": "List[State]:\n    return geo_model.find_state(\"south dakota\").next_to"}
{"qid": "geo880_857", "query": "Which states border states through which the Mississippi traverses ?", "python": "List[State]:\n    states_traversed_by_mississippi = [\n        state for state in geo_model.states\n        if geo_model.find_river(\"mississippi\") in state.rivers\n    ]\n    states_bordering_states_traversed_by_mississippi = [\n        state for state in geo_model.states\n        if any(s in state.next_to for s in states_traversed_by_mississippi)\n    ]\n    return states_bordering_states_traversed_by_mississippi"}
{"qid": "geo880_858", "query": "Which states border Texas ?", "python": "List[State]:\n    texas_state = geo_model.find_state('texas')\n    return texas_state.next_to"}
{"qid": "geo880_861", "query": "Which states border the state with the smallest area ?", "python": "List[State]:\n    smallest_state = min(geo_model.states, key=lambda x: x.area)\n    return smallest_state.next_to"}
{"qid": "geo880_862", "query": "Which state 's capital city is the largest ?", "python": "State:\n    capitals = [s.capital for s in geo_model.states if s.capital]\n    return max(capitals, key=lambda x: x.size).state"}
{"qid": "geo880_863", "query": "Which states do Colorado river flow through ?", "python": "List[State]:\n    colorado_river = geo_model.find_river(\"colorado\")\n    return colorado_river.traverses"}
{"qid": "geo880_864", "query": "Which states does not border Texas ?", "python": "State:\n    states_not_bordering_texas = []\n    for state in geo_model.states:\n        if \"texas\" not in [s.name for s in state.next_to]:\n            states_not_bordering_texas.append(state)\n    return states_not_bordering_texas"}
{"qid": "geo880_865", "query": "Which states does the Chattahoochee river run through ?", "python": "State:\n    chattahoochee_river = geo_model.find_river(\"chattahoochee\")\n    return chattahoochee_river.traverses"}
{"qid": "geo880_866", "query": "Which states does the Colorado river run through ?", "python": "List[State]:\n    colorado_river = geo_model.find_river(\"colorado\")\n    return colorado_river.traverses"}
{"qid": "geo880_867", "query": "Which states does the longest river cross ?", "python": "List[State]:\n    longest_river = max(geo_model.rivers, key=lambda x: x.length)\n    return longest_river.traverses"}
{"qid": "geo880_868", "query": "Which states does the longest river run through ?", "python": "State:\n    longest_river = max(geo_model.rivers, key=lambda x: x.length)\n    return longest_river.traverses"}
{"qid": "geo880_869", "query": "Which states does the Mississippi river run through ?", "python": "List[State]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.traverses"}
{"qid": "geo880_870", "query": "Which states does the Mississippi run through ?", "python": "List[State]:\n    mississippi_river = geo_model.find_river(\"mississippi\")\n    return mississippi_river.traverses"}
{"qid": "geo880_871", "query": "Which states does the Missouri river pass through ?", "python": "List[State]:\n    missouri_river = geo_model.find_river(\"missouri\")\n    return missouri_river.traverses"}
{"qid": "geo880_872", "query": "Which states does the Missouri river run through ?", "python": "List[State]:\n    missouri_river = geo_model.find_river(\"missouri\")\n    return missouri_river.traverses"}
{"qid": "geo880_873", "query": "Which states have a major city named Austin ?", "python": "List[State]:\n    austin_cities = [c for c in geo_model.cities if c.name == \"Austin\" and c.is_major]\n    return [c.state for c in austin_cities]"}
{"qid": "geo880_874", "query": "Which states have a river ?", "python": "List[State]:\n    return [s for s in geo_model.states if s.rivers]"}
{"qid": "geo880_875", "query": "Which states have cities named Austin ?", "python": "List[State]:\n    austin_cities = [c for c in geo_model.cities if c.name == \"austin\"]\n    return [c.state for c in austin_cities]"}
{"qid": "geo880_876", "query": "Which states have points higher than the highest point in Colorado ?", "python": "List[State]:\n    colorado_state = geo_model.find_state(\"colorado\")\n    highest_point_in_colorado = colorado_state.high_point.elevation\n    states_with_higher_points = [s for s in geo_model.states if s.high_point.elevation > highest_point_in_colorado]\n    return states_with_higher_points", "python_oneline": "List[State]:\n    return [s for s in geo_model.states if s.high_point.elevation > geo_model.find_state(\"colorado\").high_point.elevation]", "python_multiline": "List[State]:\n    colorado_state = geo_model.find_state(\"colorado\")\n    highest_point_in_colorado = colorado_state.high_point.elevation\n    states_with_higher_points = [s for s in geo_model.states if s.high_point.elevation > highest_point_in_colorado]\n    return states_with_higher_points", "python_multiline_discarded": "List[State]:\n    colorado_state = geo_model.find_state(\"colorado\")\n    highest_point_in_colorado = colorado_state.high_point.elevation\n    \n    states_with_higher_points = []\n    for s in geo_model.states:\n        if s.high_point.elevation > highest_point_in_colorado:\n            states_with_higher_points.append(s)\n    \n    return states_with_higher_points", "python_oneline_discarded": "List[State]:\n    return [s for s in geo_model.states if s.high_point.elevation > geo_model.find_state(\"colorado\").high_point.elevation]"}
{"qid": "geo880_877", "query": "Which states have points that are higher than the highest point in Texas ?", "python": "List[State]:\n    texas_high_point = geo_model.find_state(\"texas\").high_point.elevation\n    return [s for s in geo_model.states if s.high_point.elevation > texas_high_point]"}
{"qid": "geo880_878", "query": "Which states lie on the largest river in the United States ?", "python": "List[State]:\n    longest_river = max(geo_model.rivers, key=lambda x: x.length)\n    return longest_river.traverses"}
{"qid": "geo880_879", "query": "Which US city has the highest population density ?", "python": "City:\n    cities_in_usa = [c for c in geo_model.cities if c.country.name == \"USA\"]\n    return max(cities_in_usa, key=lambda x: x.density)"}
