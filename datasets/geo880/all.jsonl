{"query": "Give me the cities in Virginia .", "prolog": "answer(A,(city(A),loc(A,B),const(B,stateid(virginia))))", "funql": "answer(city(loc_2(stateid('virginia'))))", "prolog_ans": "[alexandria,arlington,chesapeake,hampton,lynchburg,'newport news',norfolk,portsmouth,richmond,roanoke,'virginia beach']", "funql_ans": "[cityid(alexandria,va),cityid(arlington,va),cityid(chesapeake,va),cityid(hampton,va),cityid(lynchburg,va),cityid('newport news',va),cityid(norfolk,va),cityid(portsmouth,va),cityid(richmond,va),cityid(roanoke,va),cityid('virginia beach',va)]", "funql_answer_parsed": ["alexandria", "arlington", "chesapeake", "hampton", "lynchburg", "newport news", "norfolk", "portsmouth", "richmond", "roanoke", "virginia beach"], "prolog_answer_parsed": ["alexandria", "arlington", "chesapeake", "hampton", "lynchburg", "newport news", "norfolk", "portsmouth", "richmond", "roanoke", "virginia beach"], "qid": "geo880_0", "answer": ["alexandria", "arlington", "chesapeake", "hampton", "lynchburg", "newport news", "norfolk", "portsmouth", "richmond", "roanoke", "virginia beach"]}
{"query": "What are the high points of states surrounding Mississippi ?", "prolog": "answer(A,(high_point(B,A),state(B),next_to(B,C),const(C,stateid(mississippi))))", "funql": "answer(high_point_1(state(next_to_2(stateid('mississippi')))))", "prolog_ans": "['cheaha mountain','clingmans dome','driskill mountain','magazine mountain']", "funql_ans": "[placeid('cheaha mountain'),placeid('clingmans dome'),placeid('driskill mountain'),placeid('magazine mountain')]", "funql_answer_parsed": ["cheaha mountain", "clingmans dome", "driskill mountain", "magazine mountain"], "prolog_answer_parsed": ["cheaha mountain", "clingmans dome", "driskill mountain", "magazine mountain"], "qid": "geo880_1", "answer": ["cheaha mountain", "clingmans dome", "driskill mountain", "magazine mountain"]}
{"query": "Name the rivers in Arkansas .", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(arkansas))))", "funql": "answer(river(loc_2(stateid('arkansas'))))", "prolog_ans": "[arkansas,mississippi,ouachita,red,'st. francis',white]", "funql_ans": "[riverid(arkansas),riverid(mississippi),riverid(ouachita),riverid(red),riverid('st. francis'),riverid(white)]", "funql_answer_parsed": ["arkansas", "mississippi", "ouachita", "red", "st. francis", "white"], "prolog_answer_parsed": ["arkansas", "mississippi", "ouachita", "red", "st. francis", "white"], "qid": "geo880_2", "answer": ["arkansas", "mississippi", "ouachita", "red", "st. francis", "white"]}
{"query": "Name all the rivers in Colorado .", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))", "funql": "answer(river(loc_2(stateid('colorado'))))", "prolog_ans": "[arkansas,canadian,colorado,green,'north platte',republican,'rio grande','san juan','smoky hill','south platte']", "funql_ans": "[riverid(arkansas),riverid(canadian),riverid(colorado),riverid(green),riverid('north platte'),riverid(republican),riverid('rio grande'),riverid('san juan'),riverid('smoky hill'),riverid('south platte')]", "funql_answer_parsed": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"], "prolog_answer_parsed": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"], "qid": "geo880_3", "answer": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"]}
{"query": "Can you tell me the capital of Texas ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(capital(loc_2(stateid('texas'))))", "prolog_ans": "[austin]", "funql_ans": "[cityid(austin,tx)]", "funql_answer_parsed": ["austin"], "prolog_answer_parsed": ["austin"], "qid": "geo880_4", "answer": ["austin"]}
{"query": "Could you tell me what is the highest point in the state of Oregon ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),state(B),const(B,stateid(oregon)))))", "funql": "answer(highest(place(loc_2(state(stateid('oregon'))))))", "prolog_ans": "['mount hood']", "funql_ans": "[placeid('mount hood')]", "funql_answer_parsed": ["mount hood"], "prolog_answer_parsed": ["mount hood"], "qid": "geo880_5", "answer": ["mount hood"]}
{"query": "Count the states which have elevations lower than what Alabama has .", "prolog": "answer(A,count(B,(state(B),low_point(B,C),lower(C,D),low_point(E,D),const(E,stateid(alabama))),A))", "funql": "answer(count(state(low_point_2(lower_2(low_point_1(stateid('alabama')))))))", "prolog_ans": "[2]", "funql_ans": "[2]", "funql_answer_parsed": [2], "prolog_answer_parsed": [2], "qid": "geo880_6", "answer": [2]}
{"query": "Give me all the states of USA .", "prolog": "answer(A,(state(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(state(loc_2(countryid('usa'))))", "prolog_ans": "[alabama,alaska,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,hawaii,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maine,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'rhode island','south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(alabama),stateid(alaska),stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid(connecticut),stateid(delaware),stateid('district of columbia'),stateid(florida),stateid(georgia),stateid(hawaii),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(maine),stateid(maryland),stateid(massachusetts),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new hampshire'),stateid('new jersey'),stateid('new mexico'),stateid('new york'),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid(oregon),stateid(pennsylvania),stateid('rhode island'),stateid('south carolina'),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(vermont),stateid(virginia),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_7", "answer": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"]}
{"query": "Give me the cities in Texas .", "prolog": "answer(A,(city(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(city(loc_2(stateid('texas'))))", "prolog_ans": "[abilene,amarillo,arlington,austin,beaumont,brownsville,'corpus christi',dallas,'el paso','fort worth',garland,'grand prairie',houston,irving,laredo,longview,lubbock,mcallen,mesquite,midland,odessa,pasadena,plano,'port arthur',richardson,'san angelo','san antonio',tyler,waco,'wichita falls']", "funql_ans": "[cityid(abilene,tx),cityid(amarillo,tx),cityid(arlington,tx),cityid(austin,tx),cityid(beaumont,tx),cityid(brownsville,tx),cityid('corpus christi',tx),cityid(dallas,tx),cityid('el paso',tx),cityid('fort worth',tx),cityid(garland,tx),cityid('grand prairie',tx),cityid(houston,tx),cityid(irving,tx),cityid(laredo,tx),cityid(longview,tx),cityid(lubbock,tx),cityid(mcallen,tx),cityid(mesquite,tx),cityid(midland,tx),cityid(odessa,tx),cityid(pasadena,tx),cityid(plano,tx),cityid('port arthur',tx),cityid(richardson,tx),cityid('san angelo',tx),cityid('san antonio',tx),cityid(tyler,tx),cityid(waco,tx),cityid('wichita falls',tx)]", "funql_answer_parsed": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"], "prolog_answer_parsed": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"], "qid": "geo880_8", "answer": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"]}
{"query": "Give me the cities in USA .", "prolog": "answer(A,(city(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(city(loc_2(countryid('usa'))))", "prolog_ans": "[abilene,abingdon,akron,alameda,albany,albuquerque,alexandria,alhambra,allentown,altoona,amarillo,anaheim,anchorage,anderson,'ann arbor',appleton,arlington,'arlington heights',arvada,atlanta,aurora,austin,bakersfield,baltimore,'baton rouge',bayonne,beaumont,bellevue,berkeley,bethesda,bethlehem,billings,birmingham,bloomington,boise,boston,boulder,bridgeport,bristol,'bristol township',brockton,brownsville,'buena park',buffalo,burbank,cambridge,camden,canton,carson,casper,'cedar rapids',champaign,charleston,charlotte,chattanooga,cheektowaga,'cherry hill',chesapeake,chicago,'chula vista',cicero,cincinnati,'citrus heights',clearwater,cleveland,clifton,clinton,'colorado springs',columbia,columbus,compton,concord,'corpus christi','costa mesa',cranston,dallas,'daly city',danbury,davenport,dayton,dearborn,'dearborn heights',decatur,denver,'des moines',detroit,downey,dubuque,duluth,dundalk,durham,'east los angeles','east orange',edison,'el cajon','el monte','el paso',elgin,elizabeth,elyria,erie,escondido,euclid,eugene,evanston,evansville,ewa,fairfield,'fall river',fargo,'farmington hills',fayetteville,flint,'fort collins','fort lauderdale','fort smith','fort wayne','fort worth',framingham,fremont,fresno,fullerton,gainesville,'garden grove',garland,gary,glendale,'grand prairie','grand rapids','great falls','green bay',greensboro,greenville,greenwich,hamilton,hammond,hampton,hartford,hayward,'high point',hollywood,honolulu,houston,huntington,'huntington beach',huntsville,independence,indianapolis,inglewood,irondequoit,irvine,irving,irvington,jackson,jacksonville,'jersey city',joliet,kalamazoo,'kansas city',kendall,kenner,kenosha,kettering,knoxville,koolaupoko,lafayette,'lake charles',lakewood,lansing,laredo,largo,'las vegas',lawrence,lawton,levittown,lexington,lincoln,'little rock',livonia,'long beach',longview,lorain,'los angeles',louisville,lowell,'lower merion',lubbock,lynchburg,lynn,macon,madison,manchester,mcallen,medford,memphis,meriden,mesa,mesquite,metairie,miami,'miami beach',middletown,midland,milwaukee,minneapolis,mobile,modesto,monroe,montgomery,'mount vernon','mountain view',muncie,nashua,nashville,'new bedford','new britain','new haven','new orleans','new rochelle','new york',newark,'newport beach','newport news',newton,'niagara falls',norfolk,norman,'north charleston','north little rock',norwalk,'oak lawn',oakland,oceanside,odessa,ogden,'oklahoma city',omaha,ontario,orange,orlando,'overland park',oxnard,parma,pasadena,paterson,pawtucket,'penn hills',pensacola,peoria,philadelphia,phoenix,pittsburgh,plano,pomona,pontiac,'port arthur',portland,portsmouth,providence,provo,pueblo,quincy,racine,raleigh,reading,redford,'redondo beach',reno,richardson,richmond,riverside,roanoke,rochester,rockford,'royal oak',sacramento,saginaw,salem,salinas,'salt lake city','san angelo','san antonio','san bernardino','san diego','san francisco','san jose','san leandro','san mateo','santa ana','santa barbara','santa clara','santa monica','santa rosa',savannah,schenectady,'scotts valley',scottsdale,scranton,seattle,shreveport,'silver spring','simi valley','sioux city','sioux falls',skokie,somerville,'south bend','south gate',southfield,spokane,springfield,'st. clair shores','st. joseph','st. louis','st. paul','st. petersburg',stamford,'sterling heights',stockton,sunnyvale,syracuse,tacoma,tallahassee,tampa,taylor,tempe,'terre haute','thousand oaks',toledo,topeka,torrance,trenton,troy,tucson,tulsa,tuscaloosa,tyler,'upper darby',utica,vallejo,ventura,'virginia beach',waco,waltham,warren,warwick,washington,waterbury,waterford,waterloo,waukegan,'west allis','west covina','west hartford','west palm beach','west valley',westland,westminster,whittier,wichita,'wichita falls',wilmington,'winston-salem',woodbridge,worcester,wyoming,yonkers,youngstown]", "funql_ans": "[cityid(abilene,tx),cityid(abingdon,pa),cityid(akron,oh),cityid(alameda,ca),cityid(albany,ga),cityid(albany,ny),cityid(albuquerque,nm),cityid(alexandria,va),cityid(alhambra,ca),cityid(allentown,pa),cityid(altoona,pa),cityid(amarillo,tx),cityid(anaheim,ca),cityid(anchorage,ak),cityid(anderson,in),cityid('ann arbor',mi),cityid(appleton,wi),cityid(arlington,tx),cityid(arlington,va),cityid('arlington heights',il),cityid(arvada,co),cityid(atlanta,ga),cityid(aurora,co),cityid(aurora,il),cityid(austin,tx),cityid(bakersfield,ca),cityid(baltimore,md),cityid('baton rouge',la),cityid(bayonne,nj),cityid(beaumont,tx),cityid(bellevue,wa),cityid(berkeley,ca),cityid(bethesda,md),cityid(bethlehem,pa),cityid(billings,mt),cityid(birmingham,al),cityid(bloomington,mn),cityid(boise,id),cityid(boston,ma),cityid(boulder,co),cityid(bridgeport,ct),cityid(bristol,ct),cityid('bristol township',pa),cityid(brockton,ma),cityid(brownsville,tx),cityid('buena park',ca),cityid(buffalo,ny),cityid(burbank,ca),cityid(cambridge,ma),cityid(camden,nj),cityid(canton,oh),cityid(carson,ca),cityid(casper,wy),cityid('cedar rapids',ia),cityid(champaign,il),cityid(charleston,sc),cityid(charleston,wv),cityid(charlotte,nc),cityid(chattanooga,tn),cityid(cheektowaga,ny),cityid('cherry hill',nj),cityid(chesapeake,va),cityid(chicago,il),cityid('chula vista',ca),cityid(cicero,il),cityid(cincinnati,oh),cityid('citrus heights',ca),cityid(clearwater,fl),cityid(cleveland,oh),cityid(clifton,nj),cityid(clinton,mi),cityid('colorado springs',co),cityid(columbia,mo),cityid(columbia,sc),cityid(columbus,ga),cityid(columbus,oh),cityid(compton,ca),cityid(concord,ca),cityid('corpus christi',tx),cityid('costa mesa',ca),cityid(cranston,ri),cityid(dallas,tx),cityid('daly city',ca),cityid(danbury,ct),cityid(davenport,ia),cityid(dayton,oh),cityid(dearborn,mi),cityid('dearborn heights',mi),cityid(decatur,il),cityid(denver,co),cityid('des moines',ia),cityid(detroit,mi),cityid(downey,ca),cityid(dubuque,ia),cityid(duluth,mn),cityid(dundalk,md),cityid(durham,nc),cityid('east los angeles',ca),cityid('east orange',nj),cityid(edison,nj),cityid('el cajon',ca),cityid('el monte',ca),cityid('el paso',tx),cityid(elgin,il),cityid(elizabeth,nj),cityid(elyria,oh),cityid(erie,pa),cityid(escondido,ca),cityid(euclid,oh),cityid(eugene,or),cityid(evanston,il),cityid(evansville,in),cityid(ewa,hi),cityid(fairfield,ca),cityid('fall river',ma),cityid(fargo,nd),cityid('farmington hills',mi),cityid(fayetteville,nc),cityid(flint,mi),cityid('fort collins',co),cityid('fort lauderdale',fl),cityid('fort smith',ar),cityid('fort wayne',in),cityid('fort worth',tx),cityid(framingham,ma),cityid(fremont,ca),cityid(fresno,ca),cityid(fullerton,ca),cityid(gainesville,fl),cityid('garden grove',ca),cityid(garland,tx),cityid(gary,in),cityid(glendale,az),cityid(glendale,ca),cityid('grand prairie',tx),cityid('grand rapids',mi),cityid('great falls',mt),cityid('green bay',wi),cityid(greensboro,nc),cityid(greenville,sc),cityid(greenwich,ct),cityid(hamilton,oh),cityid(hammond,in),cityid(hampton,va),cityid(hartford,ct),cityid(hayward,ca),cityid('high point',nc),cityid(hollywood,fl),cityid(honolulu,hi),cityid(houston,tx),cityid(huntington,wv),cityid('huntington beach',ca),cityid(huntsville,al),cityid(independence,mo),cityid(indianapolis,in),cityid(inglewood,ca),cityid(irondequoit,ny),cityid(irvine,ca),cityid(irving,tx),cityid(irvington,nj),cityid(jackson,ms),cityid(jacksonville,fl),cityid('jersey city',nj),cityid(joliet,il),cityid(kalamazoo,mi),cityid('kansas city',ks),cityid('kansas city',mo),cityid(kendall,fl),cityid(kenner,la),cityid(kenosha,wi),cityid(kettering,oh),cityid(knoxville,tn),cityid(koolaupoko,hi),cityid(lafayette,la),cityid('lake charles',la),cityid(lakewood,ca),cityid(lakewood,co),cityid(lakewood,oh),cityid(lansing,mi),cityid(laredo,tx),cityid(largo,fl),cityid('las vegas',nv),cityid(lawrence,ma),cityid(lawton,ok),cityid(levittown,ny),cityid(lexington,ky),cityid(lincoln,ne),cityid('little rock',ar),cityid(livonia,mi),cityid('long beach',ca),cityid(longview,tx),cityid(lorain,oh),cityid('los angeles',ca),cityid(louisville,ky),cityid(lowell,ma),cityid('lower merion',pa),cityid(lubbock,tx),cityid(lynchburg,va),cityid(lynn,ma),cityid(macon,ga),cityid(madison,wi),cityid(manchester,nh),cityid(mcallen,tx),cityid(medford,ma),cityid(memphis,tn),cityid(meriden,ct),cityid(mesa,az),cityid(mesquite,tx),cityid(metairie,la),cityid(miami,fl),cityid('miami beach',fl),cityid(middletown,nj),cityid(midland,tx),cityid(milwaukee,wi),cityid(minneapolis,mn),cityid(mobile,al),cityid(modesto,ca),cityid(monroe,la),cityid(montgomery,al),cityid('mount vernon',ny),cityid('mountain view',ca),cityid(muncie,in),cityid(nashua,nh),cityid(nashville,tn),cityid('new bedford',ma),cityid('new britain',ct),cityid('new haven',ct),cityid('new orleans',la),cityid('new rochelle',ny),cityid('new york',ny),cityid(newark,nj),cityid('newport beach',ca),cityid('newport news',va),cityid(newton,ma),cityid('niagara falls',ny),cityid(norfolk,va),cityid(norman,ok),cityid('north charleston',sc),cityid('north little rock',ar),cityid(norwalk,ca),cityid(norwalk,ct),cityid('oak lawn',il),cityid(oakland,ca),cityid(oceanside,ca),cityid(odessa,tx),cityid(ogden,ut),cityid('oklahoma city',ok),cityid(omaha,ne),cityid(ontario,ca),cityid(orange,ca),cityid(orlando,fl),cityid('overland park',ks),cityid(oxnard,ca),cityid(parma,oh),cityid(pasadena,ca),cityid(pasadena,tx),cityid(paterson,nj),cityid(pawtucket,ri),cityid('penn hills',pa),cityid(pensacola,fl),cityid(peoria,il),cityid(philadelphia,pa),cityid(phoenix,az),cityid(pittsburgh,pa),cityid(plano,tx),cityid(pomona,ca),cityid(pontiac,mi),cityid('port arthur',tx),cityid(portland,me),cityid(portland,or),cityid(portsmouth,va),cityid(providence,ri),cityid(provo,ut),cityid(pueblo,co),cityid(quincy,ma),cityid(racine,wi),cityid(raleigh,nc),cityid(reading,pa),cityid(redford,mi),cityid('redondo beach',ca),cityid(reno,nv),cityid(richardson,tx),cityid(richmond,ca),cityid(richmond,va),cityid(riverside,ca),cityid(roanoke,va),cityid(rochester,mn),cityid(rochester,ny),cityid(rockford,il),cityid('royal oak',mi),cityid(sacramento,ca),cityid(saginaw,mi),cityid(salem,or),cityid(salinas,ca),cityid('salt lake city',ut),cityid('san angelo',tx),cityid('san antonio',tx),cityid('san bernardino',ca),cityid('san diego',ca),cityid('san francisco',ca),cityid('san jose',ca),cityid('san leandro',ca),cityid('san mateo',ca),cityid('santa ana',ca),cityid('santa barbara',ca),cityid('santa clara',ca),cityid('santa monica',ca),cityid('santa rosa',ca),cityid(savannah,ga),cityid(schenectady,ny),cityid('scotts valley',ca),cityid(scottsdale,az),cityid(scranton,pa),cityid(seattle,wa),cityid(shreveport,la),cityid('silver spring',md),cityid('simi valley',ca),cityid('sioux city',ia),cityid('sioux falls',sd),cityid(skokie,il),cityid(somerville,ma),cityid('south bend',in),cityid('south gate',ca),cityid(southfield,mi),cityid(spokane,wa),cityid(springfield,il),cityid(springfield,ma),cityid(springfield,mo),cityid(springfield,oh),cityid('st. clair shores',mi),cityid('st. joseph',mo),cityid('st. louis',mo),cityid('st. paul',mn),cityid('st. petersburg',fl),cityid(stamford,ct),cityid('sterling heights',mi),cityid(stockton,ca),cityid(sunnyvale,ca),cityid(syracuse,ny),cityid(tacoma,wa),cityid(tallahassee,fl),cityid(tampa,fl),cityid(taylor,mi),cityid(tempe,az),cityid('terre haute',in),cityid('thousand oaks',ca),cityid(toledo,oh),cityid(topeka,ks),cityid(torrance,ca),cityid(trenton,nj),cityid(troy,mi),cityid(tucson,az),cityid(tulsa,ok),cityid(tuscaloosa,al),cityid(tyler,tx),cityid('upper darby',pa),cityid(utica,ny),cityid(vallejo,ca),cityid(ventura,ca),cityid('virginia beach',va),cityid(waco,tx),cityid(waltham,ma),cityid(warren,mi),cityid(warwick,ri),cityid(washington,dc),cityid(waterbury,ct),cityid(waterford,mi),cityid(waterloo,ia),cityid(waukegan,il),cityid('west allis',wi),cityid('west covina',ca),cityid('west hartford',ct),cityid('west palm beach',fl),cityid('west valley',ut),cityid(westland,mi),cityid(westminster,ca),cityid(whittier,ca),cityid(wichita,ks),cityid('wichita falls',tx),cityid(wilmington,de),cityid('winston-salem',nc),cityid(woodbridge,nj),cityid(worcester,ma),cityid(wyoming,mi),cityid(yonkers,ny),cityid(youngstown,oh)]", "funql_answer_parsed": ["abilene", "abingdon", "akron", "alameda", "albany", "albany", "albuquerque", "alexandria", "alhambra", "allentown", "altoona", "amarillo", "anaheim", "anchorage", "anderson", "ann arbor", "appleton", "arlington", "arlington", "arlington heights", "arvada", "atlanta", "aurora", "aurora", "austin", "bakersfield", "baltimore", "baton rouge", "bayonne", "beaumont", "bellevue", "berkeley", "bethesda", "bethlehem", "billings", "birmingham", "bloomington", "boise", "boston", "boulder", "bridgeport", "bristol", "bristol township", "brockton", "brownsville", "buena park", "buffalo", "burbank", "cambridge", "camden", "canton", "carson", "casper", "cedar rapids", "champaign", "charleston", "charleston", "charlotte", "chattanooga", "cheektowaga", "cherry hill", "chesapeake", "chicago", "chula vista", "cicero", "cincinnati", "citrus heights", "clearwater", "cleveland", "clifton", "clinton", "colorado springs", "columbia", "columbia", "columbus", "columbus", "compton", "concord", "corpus christi", "costa mesa", "cranston", "dallas", "daly city", "danbury", "davenport", "dayton", "dearborn", "dearborn heights", "decatur", "denver", "des moines", "detroit", "downey", "dubuque", "duluth", "dundalk", "durham", "east los angeles", "east orange", "edison", "el cajon", "el monte", "el paso", "elgin", "elizabeth", "elyria", "erie", "escondido", "euclid", "eugene", "evanston", "evansville", "ewa", "fairfield", "fall river", "fargo", "farmington hills", "fayetteville", "flint", "fort collins", "fort lauderdale", "fort smith", "fort wayne", "fort worth", "framingham", "fremont", "fresno", "fullerton", "gainesville", "garden grove", "garland", "gary", "glendale", "glendale", "grand prairie", "grand rapids", "great falls", "green bay", "greensboro", "greenville", "greenwich", "hamilton", "hammond", "hampton", "hartford", "hayward", "high point", "hollywood", "honolulu", "houston", "huntington", "huntington beach", "huntsville", "independence", "indianapolis", "inglewood", "irondequoit", "irvine", "irving", "irvington", "jackson", "jacksonville", "jersey city", "joliet", "kalamazoo", "kansas city", "kansas city", "kendall", "kenner", "kenosha", "kettering", "knoxville", "koolaupoko", "lafayette", "lake charles", "lakewood", "lakewood", "lakewood", "lansing", "laredo", "largo", "las vegas", "lawrence", "lawton", "levittown", "lexington", "lincoln", "little rock", "livonia", "long beach", "longview", "lorain", "los angeles", "louisville", "lowell", "lower merion", "lubbock", "lynchburg", "lynn", "macon", "madison", "manchester", "mcallen", "medford", "memphis", "meriden", "mesa", "mesquite", "metairie", "miami", "miami beach", "middletown", "midland", "milwaukee", "minneapolis", "mobile", "modesto", "monroe", "montgomery", "mount vernon", "mountain view", "muncie", "nashua", "nashville", "new bedford", "new britain", "new haven", "new orleans", "new rochelle", "new york", "newark", "newport beach", "newport news", "newton", "niagara falls", "norfolk", "norman", "north charleston", "north little rock", "norwalk", "norwalk", "oak lawn", "oakland", "oceanside", "odessa", "ogden", "oklahoma city", "omaha", "ontario", "orange", "orlando", "overland park", "oxnard", "parma", "pasadena", "pasadena", "paterson", "pawtucket", "penn hills", "pensacola", "peoria", "philadelphia", "phoenix", "pittsburgh", "plano", "pomona", "pontiac", "port arthur", "portland", "portland", "portsmouth", "providence", "provo", "pueblo", "quincy", "racine", "raleigh", "reading", "redford", "redondo beach", "reno", "richardson", "richmond", "richmond", "riverside", "roanoke", "rochester", "rochester", "rockford", "royal oak", "sacramento", "saginaw", "salem", "salinas", "salt lake city", "san angelo", "san antonio", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "savannah", "schenectady", "scotts valley", "scottsdale", "scranton", "seattle", "shreveport", "silver spring", "simi valley", "sioux city", "sioux falls", "skokie", "somerville", "south bend", "south gate", "southfield", "spokane", "springfield", "springfield", "springfield", "springfield", "st. clair shores", "st. joseph", "st. louis", "st. paul", "st. petersburg", "stamford", "sterling heights", "stockton", "sunnyvale", "syracuse", "tacoma", "tallahassee", "tampa", "taylor", "tempe", "terre haute", "thousand oaks", "toledo", "topeka", "torrance", "trenton", "troy", "tucson", "tulsa", "tuscaloosa", "tyler", "upper darby", "utica", "vallejo", "ventura", "virginia beach", "waco", "waltham", "warren", "warwick", "washington", "waterbury", "waterford", "waterloo", "waukegan", "west allis", "west covina", "west hartford", "west palm beach", "west valley", "westland", "westminster", "whittier", "wichita", "wichita falls", "wilmington", "winston-salem", "woodbridge", "worcester", "wyoming", "yonkers", "youngstown"], "prolog_answer_parsed": ["abilene", "abingdon", "akron", "alameda", "albany", "albuquerque", "alexandria", "alhambra", "allentown", "altoona", "amarillo", "anaheim", "anchorage", "anderson", "ann arbor", "appleton", "arlington", "arlington heights", "arvada", "atlanta", "aurora", "austin", "bakersfield", "baltimore", "baton rouge", "bayonne", "beaumont", "bellevue", "berkeley", "bethesda", "bethlehem", "billings", "birmingham", "bloomington", "boise", "boston", "boulder", "bridgeport", "bristol", "bristol township", "brockton", "brownsville", "buena park", "buffalo", "burbank", "cambridge", "camden", "canton", "carson", "casper", "cedar rapids", "champaign", "charleston", "charlotte", "chattanooga", "cheektowaga", "cherry hill", "chesapeake", "chicago", "chula vista", "cicero", "cincinnati", "citrus heights", "clearwater", "cleveland", "clifton", "clinton", "colorado springs", "columbia", "columbus", "compton", "concord", "corpus christi", "costa mesa", "cranston", "dallas", "daly city", "danbury", "davenport", "dayton", "dearborn", "dearborn heights", "decatur", "denver", "des moines", "detroit", "downey", "dubuque", "duluth", "dundalk", "durham", "east los angeles", "east orange", "edison", "el cajon", "el monte", "el paso", "elgin", "elizabeth", "elyria", "erie", "escondido", "euclid", "eugene", "evanston", "evansville", "ewa", "fairfield", "fall river", "fargo", "farmington hills", "fayetteville", "flint", "fort collins", "fort lauderdale", "fort smith", "fort wayne", "fort worth", "framingham", "fremont", "fresno", "fullerton", "gainesville", "garden grove", "garland", "gary", "glendale", "grand prairie", "grand rapids", "great falls", "green bay", "greensboro", "greenville", "greenwich", "hamilton", "hammond", "hampton", "hartford", "hayward", "high point", "hollywood", "honolulu", "houston", "huntington", "huntington beach", "huntsville", "independence", "indianapolis", "inglewood", "irondequoit", "irvine", "irving", "irvington", "jackson", "jacksonville", "jersey city", "joliet", "kalamazoo", "kansas city", "kendall", "kenner", "kenosha", "kettering", "knoxville", "koolaupoko", "lafayette", "lake charles", "lakewood", "lansing", "laredo", "largo", "las vegas", "lawrence", "lawton", "levittown", "lexington", "lincoln", "little rock", "livonia", "long beach", "longview", "lorain", "los angeles", "louisville", "lowell", "lower merion", "lubbock", "lynchburg", "lynn", "macon", "madison", "manchester", "mcallen", "medford", "memphis", "meriden", "mesa", "mesquite", "metairie", "miami", "miami beach", "middletown", "midland", "milwaukee", "minneapolis", "mobile", "modesto", "monroe", "montgomery", "mount vernon", "mountain view", "muncie", "nashua", "nashville", "new bedford", "new britain", "new haven", "new orleans", "new rochelle", "new york", "newark", "newport beach", "newport news", "newton", "niagara falls", "norfolk", "norman", "north charleston", "north little rock", "norwalk", "oak lawn", "oakland", "oceanside", "odessa", "ogden", "oklahoma city", "omaha", "ontario", "orange", "orlando", "overland park", "oxnard", "parma", "pasadena", "paterson", "pawtucket", "penn hills", "pensacola", "peoria", "philadelphia", "phoenix", "pittsburgh", "plano", "pomona", "pontiac", "port arthur", "portland", "portsmouth", "providence", "provo", "pueblo", "quincy", "racine", "raleigh", "reading", "redford", "redondo beach", "reno", "richardson", "richmond", "riverside", "roanoke", "rochester", "rockford", "royal oak", "sacramento", "saginaw", "salem", "salinas", "salt lake city", "san angelo", "san antonio", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "savannah", "schenectady", "scotts valley", "scottsdale", "scranton", "seattle", "shreveport", "silver spring", "simi valley", "sioux city", "sioux falls", "skokie", "somerville", "south bend", "south gate", "southfield", "spokane", "springfield", "st. clair shores", "st. joseph", "st. louis", "st. paul", "st. petersburg", "stamford", "sterling heights", "stockton", "sunnyvale", "syracuse", "tacoma", "tallahassee", "tampa", "taylor", "tempe", "terre haute", "thousand oaks", "toledo", "topeka", "torrance", "trenton", "troy", "tucson", "tulsa", "tuscaloosa", "tyler", "upper darby", "utica", "vallejo", "ventura", "virginia beach", "waco", "waltham", "warren", "warwick", "washington", "waterbury", "waterford", "waterloo", "waukegan", "west allis", "west covina", "west hartford", "west palm beach", "west valley", "westland", "westminster", "whittier", "wichita", "wichita falls", "wilmington", "winston-salem", "woodbridge", "worcester", "wyoming", "yonkers", "youngstown"], "qid": "geo880_9", "answer": ["abilene", "abingdon", "akron", "alameda", "albany", "albuquerque", "alexandria", "alhambra", "allentown", "altoona", "amarillo", "anaheim", "anchorage", "anderson", "ann arbor", "appleton", "arlington", "arlington heights", "arvada", "atlanta", "aurora", "austin", "bakersfield", "baltimore", "baton rouge", "bayonne", "beaumont", "bellevue", "berkeley", "bethesda", "bethlehem", "billings", "birmingham", "bloomington", "boise", "boston", "boulder", "bridgeport", "bristol", "bristol township", "brockton", "brownsville", "buena park", "buffalo", "burbank", "cambridge", "camden", "canton", "carson", "casper", "cedar rapids", "champaign", "charleston", "charlotte", "chattanooga", "cheektowaga", "cherry hill", "chesapeake", "chicago", "chula vista", "cicero", "cincinnati", "citrus heights", "clearwater", "cleveland", "clifton", "clinton", "colorado springs", "columbia", "columbus", "compton", "concord", "corpus christi", "costa mesa", "cranston", "dallas", "daly city", "danbury", "davenport", "dayton", "dearborn", "dearborn heights", "decatur", "denver", "des moines", "detroit", "downey", "dubuque", "duluth", "dundalk", "durham", "east los angeles", "east orange", "edison", "el cajon", "el monte", "el paso", "elgin", "elizabeth", "elyria", "erie", "escondido", "euclid", "eugene", "evanston", "evansville", "ewa", "fairfield", "fall river", "fargo", "farmington hills", "fayetteville", "flint", "fort collins", "fort lauderdale", "fort smith", "fort wayne", "fort worth", "framingham", "fremont", "fresno", "fullerton", "gainesville", "garden grove", "garland", "gary", "glendale", "grand prairie", "grand rapids", "great falls", "green bay", "greensboro", "greenville", "greenwich", "hamilton", "hammond", "hampton", "hartford", "hayward", "high point", "hollywood", "honolulu", "houston", "huntington", "huntington beach", "huntsville", "independence", "indianapolis", "inglewood", "irondequoit", "irvine", "irving", "irvington", "jackson", "jacksonville", "jersey city", "joliet", "kalamazoo", "kansas city", "kendall", "kenner", "kenosha", "kettering", "knoxville", "koolaupoko", "lafayette", "lake charles", "lakewood", "lansing", "laredo", "largo", "las vegas", "lawrence", "lawton", "levittown", "lexington", "lincoln", "little rock", "livonia", "long beach", "longview", "lorain", "los angeles", "louisville", "lowell", "lower merion", "lubbock", "lynchburg", "lynn", "macon", "madison", "manchester", "mcallen", "medford", "memphis", "meriden", "mesa", "mesquite", "metairie", "miami", "miami beach", "middletown", "midland", "milwaukee", "minneapolis", "mobile", "modesto", "monroe", "montgomery", "mount vernon", "mountain view", "muncie", "nashua", "nashville", "new bedford", "new britain", "new haven", "new orleans", "new rochelle", "new york", "newark", "newport beach", "newport news", "newton", "niagara falls", "norfolk", "norman", "north charleston", "north little rock", "norwalk", "oak lawn", "oakland", "oceanside", "odessa", "ogden", "oklahoma city", "omaha", "ontario", "orange", "orlando", "overland park", "oxnard", "parma", "pasadena", "paterson", "pawtucket", "penn hills", "pensacola", "peoria", "philadelphia", "phoenix", "pittsburgh", "plano", "pomona", "pontiac", "port arthur", "portland", "portsmouth", "providence", "provo", "pueblo", "quincy", "racine", "raleigh", "reading", "redford", "redondo beach", "reno", "richardson", "richmond", "riverside", "roanoke", "rochester", "rockford", "royal oak", "sacramento", "saginaw", "salem", "salinas", "salt lake city", "san angelo", "san antonio", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "savannah", "schenectady", "scotts valley", "scottsdale", "scranton", "seattle", "shreveport", "silver spring", "simi valley", "sioux city", "sioux falls", "skokie", "somerville", "south bend", "south gate", "southfield", "spokane", "springfield", "st. clair shores", "st. joseph", "st. louis", "st. paul", "st. petersburg", "stamford", "sterling heights", "stockton", "sunnyvale", "syracuse", "tacoma", "tallahassee", "tampa", "taylor", "tempe", "terre haute", "thousand oaks", "toledo", "topeka", "torrance", "trenton", "troy", "tucson", "tulsa", "tuscaloosa", "tyler", "upper darby", "utica", "vallejo", "ventura", "virginia beach", "waco", "waltham", "warren", "warwick", "washington", "waterbury", "waterford", "waterloo", "waukegan", "west allis", "west covina", "west hartford", "west palm beach", "west valley", "westland", "westminster", "whittier", "wichita", "wichita falls", "wilmington", "winston-salem", "woodbridge", "worcester", "wyoming", "yonkers", "youngstown"]}
{"query": "Give me the cities in Virginia .", "prolog": "answer(A,(city(A),loc(A,B),const(B,stateid(virginia))))", "funql": "answer(city(loc_2(stateid('virginia'))))", "prolog_ans": "[alexandria,arlington,chesapeake,hampton,lynchburg,'newport news',norfolk,portsmouth,richmond,roanoke,'virginia beach']", "funql_ans": "[cityid(alexandria,va),cityid(arlington,va),cityid(chesapeake,va),cityid(hampton,va),cityid(lynchburg,va),cityid('newport news',va),cityid(norfolk,va),cityid(portsmouth,va),cityid(richmond,va),cityid(roanoke,va),cityid('virginia beach',va)]", "funql_answer_parsed": ["alexandria", "arlington", "chesapeake", "hampton", "lynchburg", "newport news", "norfolk", "portsmouth", "richmond", "roanoke", "virginia beach"], "prolog_answer_parsed": ["alexandria", "arlington", "chesapeake", "hampton", "lynchburg", "newport news", "norfolk", "portsmouth", "richmond", "roanoke", "virginia beach"], "qid": "geo880_10", "answer": ["alexandria", "arlington", "chesapeake", "hampton", "lynchburg", "newport news", "norfolk", "portsmouth", "richmond", "roanoke", "virginia beach"]}
{"query": "Give me the cities which are in Texas .", "prolog": "answer(A,(city(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(city(loc_2(stateid('texas'))))", "prolog_ans": "[abilene,amarillo,arlington,austin,beaumont,brownsville,'corpus christi',dallas,'el paso','fort worth',garland,'grand prairie',houston,irving,laredo,longview,lubbock,mcallen,mesquite,midland,odessa,pasadena,plano,'port arthur',richardson,'san angelo','san antonio',tyler,waco,'wichita falls']", "funql_ans": "[cityid(abilene,tx),cityid(amarillo,tx),cityid(arlington,tx),cityid(austin,tx),cityid(beaumont,tx),cityid(brownsville,tx),cityid('corpus christi',tx),cityid(dallas,tx),cityid('el paso',tx),cityid('fort worth',tx),cityid(garland,tx),cityid('grand prairie',tx),cityid(houston,tx),cityid(irving,tx),cityid(laredo,tx),cityid(longview,tx),cityid(lubbock,tx),cityid(mcallen,tx),cityid(mesquite,tx),cityid(midland,tx),cityid(odessa,tx),cityid(pasadena,tx),cityid(plano,tx),cityid('port arthur',tx),cityid(richardson,tx),cityid('san angelo',tx),cityid('san antonio',tx),cityid(tyler,tx),cityid(waco,tx),cityid('wichita falls',tx)]", "funql_answer_parsed": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"], "prolog_answer_parsed": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"], "qid": "geo880_11", "answer": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"]}
{"query": "Give me the lakes in California .", "prolog": "answer(A,(lake(A),loc(A,B),const(B,stateid(california))))", "funql": "answer(lake(loc_2(stateid('california'))))", "prolog_ans": "['salton sea',tahoe]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["salton sea", "tahoe"], "qid": "geo880_12", "answer": ["salton sea", "tahoe"]}
{"query": "Give me the largest state .", "prolog": "answer(A,largest(A,state(A)))", "funql": "answer(largest(state(all)))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_13", "answer": ["alaska"]}
{"query": "Give me the longest river that passes through the US .", "prolog": "answer(A,longest(A,(river(A),traverse(A,B),const(B,countryid(usa)))))", "funql": "answer(longest(river(traverse_2(countryid('usa')))))", "prolog_ans": "[missouri]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["missouri"], "qid": "geo880_14", "answer": ["missouri"]}
{"query": "Give me the number of rivers in California .", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),A))", "funql": "answer(count(river(loc_2(stateid('california')))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_15", "answer": [1]}
{"query": "Give me the states that border Utah .", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(utah))))", "funql": "answer(state(next_to_2(stateid('utah'))))", "prolog_ans": "[arizona,colorado,idaho,nevada,'new mexico',wyoming]", "funql_ans": "[stateid(arizona),stateid(colorado),stateid(idaho),stateid(nevada),stateid('new mexico'),stateid(wyoming)]", "funql_answer_parsed": ["arizona", "colorado", "idaho", "nevada", "new mexico", "wyoming"], "prolog_answer_parsed": ["arizona", "colorado", "idaho", "nevada", "new mexico", "wyoming"], "qid": "geo880_16", "answer": ["arizona", "colorado", "idaho", "nevada", "new mexico", "wyoming"]}
{"query": "How big is Alaska ?", "prolog": "answer(A,(size(B,A),const(B,stateid(alaska))))", "funql": "answer(size(stateid('alaska')))", "prolog_ans": "[591000.0]", "funql_ans": "[591000.0]", "funql_answer_parsed": [591000.0], "prolog_answer_parsed": [591000.0], "qid": "geo880_17", "answer": [591000.0]}
{"query": "How big is Massachusetts ?", "prolog": "answer(A,(size(B,A),const(B,stateid(massachusetts))))", "funql": "answer(size(stateid('massachusetts')))", "prolog_ans": "[8284.0]", "funql_ans": "[8284.0]", "funql_answer_parsed": [8284.0], "prolog_answer_parsed": [8284.0], "qid": "geo880_18", "answer": [8284.0]}
{"query": "How big is New Mexico ?", "prolog": "answer(A,(size(B,A),const(B,stateid('new mexico'))))", "funql": "answer(size(stateid('new mexico')))", "prolog_ans": "[121600.0]", "funql_ans": "[121600.0]", "funql_answer_parsed": [121600.0], "prolog_answer_parsed": [121600.0], "qid": "geo880_19", "answer": [121600.0]}
{"query": "How big is North Dakota ?", "prolog": "answer(A,(size(B,A),const(B,stateid('north dakota'))))", "funql": "answer(size(stateid('north dakota')))", "prolog_ans": "[70700.0]", "funql_ans": "[70700.0]", "funql_answer_parsed": [70700.0], "prolog_answer_parsed": [70700.0], "qid": "geo880_20", "answer": [70700.0]}
{"query": "How big is Texas ?", "prolog": "answer(A,(size(B,A),const(B,stateid(texas))))", "funql": "answer(size(stateid('texas')))", "prolog_ans": "[266807.0]", "funql_ans": "[266807.0]", "funql_answer_parsed": [266807.0], "prolog_answer_parsed": [266807.0], "qid": "geo880_21", "answer": [266807.0]}
{"query": "How big is the city of New York ?", "prolog": "answer(A,(size(B,A),const(B,cityid('new york',_))))", "funql": "answer(size(city(cityid('new york', _))))", "prolog_ans": "[7071639]", "funql_ans": "[7071639]", "funql_answer_parsed": [7071639], "prolog_answer_parsed": [7071639], "qid": "geo880_22", "answer": [7071639]}
{"query": "How high are the highest points of all the states ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),state(C)))))", "funql": "answer(elevation_1(highest(place(loc_2(state(all))))))", "prolog_ans": "[6194]", "funql_ans": "[6194]", "funql_answer_parsed": [6194], "prolog_answer_parsed": [6194], "qid": "geo880_23", "answer": [6194]}
{"query": "How high is Guadalupe Peak ?", "prolog": "answer(A,(elevation(B,A),const(B,placeid('guadalupe peak'))))", "funql": "answer(elevation_1(placeid('guadalupe peak')))", "prolog_ans": "[2667]", "funql_ans": "[2667]", "funql_answer_parsed": [2667], "prolog_answer_parsed": [2667], "qid": "geo880_24", "answer": [2667]}
{"query": "How high is Mount McKinley ?", "prolog": "answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))", "funql": "answer(elevation_1(placeid('mount mckinley')))", "prolog_ans": "[6194]", "funql_ans": "[6194]", "funql_answer_parsed": [6194], "prolog_answer_parsed": [6194], "qid": "geo880_25", "answer": [6194]}
{"query": "How high is the highest point in America ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(elevation_1(highest(place(loc_2(countryid('usa'))))))", "prolog_ans": "[6194]", "funql_ans": "[6194]", "funql_answer_parsed": [6194], "prolog_answer_parsed": [6194], "qid": "geo880_26", "answer": [6194]}
{"query": "How high is the highest point in Montana ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(montana))))))", "funql": "answer(elevation_1(highest(place(loc_2(stateid('montana'))))))", "prolog_ans": "[3901]", "funql_ans": "[3901]", "funql_answer_parsed": [3901], "prolog_answer_parsed": [3901], "qid": "geo880_27", "answer": [3901]}
{"query": "How high is the highest point in the largest state ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),largest(C,state(C))))))", "funql": "answer(elevation_1(highest(place(loc_2(largest(state(all)))))))", "prolog_ans": "[6194]", "funql_ans": "[6194]", "funql_answer_parsed": [6194], "prolog_answer_parsed": [6194], "qid": "geo880_28", "answer": [6194]}
{"query": "How high is the highest point of Alabama ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(alabama))))))", "funql": "answer(elevation_1(highest(place(loc_2(stateid('alabama'))))))", "prolog_ans": "[734]", "funql_ans": "[734]", "funql_answer_parsed": [734], "prolog_answer_parsed": [734], "qid": "geo880_29", "answer": [734]}
{"query": "How high is the highest point of Delaware ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(delaware))))))", "funql": "answer(elevation_1(highest(place(loc_2(stateid('delaware'))))))", "prolog_ans": "[135]", "funql_ans": "[135]", "funql_answer_parsed": [135], "prolog_answer_parsed": [135], "qid": "geo880_30", "answer": [135]}
{"query": "How high is the highest point of Florida ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(florida))))))", "funql": "answer(elevation_1(highest(place(loc_2(stateid('florida'))))))", "prolog_ans": "[105]", "funql_ans": "[105]", "funql_answer_parsed": [105], "prolog_answer_parsed": [105], "qid": "geo880_31", "answer": [105]}
{"query": "How high is the highest point of Louisiana ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(louisiana))))))", "funql": "answer(elevation_1(highest(place(loc_2(stateid('louisiana'))))))", "prolog_ans": "[163]", "funql_ans": "[163]", "funql_answer_parsed": [163], "prolog_answer_parsed": [163], "qid": "geo880_32", "answer": [163]}
{"query": "How large is Alaska ?", "prolog": "answer(A,(size(B,A),const(B,stateid(alaska))))", "funql": "answer(size(stateid('alaska')))", "prolog_ans": "[591000.0]", "funql_ans": "[591000.0]", "funql_answer_parsed": [591000.0], "prolog_answer_parsed": [591000.0], "qid": "geo880_33", "answer": [591000.0]}
{"query": "How large is Texas ?", "prolog": "answer(A,(size(B,A),const(B,stateid(texas))))", "funql": "answer(size(stateid('texas')))", "prolog_ans": "[266807.0]", "funql_ans": "[266807.0]", "funql_answer_parsed": [266807.0], "prolog_answer_parsed": [266807.0], "qid": "geo880_34", "answer": [266807.0]}
{"query": "How large is the largest city in Alaska ?", "prolog": "answer(A,(size(B,A),largest(B,(city(B),loc(B,C),const(C,stateid(alaska))))))", "funql": "answer(size(largest(city(loc_2(stateid('alaska'))))))", "prolog_ans": "[174431]", "funql_ans": "[174431]", "funql_answer_parsed": [174431], "prolog_answer_parsed": [174431], "qid": "geo880_35", "answer": [174431]}
{"query": "How long is Rio Grande ?", "prolog": "answer(A,(len(B,A),const(B,riverid('rio grande'))))", "funql": "answer(len(riverid('rio grande')))", "prolog_ans": "[3033]", "funql_ans": "[3033]", "funql_answer_parsed": [3033], "prolog_answer_parsed": [3033], "qid": "geo880_36", "answer": [3033]}
{"query": "How long is the Colorado river ?", "prolog": "answer(A,(len(B,A),const(B,riverid(colorado)),river(B)))", "funql": "answer(len(river(riverid('colorado'))))", "prolog_ans": "[2333]", "funql_ans": "[2333]", "funql_answer_parsed": [2333], "prolog_answer_parsed": [2333], "qid": "geo880_37", "answer": [2333]}
{"query": "How long is the Delaware river ?", "prolog": "answer(A,(len(B,A),const(B,riverid(delaware)),river(B)))", "funql": "answer(len(river(riverid('delaware'))))", "prolog_ans": "[451]", "funql_ans": "[451]", "funql_answer_parsed": [451], "prolog_answer_parsed": [451], "qid": "geo880_38", "answer": [451]}
{"query": "How long is the longest river in California ?", "prolog": "answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,stateid(california))))))", "funql": "answer(len(longest(river(loc_2(stateid('california'))))))", "prolog_ans": "[2333]", "funql_ans": "[2333]", "funql_answer_parsed": [2333], "prolog_answer_parsed": [2333], "qid": "geo880_39", "answer": [2333]}
{"query": "How long is the longest river in the USA ?", "prolog": "answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(len(longest(river(loc_2(countryid('usa'))))))", "prolog_ans": "[451,459,462,483,492,523,541,579,603,636,655,658,660,679,682,684,693,702,740,764,788,805,848,869,901,965,973,1049,1080,1094,1105,1110,1142,1175,1458,1569,1638,1670,1953,2333,3033,3778,3968]", "funql_ans": "[3968]", "funql_answer_parsed": [3968], "prolog_answer_parsed": [451, 459, 462, 483, 492, 523, 541, 579, 603, 636, 655, 658, 660, 679, 682, 684, 693, 702, 740, 764, 788, 805, 848, 869, 901, 965, 973, 1049, 1080, 1094, 1105, 1110, 1142, 1175, 1458, 1569, 1638, 1670, 1953, 2333, 3033, 3778, 3968], "qid": "geo880_40", "answer": [3968]}
{"query": "How long is the Mississippi ?", "prolog": "answer(A,(len(B,A),const(B,riverid(mississippi))))", "funql": "answer(len(riverid('mississippi')))", "prolog_ans": "[3778]", "funql_ans": "[3778]", "funql_answer_parsed": [3778], "prolog_answer_parsed": [3778], "qid": "geo880_41", "answer": [3778]}
{"query": "How long is the Mississippi river ?", "prolog": "answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))", "funql": "answer(len(river(riverid('mississippi'))))", "prolog_ans": "[3778]", "funql_ans": "[3778]", "funql_answer_parsed": [3778], "prolog_answer_parsed": [3778], "qid": "geo880_42", "answer": [3778]}
{"query": "How long is the Mississippi river in miles ?", "prolog": "answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))", "funql": "answer(len(river(riverid('mississippi'))))", "prolog_ans": "[3778]", "funql_ans": "[3778]", "funql_answer_parsed": [3778], "prolog_answer_parsed": [3778], "qid": "geo880_43", "answer": [3778]}
{"query": "How long is the Missouri river ?", "prolog": "answer(A,(len(B,A),const(B,riverid(missouri)),river(B)))", "funql": "answer(len(river(riverid('missouri'))))", "prolog_ans": "[3968]", "funql_ans": "[3968]", "funql_answer_parsed": [3968], "prolog_answer_parsed": [3968], "qid": "geo880_44", "answer": [3968]}
{"query": "How long is the North Platte river ?", "prolog": "answer(A,(len(B,A),const(B,riverid('north platte')),river(B)))", "funql": "answer(len(river(riverid('north platte'))))", "prolog_ans": "[1094]", "funql_ans": "[1094]", "funql_answer_parsed": [1094], "prolog_answer_parsed": [1094], "qid": "geo880_45", "answer": [1094]}
{"query": "How long is the Ohio river ?", "prolog": "answer(A,(len(B,A),const(B,riverid(ohio)),river(B)))", "funql": "answer(len(river(riverid('ohio'))))", "prolog_ans": "[1569]", "funql_ans": "[1569]", "funql_answer_parsed": [1569], "prolog_answer_parsed": [1569], "qid": "geo880_46", "answer": [1569]}
{"query": "How long is the Rio Grande river ?", "prolog": "answer(A,(len(B,A),const(B,riverid('rio grande')),river(B)))", "funql": "answer(len(river(riverid('rio grande'))))", "prolog_ans": "[3033]", "funql_ans": "[3033]", "funql_answer_parsed": [3033], "prolog_answer_parsed": [3033], "qid": "geo880_47", "answer": [3033]}
{"query": "How long is the shortest river in the USA ?", "prolog": "answer(A,(len(B,A),shortest(B,(river(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(len(shortest(river(loc_2(countryid('usa'))))))", "prolog_ans": "[451,459,462,483,492,523,541,579,603,636,655,658,660,679,682,684,693,702,740,764,788,805,848,869,901,965,973,1049,1080,1094,1105,1110,1142,1175,1458,1569,1638,1670,1953,2333,3033,3778,3968]", "funql_ans": "[451]", "funql_answer_parsed": [451], "prolog_answer_parsed": [451, 459, 462, 483, 492, 523, 541, 579, 603, 636, 655, 658, 660, 679, 682, 684, 693, 702, 740, 764, 788, 805, 848, 869, 901, 965, 973, 1049, 1080, 1094, 1105, 1110, 1142, 1175, 1458, 1569, 1638, 1670, 1953, 2333, 3033, 3778, 3968], "qid": "geo880_48", "answer": [451]}
{"query": "How many big cities are in Pennsylvania ?", "prolog": "answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(pennsylvania))),A))", "funql": "answer(count(major(city(loc_2(stateid('pennsylvania'))))))", "prolog_ans": "[2]", "funql_ans": "[2]", "funql_answer_parsed": [2], "prolog_answer_parsed": [2], "qid": "geo880_49", "answer": [2]}
{"query": "How many capitals does Rhode Island have ?", "prolog": "answer(A,count(B,(capital(B),const(C,stateid('rhode island')),loc(B,C)),A))", "funql": "answer(count(capital(loc_2(stateid('rhode island')))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_50", "answer": [1]}
{"query": "How many cities are in Louisiana ?", "prolog": "answer(A,count(B,(city(B),loc(B,C),const(C,stateid(louisiana))),A))", "funql": "answer(count(city(loc_2(stateid('louisiana')))))", "prolog_ans": "[8]", "funql_ans": "[8]", "funql_answer_parsed": [8], "prolog_answer_parsed": [8], "qid": "geo880_51", "answer": [8]}
{"query": "How many cities are in Montana ?", "prolog": "answer(A,count(B,(city(B),loc(B,C),const(C,stateid(montana))),A))", "funql": "answer(count(city(loc_2(stateid('montana')))))", "prolog_ans": "[2]", "funql_ans": "[2]", "funql_answer_parsed": [2], "prolog_answer_parsed": [2], "qid": "geo880_52", "answer": [2]}
{"query": "How many cities are there in the United States ?", "prolog": "answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(city(loc_2(countryid('usa')))))", "prolog_ans": "[386]", "funql_ans": "[386]", "funql_answer_parsed": [386], "prolog_answer_parsed": [386], "qid": "geo880_53", "answer": [386]}
{"query": "How many cities are there in the US ?", "prolog": "answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(city(loc_2(countryid('usa')))))", "prolog_ans": "[386]", "funql_ans": "[386]", "funql_answer_parsed": [386], "prolog_answer_parsed": [386], "qid": "geo880_54", "answer": [386]}
{"query": "How many cities are there in US ?", "prolog": "answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(city(loc_2(countryid('usa')))))", "prolog_ans": "[386]", "funql_ans": "[386]", "funql_answer_parsed": [386], "prolog_answer_parsed": [386], "qid": "geo880_55", "answer": [386]}
{"query": "How many cities are there in USA ?", "prolog": "answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(city(loc_2(countryid('usa')))))", "prolog_ans": "[386]", "funql_ans": "[386]", "funql_answer_parsed": [386], "prolog_answer_parsed": [386], "qid": "geo880_56", "answer": [386]}
{"query": "How many cities does Texas have ?", "prolog": "answer(A,count(B,(city(B),const(C,stateid(texas)),loc(B,C)),A))", "funql": "answer(count(city(loc_2(stateid('texas')))))", "prolog_ans": "[30]", "funql_ans": "[30]", "funql_answer_parsed": [30], "prolog_answer_parsed": [30], "qid": "geo880_57", "answer": [30]}
{"query": "How many cities does the USA have ?", "prolog": "answer(A,count(B,(city(B),const(C,countryid(usa)),loc(B,C)),A))", "funql": "answer(count(city(loc_2(countryid('usa')))))", "prolog_ans": "[386]", "funql_ans": "[386]", "funql_answer_parsed": [386], "prolog_answer_parsed": [386], "qid": "geo880_58", "answer": [386]}
{"query": "How many cities named Austin are there in the USA ?", "prolog": "answer(A,count(B,(city(B),const(B,cityid(austin,_)),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(intersection(city(cityid('austin', _)), loc_2(countryid('usa')))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_59", "answer": [1]}
{"query": "How many citizens does the biggest city have in the USA ?", "prolog": "answer(A,(population(B,A),largest(B,city(B))))", "funql": "answer(population_1(largest(city(all))))", "prolog_ans": "[7071639]", "funql_ans": "[7071639]", "funql_answer_parsed": [7071639], "prolog_answer_parsed": [7071639], "qid": "geo880_60", "answer": [7071639]}
{"query": "How many citizens in Alabama ?", "prolog": "answer(A,(population(B,A),const(B,stateid(alabama))))", "funql": "answer(population_1(stateid('alabama')))", "prolog_ans": "[3894000.0]", "funql_ans": "[3894000.0]", "funql_answer_parsed": [3894000.0], "prolog_answer_parsed": [3894000.0], "qid": "geo880_61", "answer": [3894000.0]}
{"query": "How many citizens in Boulder ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boulder,_))))", "funql": "answer(population_1(cityid('boulder', _)))", "prolog_ans": "[76685]", "funql_ans": "[76685]", "funql_answer_parsed": [76685], "prolog_answer_parsed": [76685], "qid": "geo880_62", "answer": [76685]}
{"query": "How many citizens live in California ?", "prolog": "answer(A,(population(B,A),const(B,stateid(california))))", "funql": "answer(population_1(stateid('california')))", "prolog_ans": "[23670000.0]", "funql_ans": "[23670000.0]", "funql_answer_parsed": [23670000.0], "prolog_answer_parsed": [23670000.0], "qid": "geo880_63", "answer": [23670000.0]}
{"query": "How many Colorado rivers are there ?", "prolog": "answer(A,count(B,(const(B,riverid(colorado)),river(B)),A))", "funql": "answer(count(river(riverid('colorado'))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_64", "answer": [1]}
{"query": "How many inhabitants does Montgomery have ?", "prolog": "answer(A,(population(B,A),const(B,cityid(montgomery,_))))", "funql": "answer(population_1(cityid('montgomery', _)))", "prolog_ans": "[177857]", "funql_ans": "[177857]", "funql_answer_parsed": [177857], "prolog_answer_parsed": [177857], "qid": "geo880_65", "answer": [177857]}
{"query": "How many major cities are in Arizona ?", "prolog": "answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(arizona))),A))", "funql": "answer(count(major(city(loc_2(stateid('arizona'))))))", "prolog_ans": "[3]", "funql_ans": "[3]", "funql_answer_parsed": [3], "prolog_answer_parsed": [3], "qid": "geo880_66", "answer": [3]}
{"query": "How many major cities are in Florida ?", "prolog": "answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(florida))),A))", "funql": "answer(count(major(city(loc_2(stateid('florida'))))))", "prolog_ans": "[5]", "funql_ans": "[5]", "funql_answer_parsed": [5], "prolog_answer_parsed": [5], "qid": "geo880_67", "answer": [5]}
{"query": "How many major cities are in states bordering Nebraska ?", "prolog": "answer(A,count(B,(major(B),city(B),loc(B,C),state(C),next_to(C,D),const(D,stateid(nebraska))),A))", "funql": "answer(count(major(city(loc_2(state(next_to_2(stateid('nebraska'))))))))", "prolog_ans": "[8]", "funql_ans": "[8]", "funql_answer_parsed": [8], "prolog_answer_parsed": [8], "qid": "geo880_68", "answer": [8]}
{"query": "How many major cities are in states bordering Utah ?", "prolog": "answer(A,count(B,(major(B),city(B),loc(B,C),state(C),next_to(C,D),const(D,stateid(utah))),A))", "funql": "answer(count(major(city(loc_2(state(next_to_2(stateid('utah'))))))))", "prolog_ans": "[8]", "funql_ans": "[8]", "funql_answer_parsed": [8], "prolog_answer_parsed": [8], "qid": "geo880_69", "answer": [8]}
{"query": "How many major cities are in Texas ?", "prolog": "answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(texas))),A))", "funql": "answer(count(major(city(loc_2(stateid('texas'))))))", "prolog_ans": "[9]", "funql_ans": "[9]", "funql_answer_parsed": [9], "prolog_answer_parsed": [9], "qid": "geo880_70", "answer": [9]}
{"query": "How many major cities are there ?", "prolog": "answer(A,count(B,(major(B),city(B)),A))", "funql": "answer(count(major(city(all))))", "prolog_ans": "[107]", "funql_ans": "[107]", "funql_answer_parsed": [107], "prolog_answer_parsed": [107], "qid": "geo880_71", "answer": [107]}
{"query": "How many major cities are there in Oregon ?", "prolog": "answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(oregon))),A))", "funql": "answer(count(major(city(loc_2(stateid('oregon'))))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_72", "answer": [1]}
{"query": "How many major rivers cross Ohio ?", "prolog": "answer(A,count(B,(major(B),river(B),traverse(B,C),const(C,stateid(ohio))),A))", "funql": "answer(count(major(river(traverse_2(stateid('ohio'))))))", "prolog_ans": "[2]", "funql_ans": "[2]", "funql_answer_parsed": [2], "prolog_answer_parsed": [2], "qid": "geo880_73", "answer": [2]}
{"query": "How many people are in the state of Nevada ?", "prolog": "answer(A,(population(B,A),const(B,stateid(nevada))))", "funql": "answer(population_1(state(stateid('nevada'))))", "prolog_ans": "[800500.0]", "funql_ans": "[800500.0]", "funql_answer_parsed": [800500.0], "prolog_answer_parsed": [800500.0], "qid": "geo880_74", "answer": [800500.0]}
{"query": "How many people are there in Iowa ?", "prolog": "answer(A,(population(B,A),const(B,stateid(iowa))))", "funql": "answer(population_1(stateid('iowa')))", "prolog_ans": "[2913000.0]", "funql_ans": "[2913000.0]", "funql_answer_parsed": [2913000.0], "prolog_answer_parsed": [2913000.0], "qid": "geo880_75", "answer": [2913000.0]}
{"query": "How many people are there in New York ?", "prolog": "answer(A,(population(B,A),const(B,stateid('new york'))))", "funql": "answer(population_1(stateid('new york')))", "prolog_ans": "[17558000.0]", "funql_ans": "[17558000.0]", "funql_answer_parsed": [17558000.0], "prolog_answer_parsed": [17558000.0], "qid": "geo880_76", "answer": [17558000.0]}
{"query": "How many people in Boulder ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boulder,_))))", "funql": "answer(population_1(cityid('boulder', _)))", "prolog_ans": "[76685]", "funql_ans": "[76685]", "funql_answer_parsed": [76685], "prolog_answer_parsed": [76685], "qid": "geo880_77", "answer": [76685]}
{"query": "How many people live in Austin ?", "prolog": "answer(A,(population(B,A),const(B,cityid(austin,_))))", "funql": "answer(population_1(cityid('austin', _)))", "prolog_ans": "[345496]", "funql_ans": "[345496]", "funql_answer_parsed": [345496], "prolog_answer_parsed": [345496], "qid": "geo880_78", "answer": [345496]}
{"query": "How many people live in Austin Texas ?", "prolog": "answer(A,(population(B,A),const(B,cityid(austin,tx))))", "funql": "answer(population_1(cityid('austin', 'tx')))", "prolog_ans": "[345496]", "funql_ans": "[345496]", "funql_answer_parsed": [345496], "prolog_answer_parsed": [345496], "qid": "geo880_79", "answer": [345496]}
{"query": "How many people live in California ?", "prolog": "answer(A,(population(B,A),const(B,stateid(california))))", "funql": "answer(population_1(stateid('california')))", "prolog_ans": "[23670000.0]", "funql_ans": "[23670000.0]", "funql_answer_parsed": [23670000.0], "prolog_answer_parsed": [23670000.0], "qid": "geo880_80", "answer": [23670000.0]}
{"query": "How many people live in Chicago ?", "prolog": "answer(A,(population(B,A),const(B,cityid(chicago,_))))", "funql": "answer(population_1(cityid('chicago', _)))", "prolog_ans": "[3005172]", "funql_ans": "[3005172]", "funql_answer_parsed": [3005172], "prolog_answer_parsed": [3005172], "qid": "geo880_81", "answer": [3005172]}
{"query": "How many people live in Detroit ?", "prolog": "answer(A,(population(B,A),const(B,cityid(detroit,_))))", "funql": "answer(population_1(cityid('detroit', _)))", "prolog_ans": "[1203339]", "funql_ans": "[1203339]", "funql_answer_parsed": [1203339], "prolog_answer_parsed": [1203339], "qid": "geo880_82", "answer": [1203339]}
{"query": "How many people live in Hawaii ?", "prolog": "answer(A,(population(B,A),const(B,stateid(hawaii))))", "funql": "answer(population_1(stateid('hawaii')))", "prolog_ans": "[964000.0]", "funql_ans": "[964000.0]", "funql_answer_parsed": [964000.0], "prolog_answer_parsed": [964000.0], "qid": "geo880_83", "answer": [964000.0]}
{"query": "How many people live in Houston ?", "prolog": "answer(A,(population(B,A),const(B,cityid(houston,_))))", "funql": "answer(population_1(cityid('houston', _)))", "prolog_ans": "[1595138]", "funql_ans": "[1595138]", "funql_answer_parsed": [1595138], "prolog_answer_parsed": [1595138], "qid": "geo880_84", "answer": [1595138]}
{"query": "How many people live in Kalamazoo ?", "prolog": "answer(A,(population(B,A),const(B,cityid(kalamazoo,_))))", "funql": "answer(population_1(cityid('kalamazoo', _)))", "prolog_ans": "[79722]", "funql_ans": "[79722]", "funql_answer_parsed": [79722], "prolog_answer_parsed": [79722], "qid": "geo880_85", "answer": [79722]}
{"query": "How many people live in Kansas ?", "prolog": "answer(A,(population(B,A),const(B,stateid(kansas))))", "funql": "answer(population_1(stateid('kansas')))", "prolog_ans": "[2364000.0]", "funql_ans": "[2364000.0]", "funql_answer_parsed": [2364000.0], "prolog_answer_parsed": [2364000.0], "qid": "geo880_86", "answer": [2364000.0]}
{"query": "How many people live in Minneapolis Minnesota ?", "prolog": "answer(A,(population(B,A),const(B,cityid(minneapolis,mn))))", "funql": "answer(population_1(cityid('minneapolis', 'mn')))", "prolog_ans": "[370951]", "funql_ans": "[370951]", "funql_answer_parsed": [370951], "prolog_answer_parsed": [370951], "qid": "geo880_87", "answer": [370951]}
{"query": "How many people live in Mississippi ?", "prolog": "answer(A,(population(B,A),const(B,stateid(mississippi))))", "funql": "answer(population_1(stateid('mississippi')))", "prolog_ans": "[2520000.0]", "funql_ans": "[2520000.0]", "funql_answer_parsed": [2520000.0], "prolog_answer_parsed": [2520000.0], "qid": "geo880_88", "answer": [2520000.0]}
{"query": "How many people live in Montana ?", "prolog": "answer(A,(population(B,A),const(B,stateid(montana))))", "funql": "answer(population_1(stateid('montana')))", "prolog_ans": "[786700.0]", "funql_ans": "[786.7]", "funql_answer_parsed": [786.7], "prolog_answer_parsed": [786700.0], "qid": "geo880_89", "answer": [786700.0]}
{"query": "How many people live in New Hampshire ?", "prolog": "answer(A,(population(B,A),const(B,stateid('new hampshire'))))", "funql": "answer(population_1(stateid('new hampshire')))", "prolog_ans": "[920600.0]", "funql_ans": "[920600.0]", "funql_answer_parsed": [920600.0], "prolog_answer_parsed": [920600.0], "qid": "geo880_90", "answer": [920600.0]}
{"query": "How many people live in New Mexico ?", "prolog": "answer(A,(population(B,A),const(B,stateid('new mexico'))))", "funql": "answer(population_1(stateid('new mexico')))", "prolog_ans": "[1303000.0]", "funql_ans": "[1303000.0]", "funql_answer_parsed": [1303000.0], "prolog_answer_parsed": [1303000.0], "qid": "geo880_91", "answer": [1303000.0]}
{"query": "How many people live in New York ?", "prolog": "answer(A,(population(B,A),const(B,stateid('new york'))))", "funql": "answer(population_1(stateid('new york')))", "prolog_ans": "[17558000.0]", "funql_ans": "[17558000.0]", "funql_answer_parsed": [17558000.0], "prolog_answer_parsed": [17558000.0], "qid": "geo880_92", "answer": [17558000.0]}
{"query": "How many people live in Rhode Island ?", "prolog": "answer(A,(population(B,A),const(B,stateid('rhode island'))))", "funql": "answer(population_1(stateid('rhode island')))", "prolog_ans": "[947200.0]", "funql_ans": "[947200.0]", "funql_answer_parsed": [947200.0], "prolog_answer_parsed": [947200.0], "qid": "geo880_93", "answer": [947200.0]}
{"query": "How many people live in Riverside ?", "prolog": "answer(A,(population(B,A),const(B,cityid(riverside,_))))", "funql": "answer(population_1(cityid('riverside', _)))", "prolog_ans": "[170876]", "funql_ans": "[170876]", "funql_answer_parsed": [170876], "prolog_answer_parsed": [170876], "qid": "geo880_94", "answer": [170876]}
{"query": "How many people live in San Francisco ?", "prolog": "answer(A,(population(B,A),const(B,cityid('san francisco',_))))", "funql": "answer(population_1(cityid('san francisco', _)))", "prolog_ans": "[678974]", "funql_ans": "[678974]", "funql_answer_parsed": [678974], "prolog_answer_parsed": [678974], "qid": "geo880_95", "answer": [678974]}
{"query": "How many people live in South Dakota ?", "prolog": "answer(A,(population(B,A),const(B,stateid('south dakota'))))", "funql": "answer(population_1(stateid('south dakota')))", "prolog_ans": "[690767.0]", "funql_ans": "[690767.0]", "funql_answer_parsed": [690767.0], "prolog_answer_parsed": [690767.0], "qid": "geo880_96", "answer": [690767.0]}
{"query": "How many people live in Spokane Washington ?", "prolog": "answer(A,(population(B,A),const(B,cityid(spokane,wa))))", "funql": "answer(population_1(cityid('spokane', 'wa')))", "prolog_ans": "[171300]", "funql_ans": "[171300]", "funql_answer_parsed": [171300], "prolog_answer_parsed": [171300], "qid": "geo880_97", "answer": [171300]}
{"query": "How many people live in Texas ?", "prolog": "answer(A,(population(B,A),const(B,stateid(texas))))", "funql": "answer(population_1(stateid('texas')))", "prolog_ans": "[14229000.0]", "funql_ans": "[14229000.0]", "funql_answer_parsed": [14229000.0], "prolog_answer_parsed": [14229000.0], "qid": "geo880_98", "answer": [14229000.0]}
{"query": "How many people live in the biggest city in New York state ?", "prolog": "answer(A,(population(B,A),largest(B,(city(B),loc(B,C),const(C,stateid('new york')),state(C)))))", "funql": "answer(population_1(largest(city(loc_2(state(stateid('new york')))))))", "prolog_ans": "[7071639]", "funql_ans": "[7071639]", "funql_answer_parsed": [7071639], "prolog_answer_parsed": [7071639], "qid": "geo880_99", "answer": [7071639]}
{"query": "How many people live in the capital of Georgia ?", "prolog": "answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(georgia))))", "funql": "answer(population_1(capital(loc_2(stateid('georgia')))))", "prolog_ans": "[425022]", "funql_ans": "[425022]", "funql_answer_parsed": [425022], "prolog_answer_parsed": [425022], "qid": "geo880_100", "answer": [425022]}
{"query": "How many people live in the capital of Texas ?", "prolog": "answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))))", "funql": "answer(population_1(capital(loc_2(stateid('texas')))))", "prolog_ans": "[345496]", "funql_ans": "[345496]", "funql_answer_parsed": [345496], "prolog_answer_parsed": [345496], "qid": "geo880_101", "answer": [345496]}
{"query": "How many people live in the smallest state bordering Wyoming ?", "prolog": "answer(A,(population(B,A),smallest(B,(state(B),next_to(B,C),const(C,stateid(wyoming))))))", "funql": "answer(population_1(smallest(state(next_to_2(stateid('wyoming'))))))", "prolog_ans": "[690767.0]", "funql_ans": "[690767.0]", "funql_answer_parsed": [690767.0], "prolog_answer_parsed": [690767.0], "qid": "geo880_102", "answer": [690767.0]}
{"query": "How many people live in the state with the largest population density ?", "prolog": "answer(A,(population(B,A),largest(C,(state(B),density(B,C)))))", "funql": "answer(population_1(largest_one(density_1(state(all)))))", "prolog_ans": "[7365000.0]", "funql_ans": "[7365000.0]", "funql_answer_parsed": [7365000.0], "prolog_answer_parsed": [7365000.0], "qid": "geo880_103", "answer": [7365000.0]}
{"query": "How many people live in the United States ?", "prolog": "answer(A,(population(B,A),const(B,countryid(usa))))", "funql": "answer(population_1(countryid('usa')))", "prolog_ans": "[307890000]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [307890000], "qid": "geo880_104", "answer": [307890000]}
{"query": "How many people live in Washington ?", "prolog": "answer(A,(population(B,A),const(B,stateid(washington))))", "funql": "answer(population_1(stateid('washington')))", "prolog_ans": "[4113200.0]", "funql_ans": "[4113200.0]", "funql_answer_parsed": [4113200.0], "prolog_answer_parsed": [4113200.0], "qid": "geo880_105", "answer": [4113200.0]}
{"query": "How many people live in Washington DC ?", "prolog": "answer(A,(population(B,A),const(B,cityid(washington,dc))))", "funql": "answer(population_1(cityid('washington', 'dc')))", "prolog_ans": "[638333]", "funql_ans": "[638333]", "funql_answer_parsed": [638333], "prolog_answer_parsed": [638333], "qid": "geo880_106", "answer": [638333]}
{"query": "How many people lived in Austin ?", "prolog": "answer(A,(population(B,A),const(B,cityid(austin,_))))", "funql": "answer(population_1(cityid('austin', _)))", "prolog_ans": "[345496]", "funql_ans": "[345496]", "funql_answer_parsed": [345496], "prolog_answer_parsed": [345496], "qid": "geo880_107", "answer": [345496]}
{"query": "How many people reside in Utah ?", "prolog": "answer(A,(population(B,A),const(B,stateid(utah))))", "funql": "answer(population_1(stateid('utah')))", "prolog_ans": "[1461000.0]", "funql_ans": "[1461000.0]", "funql_answer_parsed": [1461000.0], "prolog_answer_parsed": [1461000.0], "qid": "geo880_108", "answer": [1461000.0]}
{"query": "How many people stay in Utah ?", "prolog": "answer(A,(population(B,A),const(B,stateid(utah))))", "funql": "answer(population_1(stateid('utah')))", "prolog_ans": "[1461000.0]", "funql_ans": "[1461000.0]", "funql_answer_parsed": [1461000.0], "prolog_answer_parsed": [1461000.0], "qid": "geo880_109", "answer": [1461000.0]}
{"query": "How many residents live in Texas ?", "prolog": "answer(A,(population(B,A),const(B,stateid(texas))))", "funql": "answer(population_1(stateid('texas')))", "prolog_ans": "[14229000.0]", "funql_ans": "[14229000.0]", "funql_answer_parsed": [14229000.0], "prolog_answer_parsed": [14229000.0], "qid": "geo880_110", "answer": [14229000.0]}
{"query": "How many rivers are called Colorado ?", "prolog": "answer(A,count(B,(river(B),const(B,riverid(colorado))),A))", "funql": "answer(count(river(riverid('colorado'))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_111", "answer": [1]}
{"query": "How many rivers are found in Colorado ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))", "funql": "answer(count(river(loc_2(stateid('colorado')))))", "prolog_ans": "[10]", "funql_ans": "[10]", "funql_answer_parsed": [10], "prolog_answer_parsed": [10], "qid": "geo880_112", "answer": [10]}
{"query": "How many rivers are in Colorado ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))", "funql": "answer(count(river(loc_2(stateid('colorado')))))", "prolog_ans": "[10]", "funql_ans": "[10]", "funql_answer_parsed": [10], "prolog_answer_parsed": [10], "qid": "geo880_113", "answer": [10]}
{"query": "How many rivers are in Iowa ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),A))", "funql": "answer(count(river(loc_2(stateid('iowa')))))", "prolog_ans": "[2]", "funql_ans": "[2]", "funql_answer_parsed": [2], "prolog_answer_parsed": [2], "qid": "geo880_114", "answer": [2]}
{"query": "How many rivers are in Missouri ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(missouri))),A))", "funql": "answer(count(river(loc_2(stateid('missouri')))))", "prolog_ans": "[4]", "funql_ans": "[4]", "funql_answer_parsed": [4], "prolog_answer_parsed": [4], "qid": "geo880_115", "answer": [4]}
{"query": "How many rivers are in New York ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid('new york'))),A))", "funql": "answer(count(river(loc_2(stateid('new york')))))", "prolog_ans": "[3]", "funql_ans": "[3]", "funql_answer_parsed": [3], "prolog_answer_parsed": [3], "qid": "geo880_116", "answer": [3]}
{"query": "How many rivers are in the state that has the most rivers ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),most(C,D,(state(C),loc(D,C),river(D)))),A))", "funql": "answer(count(river(loc_2(most(state(loc_1(river(all))))))))", "prolog_ans": "[10]", "funql_ans": "[0]", "funql_answer_parsed": [0], "prolog_answer_parsed": [10], "qid": "geo880_117", "answer": [10]}
{"query": "How many rivers are in the state with the highest point ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),state(C),loc(D,C),highest(D,place(D))),A))", "funql": "answer(count(river(loc_2(state(loc_1(highest(place(all))))))))", "prolog_ans": "[0]", "funql_ans": "[0]", "funql_answer_parsed": [0], "prolog_answer_parsed": [0], "qid": "geo880_118", "answer": [0]}
{"query": "How many rivers are in the state with the largest population ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),largest(D,(state(C),population(C,D)))),A))", "funql": "answer(count(river(loc_2(largest_one(population_1(state(all)))))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_119", "answer": [1]}
{"query": "How many rivers are there in Idaho ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(idaho))),A))", "funql": "answer(count(river(loc_2(stateid('idaho')))))", "prolog_ans": "[2]", "funql_ans": "[2]", "funql_answer_parsed": [2], "prolog_answer_parsed": [2], "qid": "geo880_120", "answer": [2]}
{"query": "How many rivers are there in Texas ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas))),A))", "funql": "answer(count(river(loc_2(stateid('texas')))))", "prolog_ans": "[5]", "funql_ans": "[5]", "funql_answer_parsed": [5], "prolog_answer_parsed": [5], "qid": "geo880_121", "answer": [5]}
{"query": "How many rivers are there in US ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(river(loc_2(countryid('usa')))))", "prolog_ans": "[46]", "funql_ans": "[46]", "funql_answer_parsed": [46], "prolog_answer_parsed": [46], "qid": "geo880_122", "answer": [46]}
{"query": "How many rivers do not traverse the state with the capital Albany ?", "prolog": "answer(A,count(B,(river(B),not((traverse(B,C),state(C),loc(D,C),capital(D),const(D,cityid(albany,_))))),A))", "funql": "answer(count(exclude(river(all), traverse_2(state(loc_1(capital(cityid('albany', _))))))))", "prolog_ans": "[43]", "funql_ans": "[43]", "funql_answer_parsed": [43], "prolog_answer_parsed": [43], "qid": "geo880_123", "answer": [43]}
{"query": "How many rivers does Alaska have ?", "prolog": "answer(A,count(B,(river(B),const(C,stateid(alaska)),loc(B,C)),A))", "funql": "answer(count(river(loc_2(stateid('alaska')))))", "prolog_ans": "[0]", "funql_ans": "[0]", "funql_answer_parsed": [0], "prolog_answer_parsed": [0], "qid": "geo880_124", "answer": [0]}
{"query": "How many rivers does Colorado have ?", "prolog": "answer(A,count(B,(river(B),const(C,stateid(colorado)),loc(B,C)),A))", "funql": "answer(count(river(loc_2(stateid('colorado')))))", "prolog_ans": "[10]", "funql_ans": "[10]", "funql_answer_parsed": [10], "prolog_answer_parsed": [10], "qid": "geo880_125", "answer": [10]}
{"query": "How many rivers in Texas are longer than the Red ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas)),longer(B,D),const(D,riverid(red))),A))", "funql": "answer(count(intersection(river(loc_2(stateid('texas'))), longer(riverid('red')))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_126", "answer": [1]}
{"query": "How many rivers in Washington ?", "prolog": "answer(A,count(B,(river(B),loc(B,C),const(C,stateid(washington))),A))", "funql": "answer(count(river(loc_2(stateid('washington')))))", "prolog_ans": "[2]", "funql_ans": "[2]", "funql_answer_parsed": [2], "prolog_answer_parsed": [2], "qid": "geo880_127", "answer": [2]}
{"query": "How many rivers run through Texas ?", "prolog": "answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(texas))),A))", "funql": "answer(count(river(traverse_2(stateid('texas')))))", "prolog_ans": "[5]", "funql_ans": "[5]", "funql_answer_parsed": [5], "prolog_answer_parsed": [5], "qid": "geo880_128", "answer": [5]}
{"query": "How many rivers run through the states bordering Colorado ?", "prolog": "answer(A,count(B,(river(B),traverse(B,C),state(C),next_to(C,D),const(D,stateid(colorado))),A))", "funql": "answer(count(river(traverse_2(state(next_to_2(stateid('colorado')))))))", "prolog_ans": "[24]", "funql_ans": "[24]", "funql_answer_parsed": [24], "prolog_answer_parsed": [24], "qid": "geo880_129", "answer": [24]}
{"query": "How many square kilometers in the US ?", "prolog": "answer(A,(area(B,A),const(B,countryid(usa))))", "funql": "answer(area_1(countryid('usa')))", "prolog_ans": "[9826675.0]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [9826675.0], "qid": "geo880_130", "answer": [9826675.0]}
{"query": "How many states are in the United States ?", "prolog": "answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(state(loc_2(countryid('usa')))))", "prolog_ans": "[51]", "funql_ans": "[51]", "funql_answer_parsed": [51], "prolog_answer_parsed": [51], "qid": "geo880_131", "answer": [51]}
{"query": "How many states are in the USA ?", "prolog": "answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(state(loc_2(countryid('usa')))))", "prolog_ans": "[51]", "funql_ans": "[51]", "funql_answer_parsed": [51], "prolog_answer_parsed": [51], "qid": "geo880_132", "answer": [51]}
{"query": "How many states are next to major rivers ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),major(C),river(C)),A))", "funql": "answer(count(state(next_to_2(major(river(all))))))", "prolog_ans": "[0]", "funql_ans": "[0]", "funql_answer_parsed": [0], "prolog_answer_parsed": [0], "qid": "geo880_133", "answer": [0]}
{"query": "How many states are there ?", "prolog": "answer(A,count(B,state(B),A))", "funql": "answer(count(state(all)))", "prolog_ans": "[51]", "funql_ans": "[51]", "funql_answer_parsed": [51], "prolog_answer_parsed": [51], "qid": "geo880_134", "answer": [51]}
{"query": "How many states are there in the USA ?", "prolog": "answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(state(loc_2(countryid('usa')))))", "prolog_ans": "[51]", "funql_ans": "[51]", "funql_answer_parsed": [51], "prolog_answer_parsed": [51], "qid": "geo880_135", "answer": [51]}
{"query": "How many states are there in United States ?", "prolog": "answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))", "funql": "answer(count(state(loc_2(countryid('usa')))))", "prolog_ans": "[51]", "funql_ans": "[51]", "funql_answer_parsed": [51], "prolog_answer_parsed": [51], "qid": "geo880_136", "answer": [51]}
{"query": "How many states border Alaska ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(alaska))),A))", "funql": "answer(count(state(next_to_2(stateid('alaska')))))", "prolog_ans": "[0]", "funql_ans": "[0]", "funql_answer_parsed": [0], "prolog_answer_parsed": [0], "qid": "geo880_137", "answer": [0]}
{"query": "How many states border at least one other state ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),state(C)),A))", "funql": "answer(count(state(next_to_2(state(all)))))", "prolog_ans": "[49]", "funql_ans": "[49]", "funql_answer_parsed": [49], "prolog_answer_parsed": [49], "qid": "geo880_138", "answer": [49]}
{"query": "How many states border Colorado and border New Mexico ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(colorado)),next_to(B,D),const(D,stateid('new mexico'))),A))", "funql": "answer(count(state(intersection(next_to_2(stateid('colorado')) , next_to_2(stateid('new mexico'))))))", "prolog_ans": "[3]", "funql_ans": "[3]", "funql_answer_parsed": [3], "prolog_answer_parsed": [3], "qid": "geo880_139", "answer": [3]}
{"query": "How many states border Hawaii ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(hawaii))),A))", "funql": "answer(count(state(next_to_2(stateid('hawaii')))))", "prolog_ans": "[0]", "funql_ans": "[0]", "funql_answer_parsed": [0], "prolog_answer_parsed": [0], "qid": "geo880_140", "answer": [0]}
{"query": "How many states border Iowa ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))", "funql": "answer(count(state(next_to_2(stateid('iowa')))))", "prolog_ans": "[6]", "funql_ans": "[6]", "funql_answer_parsed": [6], "prolog_answer_parsed": [6], "qid": "geo880_141", "answer": [6]}
{"query": "How many states border on the state whose capital is Boston ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(boston,_))),A))", "funql": "answer(count(state(next_to_2(state(loc_1(capital(cityid('boston', _))))))))", "prolog_ans": "[5]", "funql_ans": "[5]", "funql_answer_parsed": [5], "prolog_answer_parsed": [5], "qid": "geo880_142", "answer": [5]}
{"query": "How many states border Tennessee ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),A))", "funql": "answer(count(state(next_to_2(stateid('tennessee')))))", "prolog_ans": "[8]", "funql_ans": "[8]", "funql_answer_parsed": [8], "prolog_answer_parsed": [8], "qid": "geo880_143", "answer": [8]}
{"query": "How many states border Texas ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(texas))),A))", "funql": "answer(count(state(next_to_2(stateid('texas')))))", "prolog_ans": "[4]", "funql_ans": "[4]", "funql_answer_parsed": [4], "prolog_answer_parsed": [4], "qid": "geo880_144", "answer": [4]}
{"query": "How many states border the largest state ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),largest(C,state(C))),A))", "funql": "answer(count(state(next_to_2(largest(state(all))))))", "prolog_ans": "[0]", "funql_ans": "[0]", "funql_answer_parsed": [0], "prolog_answer_parsed": [0], "qid": "geo880_145", "answer": [0]}
{"query": "How many states border the Mississippi river ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,riverid(mississippi)),river(C)),A))", "funql": "answer(count(state(next_to_2(river(riverid('mississippi'))))))", "prolog_ans": "[0]", "funql_ans": "[0]", "funql_answer_parsed": [0], "prolog_answer_parsed": [0], "qid": "geo880_146", "answer": [0], "python_impossible": true}
{"query": "How many states border the state that borders the most states ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),most(C,D,(state(C),next_to(C,D),state(D)))),A))", "funql": "answer(count(state(next_to_2(most(state(next_to_2(state(all))))))))", "prolog_ans": "[8]", "funql_ans": "[8]", "funql_answer_parsed": [8], "prolog_answer_parsed": [8], "qid": "geo880_147", "answer": [8]}
{"query": "How many states border the state with the largest population ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),largest(D,(state(C),population(C,D)))),A))", "funql": "answer(count(state(next_to_2(largest_one(population_1(state(all)))))))", "prolog_ans": "[3]", "funql_ans": "[3]", "funql_answer_parsed": [3], "prolog_answer_parsed": [3], "qid": "geo880_148", "answer": [3]}
{"query": "How many states do not have rivers ?", "prolog": "answer(A,count(B,(state(B),not((loc(C,B),river(C)))),A))", "funql": "answer(count(exclude(state(all), loc_1(river(all)))))", "prolog_ans": "[4]", "funql_ans": "[4]", "funql_answer_parsed": [4], "prolog_answer_parsed": [4], "qid": "geo880_149", "answer": [4]}
{"query": "How many states does Iowa border ?", "prolog": "answer(A,count(B,(state(B),const(C,stateid(iowa)),next_to(C,B)),A))", "funql": "answer(count(state(next_to_1(stateid('iowa')))))", "prolog_ans": "[6]", "funql_ans": "[6]", "funql_answer_parsed": [6], "prolog_answer_parsed": [6], "qid": "geo880_150", "answer": [6]}
{"query": "How many states does Missouri border ?", "prolog": "answer(A,count(B,(state(B),const(C,stateid(missouri)),next_to(C,B)),A))", "funql": "answer(count(state(next_to_1(stateid('missouri')))))", "prolog_ans": "[8]", "funql_ans": "[8]", "funql_answer_parsed": [8], "prolog_answer_parsed": [8], "qid": "geo880_151", "answer": [8]}
{"query": "How many states does Tennessee border ?", "prolog": "answer(A,count(B,(state(B),const(C,stateid(tennessee)),next_to(C,B)),A))", "funql": "answer(count(state(next_to_1(stateid('tennessee')))))", "prolog_ans": "[8]", "funql_ans": "[8]", "funql_answer_parsed": [8], "prolog_answer_parsed": [8], "qid": "geo880_152", "answer": [8]}
{"query": "How many states does the Colorado river flow through ?", "prolog": "answer(A,count(B,(state(B),const(C,riverid(colorado)),river(C),traverse(C,B)),A))", "funql": "answer(count(state(traverse_1(river(riverid('colorado'))))))", "prolog_ans": "[5]", "funql_ans": "[5]", "funql_answer_parsed": [5], "prolog_answer_parsed": [5], "qid": "geo880_153", "answer": [5]}
{"query": "How many states does the Colorado river run through ?", "prolog": "answer(A,count(B,(state(B),const(C,riverid(colorado)),river(C),traverse(C,B)),A))", "funql": "answer(count(state(traverse_1(river(riverid('colorado'))))))", "prolog_ans": "[5]", "funql_ans": "[5]", "funql_answer_parsed": [5], "prolog_answer_parsed": [5], "qid": "geo880_154", "answer": [5]}
{"query": "How many states does the Mississippi river run through ?", "prolog": "answer(A,count(B,(state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)),A))", "funql": "answer(count(state(traverse_1(river(riverid('mississippi'))))))", "prolog_ans": "[10]", "funql_ans": "[10]", "funql_answer_parsed": [10], "prolog_answer_parsed": [10], "qid": "geo880_155", "answer": [10]}
{"query": "How many states does the Mississippi run through ?", "prolog": "answer(A,count(B,(state(B),const(C,riverid(mississippi)),traverse(C,B)),A))", "funql": "answer(count(state(traverse_1(riverid('mississippi')))))", "prolog_ans": "[10]", "funql_ans": "[10]", "funql_answer_parsed": [10], "prolog_answer_parsed": [10], "qid": "geo880_156", "answer": [10]}
{"query": "How many states does the Missouri river run through ?", "prolog": "answer(A,count(B,(state(B),const(C,riverid(missouri)),river(C),traverse(C,B)),A))", "funql": "answer(count(state(traverse_1(river(riverid('missouri'))))))", "prolog_ans": "[6]", "funql_ans": "[6]", "funql_answer_parsed": [6], "prolog_answer_parsed": [6], "qid": "geo880_157", "answer": [6]}
{"query": "How many states does USA have ?", "prolog": "answer(A,count(B,(state(B),const(C,countryid(usa)),loc(B,C)),A))", "funql": "answer(count(state(loc_2(countryid('usa')))))", "prolog_ans": "[51]", "funql_ans": "[51]", "funql_answer_parsed": [51], "prolog_answer_parsed": [51], "qid": "geo880_158", "answer": [51]}
{"query": "How many states have a city called Rochester ?", "prolog": "answer(A,count(B,(state(B),loc(C,B),const(C,cityid(rochester,_))),A))", "funql": "answer(count(state(loc_1(city(cityid('rochester', _))))))", "prolog_ans": "[2]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [2], "qid": "geo880_159", "answer": [2]}
{"query": "How many states have a city named Springfield ?", "prolog": "answer(A,count(B,(state(B),loc(C,B),const(C,cityid(springfield,_))),A))", "funql": "answer(count(state(loc_1(city(cityid('springfield', _))))))", "prolog_ans": "[4]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [4], "qid": "geo880_160", "answer": [4]}
{"query": "How many states have a higher point than the highest point of the state with the largest capital city in the US ?", "prolog": "answer(A,count(B,(state(B),loc(C,B),higher(C,D),place(C),highest(D,(place(D),loc(D,E),state(E),loc(F,E),largest(F,(capital(F),city(F),loc(F,G),const(G,countryid(usa))))))),A))", "funql": "answer(count(state(loc_1(place(higher_2(highest(place(loc_2(state(loc_1(largest(capital(city(loc_2(countryid('usa'))))))))))))))))", "prolog_ans": "[11]", "funql_ans": "[11]", "funql_answer_parsed": [11], "prolog_answer_parsed": [11], "qid": "geo880_161", "answer": [11]}
{"query": "How many states have cities named Austin ?", "prolog": "answer(A,count(B,(state(B),loc(C,B),city(C),const(C,cityid(austin,_))),A))", "funql": "answer(count(state(loc_1(city(cityid('austin', _))))))", "prolog_ans": "[1]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [1], "qid": "geo880_162", "answer": [1]}
{"query": "How many states have cities or towns named Springfield ?", "prolog": "answer(A,count(B,(state(B),loc(C,B),city(C),const(C,cityid(springfield,_))),A))", "funql": "answer(count(state(loc_1(city(cityid('springfield', _))))))", "prolog_ans": "[4]", "funql_ans": "[1]", "funql_answer_parsed": [1], "prolog_answer_parsed": [4], "qid": "geo880_163", "answer": [4]}
{"query": "How many states have major rivers ?", "prolog": "answer(A,count(B,(state(B),loc(C,B),major(C),river(C)),A))", "funql": "answer(count(state(loc_1(major(river(all))))))", "prolog_ans": "[33]", "funql_ans": "[33]", "funql_answer_parsed": [33], "prolog_answer_parsed": [33], "qid": "geo880_164", "answer": [33]}
{"query": "How many states in the US does the shortest river run through ?", "prolog": "answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa)),shortest(D,river(D)),traverse(D,B)),A))", "funql": "answer(count(intersection(state(loc_2(countryid('usa'))),traverse_1(shortest(river(all))))))", "prolog_ans": "[4]", "funql_ans": "[4]", "funql_answer_parsed": [4], "prolog_answer_parsed": [4], "qid": "geo880_165", "answer": [4]}
{"query": "How much population does Texas have ?", "prolog": "answer(A,(population(B,A),const(B,stateid(texas))))", "funql": "answer(population_1(stateid('texas')))", "prolog_ans": "[14229000.0]", "funql_ans": "[14229000.0]", "funql_answer_parsed": [14229000.0], "prolog_answer_parsed": [14229000.0], "qid": "geo880_166", "answer": [14229000.0]}
{"query": "How tall is Mount McKinley ?", "prolog": "answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))", "funql": "answer(elevation_1(placeid('mount mckinley')))", "prolog_ans": "[6194]", "funql_ans": "[6194]", "funql_answer_parsed": [6194], "prolog_answer_parsed": [6194], "qid": "geo880_167", "answer": [6194]}
{"query": "How tall is the highest point in Montana ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(montana))))))", "funql": "answer(elevation_1(highest(place(loc_2(stateid('montana'))))))", "prolog_ans": "[3901]", "funql_ans": "[3901]", "funql_answer_parsed": [3901], "prolog_answer_parsed": [3901], "qid": "geo880_168", "answer": [3901]}
{"query": "In what state is Mount McKinley ?", "prolog": "answer(A,(loc(B,A),state(A),const(B,placeid('mount mckinley'))))", "funql": "answer(state(loc_1(placeid('mount mckinley'))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_169", "answer": ["alaska"]}
{"query": "In which state does the highest point in USA exist ?", "prolog": "answer(A,(loc(B,A),state(A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_170", "answer": ["alaska"]}
{"query": "In which state is Rochester ?", "prolog": "answer(A,(loc(B,A),state(A),const(B,cityid(rochester,_))))", "funql": "answer(state(loc_1(cityid('rochester', _))))", "prolog_ans": "[minnesota,'new york']", "funql_ans": "[stateid(minnesota),stateid('new york')]", "funql_answer_parsed": ["minnesota", "new york"], "prolog_answer_parsed": ["minnesota", "new york"], "qid": "geo880_171", "answer": ["minnesota", "new york"]}
{"query": "Iowa borders how many states ?", "prolog": "answer(A,count(B,(const(C,stateid(iowa)),next_to(C,B),state(B)),A))", "funql": "answer(count(state(next_to_1(stateid('iowa')))))", "prolog_ans": "[6]", "funql_ans": "[6]", "funql_answer_parsed": [6], "prolog_answer_parsed": [6], "qid": "geo880_172", "answer": [6]}
{"query": "List the states .", "prolog": "answer(A,state(A))", "funql": "answer(state(all))", "prolog_ans": "[alabama,alaska,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,hawaii,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maine,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'rhode island','south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(alabama),stateid(alaska),stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid(connecticut),stateid(delaware),stateid('district of columbia'),stateid(florida),stateid(georgia),stateid(hawaii),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(maine),stateid(maryland),stateid(massachusetts),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new hampshire'),stateid('new jersey'),stateid('new mexico'),stateid('new york'),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid(oregon),stateid(pennsylvania),stateid('rhode island'),stateid('south carolina'),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(vermont),stateid(virginia),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_173", "answer": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"]}
{"query": "Name all the lakes of US .", "prolog": "answer(A,(lake(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(lake(loc_2(countryid('usa'))))", "prolog_ans": "[becharof,champlain,erie,flathead,'great salt lake',huron,iliamna,'lake of the woods',michigan,'mille lacs',naknek,okeechobee,ontario,pontchartrain,rainy,red,'salton sea','st. clair',superior,tahoe,teshekpuk,winnebago]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["becharof", "champlain", "erie", "flathead", "great salt lake", "huron", "iliamna", "lake of the woods", "michigan", "mille lacs", "naknek", "okeechobee", "ontario", "pontchartrain", "rainy", "red", "salton sea", "st. clair", "superior", "tahoe", "teshekpuk", "winnebago"], "qid": "geo880_174", "answer": ["becharof", "champlain", "erie", "flathead", "great salt lake", "huron", "iliamna", "lake of the woods", "michigan", "mille lacs", "naknek", "okeechobee", "ontario", "pontchartrain", "rainy", "red", "salton sea", "st. clair", "superior", "tahoe", "teshekpuk", "winnebago"]}
{"query": "Name all the rivers in Colorado .", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))", "funql": "answer(river(loc_2(stateid('colorado'))))", "prolog_ans": "[arkansas,canadian,colorado,green,'north platte',republican,'rio grande','san juan','smoky hill','south platte']", "funql_ans": "[riverid(arkansas),riverid(canadian),riverid(colorado),riverid(green),riverid('north platte'),riverid(republican),riverid('rio grande'),riverid('san juan'),riverid('smoky hill'),riverid('south platte')]", "funql_answer_parsed": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"], "prolog_answer_parsed": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"], "qid": "geo880_175", "answer": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"]}
{"query": "Name the 50 capitals in the USA .", "prolog": "answer(A,(capital(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(capital(loc_2(countryid('usa'))))", "prolog_ans": "[albany,atlanta,austin,'baton rouge',boise,boston,charleston,columbia,columbus,denver,'des moines',hartford,honolulu,indianapolis,jackson,lansing,lincoln,'little rock',madison,montgomery,nashville,'oklahoma city',phoenix,providence,raleigh,richmond,sacramento,salem,'salt lake city',springfield,'st. paul',tallahassee,topeka,trenton,washington]", "funql_ans": "[cityid(albany,ny),cityid(atlanta,ga),cityid(austin,tx),cityid('baton rouge',la),cityid(boise,id),cityid(boston,ma),cityid(charleston,wv),cityid(columbia,sc),cityid(columbus,oh),cityid(denver,co),cityid('des moines',ia),cityid(hartford,ct),cityid(honolulu,hi),cityid(indianapolis,in),cityid(jackson,ms),cityid(lansing,mi),cityid(lincoln,ne),cityid('little rock',ar),cityid(madison,wi),cityid(montgomery,al),cityid(nashville,tn),cityid('oklahoma city',ok),cityid(phoenix,az),cityid(providence,ri),cityid(raleigh,nc),cityid(richmond,va),cityid(sacramento,ca),cityid(salem,or),cityid('salt lake city',ut),cityid(springfield,il),cityid('st. paul',mn),cityid(tallahassee,fl),cityid(topeka,ks),cityid(trenton,nj),cityid(washington,dc)]", "funql_answer_parsed": ["albany", "atlanta", "austin", "baton rouge", "boise", "boston", "charleston", "columbia", "columbus", "denver", "des moines", "hartford", "honolulu", "indianapolis", "jackson", "lansing", "lincoln", "little rock", "madison", "montgomery", "nashville", "oklahoma city", "phoenix", "providence", "raleigh", "richmond", "sacramento", "salem", "salt lake city", "springfield", "st. paul", "tallahassee", "topeka", "trenton", "washington"], "prolog_answer_parsed": ["albany", "atlanta", "austin", "baton rouge", "boise", "boston", "charleston", "columbia", "columbus", "denver", "des moines", "hartford", "honolulu", "indianapolis", "jackson", "lansing", "lincoln", "little rock", "madison", "montgomery", "nashville", "oklahoma city", "phoenix", "providence", "raleigh", "richmond", "sacramento", "salem", "salt lake city", "springfield", "st. paul", "tallahassee", "topeka", "trenton", "washington"], "qid": "geo880_176", "answer": ["albany", "atlanta", "austin", "baton rouge", "boise", "boston", "charleston", "columbia", "columbus", "denver", "des moines", "hartford", "honolulu", "indianapolis", "jackson", "lansing", "lincoln", "little rock", "madison", "montgomery", "nashville", "oklahoma city", "phoenix", "providence", "raleigh", "richmond", "sacramento", "salem", "salt lake city", "springfield", "st. paul", "tallahassee", "topeka", "trenton", "washington"]}
{"query": "Name the longest river in US .", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(longest(river(loc_2(countryid('usa')))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_177", "answer": ["missouri"]}
{"query": "Name the major lakes in Michigan .", "prolog": "answer(A,(major(A),lake(A),loc(A,B),const(B,stateid(michigan))))", "funql": "answer(major(lake(loc_2(stateid('michigan')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_178", "answer": []}
{"query": "Name the major rivers in Florida .", "prolog": "answer(A,(major(A),river(A),loc(A,B),const(B,stateid(florida))))", "funql": "answer(major(river(loc_2(stateid('florida')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_179", "answer": []}
{"query": "Name the rivers in Arkansas .", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(arkansas))))", "funql": "answer(river(loc_2(stateid('arkansas'))))", "prolog_ans": "[arkansas,mississippi,ouachita,red,'st. francis',white]", "funql_ans": "[riverid(arkansas),riverid(mississippi),riverid(ouachita),riverid(red),riverid('st. francis'),riverid(white)]", "funql_answer_parsed": ["arkansas", "mississippi", "ouachita", "red", "st. francis", "white"], "prolog_answer_parsed": ["arkansas", "mississippi", "ouachita", "red", "st. francis", "white"], "qid": "geo880_180", "answer": ["arkansas", "mississippi", "ouachita", "red", "st. francis", "white"]}
{"query": "Name the states which have no surrounding states .", "prolog": "answer(A,(state(A),not((next_to(A,B),state(B)))))", "funql": "answer(exclude(state(all), next_to_2(state(all))))", "prolog_ans": "[alaska,hawaii]", "funql_ans": "[stateid(alaska),stateid(hawaii)]", "funql_answer_parsed": ["alaska", "hawaii"], "prolog_answer_parsed": ["alaska", "hawaii"], "qid": "geo880_181", "answer": ["alaska", "hawaii"]}
{"query": "Number of citizens in Boulder ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boulder,_))))", "funql": "answer(population_1(cityid('boulder', _)))", "prolog_ans": "[76685]", "funql_ans": "[76685]", "funql_answer_parsed": [76685], "prolog_answer_parsed": [76685], "qid": "geo880_182", "answer": [76685]}
{"query": "Number of people in Boulder ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boulder,_))))", "funql": "answer(population_1(cityid('boulder', _)))", "prolog_ans": "[76685]", "funql_ans": "[76685]", "funql_answer_parsed": [76685], "prolog_answer_parsed": [76685], "qid": "geo880_183", "answer": [76685]}
{"query": "Number of states bordering Iowa ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))", "funql": "answer(count(state(next_to_2(stateid('iowa')))))", "prolog_ans": "[6]", "funql_ans": "[6]", "funql_answer_parsed": [6], "prolog_answer_parsed": [6], "qid": "geo880_184", "answer": [6]}
{"query": "Of the states washed by the Mississippi river which has the lowest point ?", "prolog": "answer(D,(state(D),loc(B,D),lowest(B,(state(A),traverse(C,A),const(C,riverid(mississippi)),loc(B,A),place(B)))))", "funql": "answer(state(loc_1(lowest(place(loc_2(state(traverse_1(river(riverid('mississippi'))))))))))", "prolog_ans": "[alabama,arkansas,illinois,iowa,kentucky,louisiana,minnesota,mississippi,missouri,tennessee,texas,wisconsin]", "funql_ans": "[stateid(louisiana)]", "funql_answer_parsed": ["louisiana"], "prolog_answer_parsed": ["alabama", "arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "texas", "wisconsin"], "qid": "geo880_185", "answer": ["louisiana"]}
{"query": "People in Boulder ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boulder,_))))", "funql": "answer(population_1(cityid('boulder', _)))", "prolog_ans": "[76685]", "funql_ans": "[76685]", "funql_answer_parsed": [76685], "prolog_answer_parsed": [76685], "qid": "geo880_186", "answer": [76685]}
{"query": "Population of Boulder ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boulder,_))))", "funql": "answer(population_1(cityid('boulder', _)))", "prolog_ans": "[76685]", "funql_ans": "[76685]", "funql_answer_parsed": [76685], "prolog_answer_parsed": [76685], "qid": "geo880_187", "answer": [76685]}
{"query": "Rivers in New York ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid('new york'))))", "funql": "answer(river(loc_2(stateid('new york'))))", "prolog_ans": "[allegheny,delaware,hudson]", "funql_ans": "[riverid(allegheny),riverid(delaware),riverid(hudson)]", "funql_answer_parsed": ["allegheny", "delaware", "hudson"], "prolog_answer_parsed": ["allegheny", "delaware", "hudson"], "qid": "geo880_188", "answer": ["allegheny", "delaware", "hudson"]}
{"query": "Sacramento is the capital of which state ?", "prolog": "answer(A,(const(B,cityid(sacramento,_)),capital(B),loc(B,A),state(A)))", "funql": "answer(state(loc_1(capital(cityid('sacramento', _)))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_189", "answer": ["california"]}
{"query": "San Antonio is in what state ?", "prolog": "answer(A,(const(B,cityid('san antonio',_)),loc(B,A),state(A)))", "funql": "answer(state(loc_1(cityid('san antonio', _))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_190", "answer": ["texas"]}
{"query": "Show major cities in Colorado .", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(colorado))))", "funql": "answer(major(city(loc_2(stateid('colorado')))))", "prolog_ans": "[aurora,'colorado springs',denver]", "funql_ans": "[cityid(aurora,co),cityid('colorado springs',co),cityid(denver,co)]", "funql_answer_parsed": ["aurora", "colorado springs", "denver"], "prolog_answer_parsed": ["aurora", "colorado springs", "denver"], "qid": "geo880_191", "answer": ["aurora", "colorado springs", "denver"]}
{"query": "Show me all the major lakes in the US .", "prolog": "answer(A,(major(A),lake(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(major(lake(loc_2(countryid('usa')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_192", "answer": [], "python_impossible": true}
{"query": "State the state with the largest area .", "prolog": "answer(A,largest(B,(state(A),area(A,B))))", "funql": "answer(largest_one(area_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_193", "answer": ["alaska"]}
{"query": "States bordering Iowa ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))", "funql": "answer(state(next_to_2(stateid('iowa'))))", "prolog_ans": "[illinois,minnesota,missouri,nebraska,'south dakota',wisconsin]", "funql_ans": "[stateid(illinois),stateid(minnesota),stateid(missouri),stateid(nebraska),stateid('south dakota'),stateid(wisconsin)]", "funql_answer_parsed": ["illinois", "minnesota", "missouri", "nebraska", "south dakota", "wisconsin"], "prolog_answer_parsed": ["illinois", "minnesota", "missouri", "nebraska", "south dakota", "wisconsin"], "qid": "geo880_194", "answer": ["illinois", "minnesota", "missouri", "nebraska", "south dakota", "wisconsin"]}
{"query": "Tell me what cities are in Texas .", "prolog": "answer(A,(city(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(city(loc_2(stateid('texas'))))", "prolog_ans": "[abilene,amarillo,arlington,austin,beaumont,brownsville,'corpus christi',dallas,'el paso','fort worth',garland,'grand prairie',houston,irving,laredo,longview,lubbock,mcallen,mesquite,midland,odessa,pasadena,plano,'port arthur',richardson,'san angelo','san antonio',tyler,waco,'wichita falls']", "funql_ans": "[cityid(abilene,tx),cityid(amarillo,tx),cityid(arlington,tx),cityid(austin,tx),cityid(beaumont,tx),cityid(brownsville,tx),cityid('corpus christi',tx),cityid(dallas,tx),cityid('el paso',tx),cityid('fort worth',tx),cityid(garland,tx),cityid('grand prairie',tx),cityid(houston,tx),cityid(irving,tx),cityid(laredo,tx),cityid(longview,tx),cityid(lubbock,tx),cityid(mcallen,tx),cityid(mesquite,tx),cityid(midland,tx),cityid(odessa,tx),cityid(pasadena,tx),cityid(plano,tx),cityid('port arthur',tx),cityid(richardson,tx),cityid('san angelo',tx),cityid('san antonio',tx),cityid(tyler,tx),cityid(waco,tx),cityid('wichita falls',tx)]", "funql_answer_parsed": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"], "prolog_answer_parsed": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"], "qid": "geo880_195", "answer": ["abilene", "amarillo", "arlington", "austin", "beaumont", "brownsville", "corpus christi", "dallas", "el paso", "fort worth", "garland", "grand prairie", "houston", "irving", "laredo", "longview", "lubbock", "mcallen", "mesquite", "midland", "odessa", "pasadena", "plano", "port arthur", "richardson", "san angelo", "san antonio", "tyler", "waco", "wichita falls"]}
{"query": "Through which states does the longest river in Texas run ?", "prolog": "answer(A,(longest(B,(river(B),loc(B,C),const(C,stateid(texas)))),traverse(B,A)))", "funql": "answer(state(traverse_1(longest(river(loc_2(stateid('texas')))))))", "prolog_ans": "[colorado,'new mexico',texas,usa]", "funql_ans": "[stateid(colorado),stateid('new mexico'),stateid(texas)]", "funql_answer_parsed": ["colorado", "new mexico", "texas"], "prolog_answer_parsed": ["colorado", "new mexico", "texas", "usa"], "qid": "geo880_196", "answer": ["colorado", "new mexico", "texas"]}
{"query": "Through which states does the Mississippi flow ?", "prolog": "answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))", "funql": "answer(state(traverse_1(riverid('mississippi'))))", "prolog_ans": "[arkansas,illinois,iowa,kentucky,louisiana,minnesota,mississippi,missouri,tennessee,wisconsin]", "funql_ans": "[stateid(arkansas),stateid(illinois),stateid(iowa),stateid(kentucky),stateid(louisiana),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(tennessee),stateid(wisconsin)]", "funql_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "prolog_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "qid": "geo880_197", "answer": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"]}
{"query": "Through which states does the Mississippi run ?", "prolog": "answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))", "funql": "answer(state(traverse_1(riverid('mississippi'))))", "prolog_ans": "[arkansas,illinois,iowa,kentucky,louisiana,minnesota,mississippi,missouri,tennessee,wisconsin]", "funql_ans": "[stateid(arkansas),stateid(illinois),stateid(iowa),stateid(kentucky),stateid(louisiana),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(tennessee),stateid(wisconsin)]", "funql_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "prolog_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "qid": "geo880_198", "answer": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"]}
{"query": "What are all the rivers in Texas ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(river(loc_2(stateid('texas'))))", "prolog_ans": "[canadian,pecos,red,'rio grande',washita]", "funql_ans": "[riverid(canadian),riverid(pecos),riverid(red),riverid('rio grande'),riverid(washita)]", "funql_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "prolog_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "qid": "geo880_199", "answer": ["canadian", "pecos", "red", "rio grande", "washita"]}
{"query": "What are major rivers in Texas ?", "prolog": "answer(A,(major(A),river(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(major(river(loc_2(stateid('texas')))))", "prolog_ans": "[canadian,pecos,red,'rio grande',washita]", "funql_ans": "[riverid(canadian),riverid(pecos),riverid(red),riverid('rio grande'),riverid(washita)]", "funql_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "prolog_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "qid": "geo880_200", "answer": ["canadian", "pecos", "red", "rio grande", "washita"]}
{"query": "What are the biggest rivers in Texas ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(longest(river(loc_2(stateid('texas')))))", "prolog_ans": "['rio grande']", "funql_ans": "[riverid('rio grande')]", "funql_answer_parsed": ["rio grande"], "prolog_answer_parsed": ["rio grande"], "qid": "geo880_201", "answer": ["rio grande"], "python_impossible": true}
{"query": "What are the capital cities of the states which border Texas ?", "prolog": "answer(A,(capital(A),city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))", "funql": "answer(capital(city(loc_2(state(next_to_2(stateid('texas')))))))", "prolog_ans": "['baton rouge','little rock','oklahoma city']", "funql_ans": "[cityid('baton rouge',la),cityid('little rock',ar),cityid('oklahoma city',ok)]", "funql_answer_parsed": ["baton rouge", "little rock", "oklahoma city"], "prolog_answer_parsed": ["baton rouge", "little rock", "oklahoma city"], "qid": "geo880_202", "answer": ["baton rouge", "little rock", "oklahoma city"]}
{"query": "What is the capital city in Texas ?", "prolog": "answer(A,(capital(A),city(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(capital(city(loc_2(stateid('texas')))))", "prolog_ans": "[austin]", "funql_ans": "[cityid(austin,tx)]", "funql_answer_parsed": ["austin"], "prolog_answer_parsed": ["austin"], "qid": "geo880_203", "answer": ["austin"]}
{"query": "What are the capitals of states that border Missouri ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(missouri))))", "funql": "answer(capital(loc_2(state(next_to_2(stateid('missouri'))))))", "prolog_ans": "['des moines',frankfort,lincoln,'little rock',nashville,'oklahoma city',springfield,topeka]", "funql_ans": "[cityid('des moines',ia),cityid(lincoln,ne),cityid('little rock',ar),cityid(nashville,tn),cityid('oklahoma city',ok),cityid(springfield,il),cityid(topeka,ks)]", "funql_answer_parsed": ["des moines", "lincoln", "little rock", "nashville", "oklahoma city", "springfield", "topeka"], "prolog_answer_parsed": ["des moines", "frankfort", "lincoln", "little rock", "nashville", "oklahoma city", "springfield", "topeka"], "qid": "geo880_204", "answer": ["des moines", "frankfort", "lincoln", "little rock", "nashville", "oklahoma city", "springfield", "topeka"]}
{"query": "What are the capitals of the states that border Texas ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))", "funql": "answer(capital(loc_2(state(next_to_2(stateid('texas'))))))", "prolog_ans": "['baton rouge','little rock','oklahoma city','santa fe']", "funql_ans": "[cityid('baton rouge',la),cityid('little rock',ar),cityid('oklahoma city',ok)]", "funql_answer_parsed": ["baton rouge", "little rock", "oklahoma city"], "prolog_answer_parsed": ["baton rouge", "little rock", "oklahoma city", "santa fe"], "qid": "geo880_205", "answer": ["baton rouge", "little rock", "oklahoma city", "santa fe"]}
{"query": "What are the cities in California ?", "prolog": "answer(A,(city(A),loc(A,B),const(B,stateid(california))))", "funql": "answer(city(loc_2(stateid('california'))))", "prolog_ans": "[alameda,alhambra,anaheim,bakersfield,berkeley,'buena park',burbank,carson,'chula vista','citrus heights',compton,concord,'costa mesa','daly city',downey,'east los angeles','el cajon','el monte',escondido,fairfield,fremont,fresno,fullerton,'garden grove',glendale,hayward,'huntington beach',inglewood,irvine,lakewood,'long beach','los angeles',modesto,'mountain view','newport beach',norwalk,oakland,oceanside,ontario,orange,oxnard,pasadena,pomona,'redondo beach',richmond,riverside,sacramento,salinas,'san bernardino','san diego','san francisco','san jose','san leandro','san mateo','santa ana','santa barbara','santa clara','santa monica','santa rosa','scotts valley','simi valley','south gate',stockton,sunnyvale,'thousand oaks',torrance,vallejo,ventura,'west covina',westminster,whittier]", "funql_ans": "[cityid(alameda,ca),cityid(alhambra,ca),cityid(anaheim,ca),cityid(bakersfield,ca),cityid(berkeley,ca),cityid('buena park',ca),cityid(burbank,ca),cityid(carson,ca),cityid('chula vista',ca),cityid('citrus heights',ca),cityid(compton,ca),cityid(concord,ca),cityid('costa mesa',ca),cityid('daly city',ca),cityid(downey,ca),cityid('east los angeles',ca),cityid('el cajon',ca),cityid('el monte',ca),cityid(escondido,ca),cityid(fairfield,ca),cityid(fremont,ca),cityid(fresno,ca),cityid(fullerton,ca),cityid('garden grove',ca),cityid(glendale,ca),cityid(hayward,ca),cityid('huntington beach',ca),cityid(inglewood,ca),cityid(irvine,ca),cityid(lakewood,ca),cityid('long beach',ca),cityid('los angeles',ca),cityid(modesto,ca),cityid('mountain view',ca),cityid('newport beach',ca),cityid(norwalk,ca),cityid(oakland,ca),cityid(oceanside,ca),cityid(ontario,ca),cityid(orange,ca),cityid(oxnard,ca),cityid(pasadena,ca),cityid(pomona,ca),cityid('redondo beach',ca),cityid(richmond,ca),cityid(riverside,ca),cityid(sacramento,ca),cityid(salinas,ca),cityid('san bernardino',ca),cityid('san diego',ca),cityid('san francisco',ca),cityid('san jose',ca),cityid('san leandro',ca),cityid('san mateo',ca),cityid('santa ana',ca),cityid('santa barbara',ca),cityid('santa clara',ca),cityid('santa monica',ca),cityid('santa rosa',ca),cityid('scotts valley',ca),cityid('simi valley',ca),cityid('south gate',ca),cityid(stockton,ca),cityid(sunnyvale,ca),cityid('thousand oaks',ca),cityid(torrance,ca),cityid(vallejo,ca),cityid(ventura,ca),cityid('west covina',ca),cityid(westminster,ca),cityid(whittier,ca)]", "funql_answer_parsed": ["alameda", "alhambra", "anaheim", "bakersfield", "berkeley", "buena park", "burbank", "carson", "chula vista", "citrus heights", "compton", "concord", "costa mesa", "daly city", "downey", "east los angeles", "el cajon", "el monte", "escondido", "fairfield", "fremont", "fresno", "fullerton", "garden grove", "glendale", "hayward", "huntington beach", "inglewood", "irvine", "lakewood", "long beach", "los angeles", "modesto", "mountain view", "newport beach", "norwalk", "oakland", "oceanside", "ontario", "orange", "oxnard", "pasadena", "pomona", "redondo beach", "richmond", "riverside", "sacramento", "salinas", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "scotts valley", "simi valley", "south gate", "stockton", "sunnyvale", "thousand oaks", "torrance", "vallejo", "ventura", "west covina", "westminster", "whittier"], "prolog_answer_parsed": ["alameda", "alhambra", "anaheim", "bakersfield", "berkeley", "buena park", "burbank", "carson", "chula vista", "citrus heights", "compton", "concord", "costa mesa", "daly city", "downey", "east los angeles", "el cajon", "el monte", "escondido", "fairfield", "fremont", "fresno", "fullerton", "garden grove", "glendale", "hayward", "huntington beach", "inglewood", "irvine", "lakewood", "long beach", "los angeles", "modesto", "mountain view", "newport beach", "norwalk", "oakland", "oceanside", "ontario", "orange", "oxnard", "pasadena", "pomona", "redondo beach", "richmond", "riverside", "sacramento", "salinas", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "scotts valley", "simi valley", "south gate", "stockton", "sunnyvale", "thousand oaks", "torrance", "vallejo", "ventura", "west covina", "westminster", "whittier"], "qid": "geo880_206", "answer": ["alameda", "alhambra", "anaheim", "bakersfield", "berkeley", "buena park", "burbank", "carson", "chula vista", "citrus heights", "compton", "concord", "costa mesa", "daly city", "downey", "east los angeles", "el cajon", "el monte", "escondido", "fairfield", "fremont", "fresno", "fullerton", "garden grove", "glendale", "hayward", "huntington beach", "inglewood", "irvine", "lakewood", "long beach", "los angeles", "modesto", "mountain view", "newport beach", "norwalk", "oakland", "oceanside", "ontario", "orange", "oxnard", "pasadena", "pomona", "redondo beach", "richmond", "riverside", "sacramento", "salinas", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "scotts valley", "simi valley", "south gate", "stockton", "sunnyvale", "thousand oaks", "torrance", "vallejo", "ventura", "west covina", "westminster", "whittier"]}
{"query": "What are the cities in states through which the Mississippi runs ?", "prolog": "answer(A,(city(A),loc(A,B),state(B),traverse(C,B),const(C,riverid(mississippi))))", "funql": "answer(city(loc_2(state(traverse_1(riverid('mississippi'))))))", "prolog_ans": "[appleton,'arlington heights',aurora,'baton rouge',bloomington,'cedar rapids',champaign,chattanooga,chicago,cicero,columbia,davenport,decatur,'des moines',dubuque,duluth,elgin,evanston,'fort smith','green bay',independence,jackson,joliet,'kansas city',kenner,kenosha,knoxville,lafayette,'lake charles',lexington,'little rock',louisville,madison,memphis,metairie,milwaukee,minneapolis,monroe,nashville,'new orleans','north little rock','oak lawn',peoria,racine,rochester,rockford,shreveport,'sioux city',skokie,springfield,'st. joseph','st. louis','st. paul',waterloo,waukegan,'west allis']", "funql_ans": "[cityid(appleton,wi),cityid('arlington heights',il),cityid(aurora,il),cityid('baton rouge',la),cityid(bloomington,mn),cityid('cedar rapids',ia),cityid(champaign,il),cityid(chattanooga,tn),cityid(chicago,il),cityid(cicero,il),cityid(columbia,mo),cityid(davenport,ia),cityid(decatur,il),cityid('des moines',ia),cityid(dubuque,ia),cityid(duluth,mn),cityid(elgin,il),cityid(evanston,il),cityid('fort smith',ar),cityid('green bay',wi),cityid(independence,mo),cityid(jackson,ms),cityid(joliet,il),cityid('kansas city',mo),cityid(kenner,la),cityid(kenosha,wi),cityid(knoxville,tn),cityid(lafayette,la),cityid('lake charles',la),cityid(lexington,ky),cityid('little rock',ar),cityid(louisville,ky),cityid(madison,wi),cityid(memphis,tn),cityid(metairie,la),cityid(milwaukee,wi),cityid(minneapolis,mn),cityid(monroe,la),cityid(nashville,tn),cityid('new orleans',la),cityid('north little rock',ar),cityid('oak lawn',il),cityid(peoria,il),cityid(racine,wi),cityid(rochester,mn),cityid(rockford,il),cityid(shreveport,la),cityid('sioux city',ia),cityid(skokie,il),cityid(springfield,il),cityid(springfield,mo),cityid('st. joseph',mo),cityid('st. louis',mo),cityid('st. paul',mn),cityid(waterloo,ia),cityid(waukegan,il),cityid('west allis',wi)]", "funql_answer_parsed": ["appleton", "arlington heights", "aurora", "baton rouge", "bloomington", "cedar rapids", "champaign", "chattanooga", "chicago", "cicero", "columbia", "davenport", "decatur", "des moines", "dubuque", "duluth", "elgin", "evanston", "fort smith", "green bay", "independence", "jackson", "joliet", "kansas city", "kenner", "kenosha", "knoxville", "lafayette", "lake charles", "lexington", "little rock", "louisville", "madison", "memphis", "metairie", "milwaukee", "minneapolis", "monroe", "nashville", "new orleans", "north little rock", "oak lawn", "peoria", "racine", "rochester", "rockford", "shreveport", "sioux city", "skokie", "springfield", "springfield", "st. joseph", "st. louis", "st. paul", "waterloo", "waukegan", "west allis"], "prolog_answer_parsed": ["appleton", "arlington heights", "aurora", "baton rouge", "bloomington", "cedar rapids", "champaign", "chattanooga", "chicago", "cicero", "columbia", "davenport", "decatur", "des moines", "dubuque", "duluth", "elgin", "evanston", "fort smith", "green bay", "independence", "jackson", "joliet", "kansas city", "kenner", "kenosha", "knoxville", "lafayette", "lake charles", "lexington", "little rock", "louisville", "madison", "memphis", "metairie", "milwaukee", "minneapolis", "monroe", "nashville", "new orleans", "north little rock", "oak lawn", "peoria", "racine", "rochester", "rockford", "shreveport", "sioux city", "skokie", "springfield", "st. joseph", "st. louis", "st. paul", "waterloo", "waukegan", "west allis"], "qid": "geo880_207", "answer": ["appleton", "arlington heights", "aurora", "baton rouge", "bloomington", "cedar rapids", "champaign", "chattanooga", "chicago", "cicero", "columbia", "davenport", "decatur", "des moines", "dubuque", "duluth", "elgin", "evanston", "fort smith", "green bay", "independence", "jackson", "joliet", "kansas city", "kenner", "kenosha", "knoxville", "lafayette", "lake charles", "lexington", "little rock", "louisville", "madison", "memphis", "metairie", "milwaukee", "minneapolis", "monroe", "nashville", "new orleans", "north little rock", "oak lawn", "peoria", "racine", "rochester", "rockford", "shreveport", "sioux city", "skokie", "springfield", "st. joseph", "st. louis", "st. paul", "waterloo", "waukegan", "west allis"]}
{"query": "What are the cities of the state with the highest point ?", "prolog": "answer(A,(city(A),loc(A,B),state(B),loc(C,B),highest(C,place(C))))", "funql": "answer(city(loc_2(state(loc_1(highest(place(all)))))))", "prolog_ans": "[anchorage]", "funql_ans": "[cityid(anchorage,ak)]", "funql_answer_parsed": ["anchorage"], "prolog_answer_parsed": ["anchorage"], "qid": "geo880_208", "answer": ["anchorage"]}
{"query": "What are the highest points of all the states ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),state(B))))", "funql": "answer(highest(place(loc_2(state(all)))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_209", "answer": ["mount mckinley"], "python_impossible": true}
{"query": "What are the highest points of states surrounding Mississippi ?", "prolog": "answer(A,(highest(A,(place(A),loc(A,B),state(B))),next_to(B,C),const(C,stateid(mississippi))))", "funql": "answer(highest(place(loc_2(state(next_to_2(stateid('mississippi')))))))", "prolog_ans": "[]", "funql_ans": "[placeid('clingmans dome')]", "funql_answer_parsed": ["clingmans dome"], "prolog_answer_parsed": [], "qid": "geo880_210", "answer": ["clingmans dome"]}
{"query": "What are the lakes in states bordering Texas ?", "prolog": "answer(A,(lake(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))", "funql": "answer(lake(loc_2(state(next_to_2(stateid('texas'))))))", "prolog_ans": "[pontchartrain]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["pontchartrain"], "qid": "geo880_211", "answer": ["pontchartrain"]}
{"query": "What are the largest cities in the states that border the largest state ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),largest(C,state(C)))))", "funql": "answer(largest(city(loc_2(state(next_to_2(largest(state(all))))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_212", "answer": []}
{"query": "What are the major cities in Alabama ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alabama))))", "funql": "answer(major(city(loc_2(stateid('alabama')))))", "prolog_ans": "[birmingham,mobile,montgomery]", "funql_ans": "[cityid(birmingham,al),cityid(mobile,al),cityid(montgomery,al)]", "funql_answer_parsed": ["birmingham", "mobile", "montgomery"], "prolog_answer_parsed": ["birmingham", "mobile", "montgomery"], "qid": "geo880_213", "answer": ["birmingham", "mobile", "montgomery"]}
{"query": "What are the major cities in Alaska ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska))))", "funql": "answer(major(city(loc_2(stateid('alaska')))))", "prolog_ans": "[anchorage]", "funql_ans": "[cityid(anchorage,ak)]", "funql_answer_parsed": ["anchorage"], "prolog_answer_parsed": ["anchorage"], "qid": "geo880_214", "answer": ["anchorage"]}
{"query": "What are the major cities in California ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(california))))", "funql": "answer(major(city(loc_2(stateid('california')))))", "prolog_ans": "[anaheim,fresno,'huntington beach','long beach','los angeles',oakland,riverside,sacramento,'san diego','san francisco','san jose','santa ana']", "funql_ans": "[cityid(anaheim,ca),cityid(fresno,ca),cityid('huntington beach',ca),cityid('long beach',ca),cityid('los angeles',ca),cityid(oakland,ca),cityid(riverside,ca),cityid(sacramento,ca),cityid('san diego',ca),cityid('san francisco',ca),cityid('san jose',ca),cityid('santa ana',ca)]", "funql_answer_parsed": ["anaheim", "fresno", "huntington beach", "long beach", "los angeles", "oakland", "riverside", "sacramento", "san diego", "san francisco", "san jose", "santa ana"], "prolog_answer_parsed": ["anaheim", "fresno", "huntington beach", "long beach", "los angeles", "oakland", "riverside", "sacramento", "san diego", "san francisco", "san jose", "santa ana"], "qid": "geo880_215", "answer": ["anaheim", "fresno", "huntington beach", "long beach", "los angeles", "oakland", "riverside", "sacramento", "san diego", "san francisco", "san jose", "santa ana"]}
{"query": "What are the major cities in Delaware ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(delaware))))", "funql": "answer(major(city(loc_2(stateid('delaware')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_216", "answer": []}
{"query": "What are the major cities in Kansas ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(kansas))))", "funql": "answer(major(city(loc_2(stateid('kansas')))))", "prolog_ans": "['kansas city',wichita]", "funql_ans": "[cityid('kansas city',ks),cityid(wichita,ks)]", "funql_answer_parsed": ["kansas city", "wichita"], "prolog_answer_parsed": ["kansas city", "wichita"], "qid": "geo880_217", "answer": ["kansas city", "wichita"]}
{"query": "What are the major cities in Missouri ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(missouri))))", "funql": "answer(major(city(loc_2(stateid('missouri')))))", "prolog_ans": "['kansas city','st. louis']", "funql_ans": "[cityid('kansas city',mo),cityid('st. louis',mo)]", "funql_answer_parsed": ["kansas city", "st. louis"], "prolog_answer_parsed": ["kansas city", "st. louis"], "qid": "geo880_218", "answer": ["kansas city", "st. louis"]}
{"query": "What are the major cities in New Mexico ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid('new mexico'))))", "funql": "answer(major(city(loc_2(stateid('new mexico')))))", "prolog_ans": "[albuquerque]", "funql_ans": "[cityid(albuquerque,nm)]", "funql_answer_parsed": ["albuquerque"], "prolog_answer_parsed": ["albuquerque"], "qid": "geo880_219", "answer": ["albuquerque"]}
{"query": "What are the major cities in New York ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid('new york'))))", "funql": "answer(major(city(loc_2(stateid('new york')))))", "prolog_ans": "[buffalo,'new york',rochester,syracuse,yonkers]", "funql_ans": "[cityid(buffalo,ny),cityid('new york',ny),cityid(rochester,ny),cityid(syracuse,ny),cityid(yonkers,ny)]", "funql_answer_parsed": ["buffalo", "new york", "rochester", "syracuse", "yonkers"], "prolog_answer_parsed": ["buffalo", "new york", "rochester", "syracuse", "yonkers"], "qid": "geo880_220", "answer": ["buffalo", "new york", "rochester", "syracuse", "yonkers"]}
{"query": "What are the major cities in North Carolina ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid('north carolina'))))", "funql": "answer(major(city(loc_2(stateid('north carolina')))))", "prolog_ans": "[charlotte,greensboro]", "funql_ans": "[cityid(charlotte,nc),cityid(greensboro,nc)]", "funql_answer_parsed": ["charlotte", "greensboro"], "prolog_answer_parsed": ["charlotte", "greensboro"], "qid": "geo880_221", "answer": ["charlotte", "greensboro"]}
{"query": "What are the major cities in Ohio ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(ohio))))", "funql": "answer(major(city(loc_2(stateid('ohio')))))", "prolog_ans": "[akron,cincinnati,cleveland,columbus,dayton,toledo]", "funql_ans": "[cityid(akron,oh),cityid(cincinnati,oh),cityid(cleveland,oh),cityid(columbus,oh),cityid(dayton,oh),cityid(toledo,oh)]", "funql_answer_parsed": ["akron", "cincinnati", "cleveland", "columbus", "dayton", "toledo"], "prolog_answer_parsed": ["akron", "cincinnati", "cleveland", "columbus", "dayton", "toledo"], "qid": "geo880_222", "answer": ["akron", "cincinnati", "cleveland", "columbus", "dayton", "toledo"]}
{"query": "What are the major cities in Oklahoma ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(oklahoma))))", "funql": "answer(major(city(loc_2(stateid('oklahoma')))))", "prolog_ans": "['oklahoma city',tulsa]", "funql_ans": "[cityid('oklahoma city',ok),cityid(tulsa,ok)]", "funql_answer_parsed": ["oklahoma city", "tulsa"], "prolog_answer_parsed": ["oklahoma city", "tulsa"], "qid": "geo880_223", "answer": ["oklahoma city", "tulsa"]}
{"query": "What are the major cities in Rhode Island ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid('rhode island'))))", "funql": "answer(major(city(loc_2(stateid('rhode island')))))", "prolog_ans": "[providence]", "funql_ans": "[cityid(providence,ri)]", "funql_answer_parsed": ["providence"], "prolog_answer_parsed": ["providence"], "qid": "geo880_224", "answer": ["providence"]}
{"query": "What are the major cities in states through which the Mississippi runs ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),state(B),traverse(C,B),const(C,riverid(mississippi))))", "funql": "answer(major(city(loc_2(state(traverse_1(riverid('mississippi')))))))", "prolog_ans": "['baton rouge',chattanooga,chicago,'des moines',jackson,'kansas city',knoxville,lexington,'little rock',louisville,madison,memphis,metairie,milwaukee,minneapolis,nashville,'new orleans',shreveport,'st. louis','st. paul']", "funql_ans": "[cityid('baton rouge',la),cityid(chattanooga,tn),cityid(chicago,il),cityid('des moines',ia),cityid(jackson,ms),cityid('kansas city',mo),cityid(knoxville,tn),cityid(lexington,ky),cityid('little rock',ar),cityid(louisville,ky),cityid(madison,wi),cityid(memphis,tn),cityid(metairie,la),cityid(milwaukee,wi),cityid(minneapolis,mn),cityid(nashville,tn),cityid('new orleans',la),cityid(shreveport,la),cityid('st. louis',mo),cityid('st. paul',mn)]", "funql_answer_parsed": ["baton rouge", "chattanooga", "chicago", "des moines", "jackson", "kansas city", "knoxville", "lexington", "little rock", "louisville", "madison", "memphis", "metairie", "milwaukee", "minneapolis", "nashville", "new orleans", "shreveport", "st. louis", "st. paul"], "prolog_answer_parsed": ["baton rouge", "chattanooga", "chicago", "des moines", "jackson", "kansas city", "knoxville", "lexington", "little rock", "louisville", "madison", "memphis", "metairie", "milwaukee", "minneapolis", "nashville", "new orleans", "shreveport", "st. louis", "st. paul"], "qid": "geo880_225", "answer": ["baton rouge", "chattanooga", "chicago", "des moines", "jackson", "kansas city", "knoxville", "lexington", "little rock", "louisville", "madison", "memphis", "metairie", "milwaukee", "minneapolis", "nashville", "new orleans", "shreveport", "st. louis", "st. paul"]}
{"query": "What are the major cities in Texas ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(major(city(loc_2(stateid('texas')))))", "prolog_ans": "[arlington,austin,'corpus christi',dallas,'el paso','fort worth',houston,lubbock,'san antonio']", "funql_ans": "[cityid(arlington,tx),cityid(austin,tx),cityid('corpus christi',tx),cityid(dallas,tx),cityid('el paso',tx),cityid('fort worth',tx),cityid(houston,tx),cityid(lubbock,tx),cityid('san antonio',tx)]", "funql_answer_parsed": ["arlington", "austin", "corpus christi", "dallas", "el paso", "fort worth", "houston", "lubbock", "san antonio"], "prolog_answer_parsed": ["arlington", "austin", "corpus christi", "dallas", "el paso", "fort worth", "houston", "lubbock", "san antonio"], "qid": "geo880_226", "answer": ["arlington", "austin", "corpus christi", "dallas", "el paso", "fort worth", "houston", "lubbock", "san antonio"]}
{"query": "What are the major cities in the largest state ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),largest(B,state(B))))", "funql": "answer(major(city(loc_2(largest(state(all))))))", "prolog_ans": "[anchorage]", "funql_ans": "[cityid(anchorage,ak)]", "funql_answer_parsed": ["anchorage"], "prolog_answer_parsed": ["anchorage"], "qid": "geo880_227", "answer": ["anchorage"]}
{"query": "What are the major cities in the smallest state in the US ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(major(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))", "prolog_ans": "[washington]", "funql_ans": "[cityid(washington,dc)]", "funql_answer_parsed": ["washington"], "prolog_answer_parsed": ["washington"], "qid": "geo880_228", "answer": ["washington"]}
{"query": "What are the major cities in the state of California ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),state(B),const(B,stateid(california))))", "funql": "answer(major(city(loc_2(state(stateid('california'))))))", "prolog_ans": "[anaheim,fresno,'huntington beach','long beach','los angeles',oakland,riverside,sacramento,'san diego','san francisco','san jose','santa ana']", "funql_ans": "[cityid(anaheim,ca),cityid(fresno,ca),cityid('huntington beach',ca),cityid('long beach',ca),cityid('los angeles',ca),cityid(oakland,ca),cityid(riverside,ca),cityid(sacramento,ca),cityid('san diego',ca),cityid('san francisco',ca),cityid('san jose',ca),cityid('santa ana',ca)]", "funql_answer_parsed": ["anaheim", "fresno", "huntington beach", "long beach", "los angeles", "oakland", "riverside", "sacramento", "san diego", "san francisco", "san jose", "santa ana"], "prolog_answer_parsed": ["anaheim", "fresno", "huntington beach", "long beach", "los angeles", "oakland", "riverside", "sacramento", "san diego", "san francisco", "san jose", "santa ana"], "qid": "geo880_229", "answer": ["anaheim", "fresno", "huntington beach", "long beach", "los angeles", "oakland", "riverside", "sacramento", "san diego", "san francisco", "san jose", "santa ana"]}
{"query": "What are the major cities in the states through which the major river in Virginia runs ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),state(B),major(C),river(C),loc(C,D),const(D,stateid(virginia)),traverse(C,B)))", "funql": "answer(major(city(loc_2(state(traverse_1(major(river(loc_2(stateid('virginia'))))))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_230", "answer": []}
{"query": "What are the major cities in the USA ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(major(city(loc_2(countryid('usa')))))", "prolog_ans": "[akron,albuquerque,anaheim,anchorage,arlington,atlanta,aurora,austin,baltimore,'baton rouge',birmingham,boston,buffalo,charlotte,chattanooga,chicago,cincinnati,cleveland,'colorado springs',columbus,'corpus christi',dallas,dayton,denver,'des moines',detroit,'el paso',ewa,flint,'fort lauderdale','fort wayne','fort worth',fresno,gary,'grand rapids',greensboro,honolulu,houston,'huntington beach',indianapolis,jackson,jacksonville,'jersey city','kansas city',knoxville,'las vegas',lexington,lincoln,'little rock','long beach','los angeles',louisville,lubbock,madison,memphis,mesa,metairie,miami,milwaukee,minneapolis,mobile,montgomery,nashville,'new orleans','new york',newark,norfolk,oakland,'oklahoma city',omaha,philadelphia,phoenix,pittsburgh,portland,providence,richmond,riverside,rochester,sacramento,'salt lake city','san antonio','san diego','san francisco','san jose','santa ana',seattle,shreveport,spokane,springfield,'st. louis','st. paul','st. petersburg',syracuse,tacoma,tampa,toledo,tucson,tulsa,'virginia beach',warren,washington,wichita,worcester,yonkers]", "funql_ans": "[cityid(akron,oh),cityid(albuquerque,nm),cityid(anaheim,ca),cityid(anchorage,ak),cityid(arlington,tx),cityid(arlington,va),cityid(atlanta,ga),cityid(aurora,co),cityid(austin,tx),cityid(baltimore,md),cityid('baton rouge',la),cityid(birmingham,al),cityid(boston,ma),cityid(buffalo,ny),cityid(charlotte,nc),cityid(chattanooga,tn),cityid(chicago,il),cityid(cincinnati,oh),cityid(cleveland,oh),cityid('colorado springs',co),cityid(columbus,ga),cityid(columbus,oh),cityid('corpus christi',tx),cityid(dallas,tx),cityid(dayton,oh),cityid(denver,co),cityid('des moines',ia),cityid(detroit,mi),cityid('el paso',tx),cityid(ewa,hi),cityid(flint,mi),cityid('fort lauderdale',fl),cityid('fort wayne',in),cityid('fort worth',tx),cityid(fresno,ca),cityid(gary,in),cityid('grand rapids',mi),cityid(greensboro,nc),cityid(honolulu,hi),cityid(houston,tx),cityid('huntington beach',ca),cityid(indianapolis,in),cityid(jackson,ms),cityid(jacksonville,fl),cityid('jersey city',nj),cityid('kansas city',ks),cityid('kansas city',mo),cityid(knoxville,tn),cityid('las vegas',nv),cityid(lexington,ky),cityid(lincoln,ne),cityid('little rock',ar),cityid('long beach',ca),cityid('los angeles',ca),cityid(louisville,ky),cityid(lubbock,tx),cityid(madison,wi),cityid(memphis,tn),cityid(mesa,az),cityid(metairie,la),cityid(miami,fl),cityid(milwaukee,wi),cityid(minneapolis,mn),cityid(mobile,al),cityid(montgomery,al),cityid(nashville,tn),cityid('new orleans',la),cityid('new york',ny),cityid(newark,nj),cityid(norfolk,va),cityid(oakland,ca),cityid('oklahoma city',ok),cityid(omaha,ne),cityid(philadelphia,pa),cityid(phoenix,az),cityid(pittsburgh,pa),cityid(portland,or),cityid(providence,ri),cityid(richmond,va),cityid(riverside,ca),cityid(rochester,ny),cityid(sacramento,ca),cityid('salt lake city',ut),cityid('san antonio',tx),cityid('san diego',ca),cityid('san francisco',ca),cityid('san jose',ca),cityid('santa ana',ca),cityid(seattle,wa),cityid(shreveport,la),cityid(spokane,wa),cityid(springfield,ma),cityid('st. louis',mo),cityid('st. paul',mn),cityid('st. petersburg',fl),cityid(syracuse,ny),cityid(tacoma,wa),cityid(tampa,fl),cityid(toledo,oh),cityid(tucson,az),cityid(tulsa,ok),cityid('virginia beach',va),cityid(warren,mi),cityid(washington,dc),cityid(wichita,ks),cityid(worcester,ma),cityid(yonkers,ny)]", "funql_answer_parsed": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"], "prolog_answer_parsed": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"], "qid": "geo880_231", "answer": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"]}
{"query": "What are the major cities in Vermont ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont))))", "funql": "answer(major(city(loc_2(stateid('vermont')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_232", "answer": []}
{"query": "What are the major cities in Wyoming ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(wyoming))))", "funql": "answer(major(city(loc_2(stateid('wyoming')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_233", "answer": []}
{"query": "What are the major cities of Texas ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(major(city(loc_2(stateid('texas')))))", "prolog_ans": "[arlington,austin,'corpus christi',dallas,'el paso','fort worth',houston,lubbock,'san antonio']", "funql_ans": "[cityid(arlington,tx),cityid(austin,tx),cityid('corpus christi',tx),cityid(dallas,tx),cityid('el paso',tx),cityid('fort worth',tx),cityid(houston,tx),cityid(lubbock,tx),cityid('san antonio',tx)]", "funql_answer_parsed": ["arlington", "austin", "corpus christi", "dallas", "el paso", "fort worth", "houston", "lubbock", "san antonio"], "prolog_answer_parsed": ["arlington", "austin", "corpus christi", "dallas", "el paso", "fort worth", "houston", "lubbock", "san antonio"], "qid": "geo880_234", "answer": ["arlington", "austin", "corpus christi", "dallas", "el paso", "fort worth", "houston", "lubbock", "san antonio"]}
{"query": "What are the major cities of the United States ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(major(city(loc_2(countryid('usa')))))", "prolog_ans": "[akron,albuquerque,anaheim,anchorage,arlington,atlanta,aurora,austin,baltimore,'baton rouge',birmingham,boston,buffalo,charlotte,chattanooga,chicago,cincinnati,cleveland,'colorado springs',columbus,'corpus christi',dallas,dayton,denver,'des moines',detroit,'el paso',ewa,flint,'fort lauderdale','fort wayne','fort worth',fresno,gary,'grand rapids',greensboro,honolulu,houston,'huntington beach',indianapolis,jackson,jacksonville,'jersey city','kansas city',knoxville,'las vegas',lexington,lincoln,'little rock','long beach','los angeles',louisville,lubbock,madison,memphis,mesa,metairie,miami,milwaukee,minneapolis,mobile,montgomery,nashville,'new orleans','new york',newark,norfolk,oakland,'oklahoma city',omaha,philadelphia,phoenix,pittsburgh,portland,providence,richmond,riverside,rochester,sacramento,'salt lake city','san antonio','san diego','san francisco','san jose','santa ana',seattle,shreveport,spokane,springfield,'st. louis','st. paul','st. petersburg',syracuse,tacoma,tampa,toledo,tucson,tulsa,'virginia beach',warren,washington,wichita,worcester,yonkers]", "funql_ans": "[cityid(akron,oh),cityid(albuquerque,nm),cityid(anaheim,ca),cityid(anchorage,ak),cityid(arlington,tx),cityid(arlington,va),cityid(atlanta,ga),cityid(aurora,co),cityid(austin,tx),cityid(baltimore,md),cityid('baton rouge',la),cityid(birmingham,al),cityid(boston,ma),cityid(buffalo,ny),cityid(charlotte,nc),cityid(chattanooga,tn),cityid(chicago,il),cityid(cincinnati,oh),cityid(cleveland,oh),cityid('colorado springs',co),cityid(columbus,ga),cityid(columbus,oh),cityid('corpus christi',tx),cityid(dallas,tx),cityid(dayton,oh),cityid(denver,co),cityid('des moines',ia),cityid(detroit,mi),cityid('el paso',tx),cityid(ewa,hi),cityid(flint,mi),cityid('fort lauderdale',fl),cityid('fort wayne',in),cityid('fort worth',tx),cityid(fresno,ca),cityid(gary,in),cityid('grand rapids',mi),cityid(greensboro,nc),cityid(honolulu,hi),cityid(houston,tx),cityid('huntington beach',ca),cityid(indianapolis,in),cityid(jackson,ms),cityid(jacksonville,fl),cityid('jersey city',nj),cityid('kansas city',ks),cityid('kansas city',mo),cityid(knoxville,tn),cityid('las vegas',nv),cityid(lexington,ky),cityid(lincoln,ne),cityid('little rock',ar),cityid('long beach',ca),cityid('los angeles',ca),cityid(louisville,ky),cityid(lubbock,tx),cityid(madison,wi),cityid(memphis,tn),cityid(mesa,az),cityid(metairie,la),cityid(miami,fl),cityid(milwaukee,wi),cityid(minneapolis,mn),cityid(mobile,al),cityid(montgomery,al),cityid(nashville,tn),cityid('new orleans',la),cityid('new york',ny),cityid(newark,nj),cityid(norfolk,va),cityid(oakland,ca),cityid('oklahoma city',ok),cityid(omaha,ne),cityid(philadelphia,pa),cityid(phoenix,az),cityid(pittsburgh,pa),cityid(portland,or),cityid(providence,ri),cityid(richmond,va),cityid(riverside,ca),cityid(rochester,ny),cityid(sacramento,ca),cityid('salt lake city',ut),cityid('san antonio',tx),cityid('san diego',ca),cityid('san francisco',ca),cityid('san jose',ca),cityid('santa ana',ca),cityid(seattle,wa),cityid(shreveport,la),cityid(spokane,wa),cityid(springfield,ma),cityid('st. louis',mo),cityid('st. paul',mn),cityid('st. petersburg',fl),cityid(syracuse,ny),cityid(tacoma,wa),cityid(tampa,fl),cityid(toledo,oh),cityid(tucson,az),cityid(tulsa,ok),cityid('virginia beach',va),cityid(warren,mi),cityid(washington,dc),cityid(wichita,ks),cityid(worcester,ma),cityid(yonkers,ny)]", "funql_answer_parsed": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"], "prolog_answer_parsed": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"], "qid": "geo880_235", "answer": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"]}
{"query": "What are the major cities of the US ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(major(city(loc_2(countryid('usa')))))", "prolog_ans": "[akron,albuquerque,anaheim,anchorage,arlington,atlanta,aurora,austin,baltimore,'baton rouge',birmingham,boston,buffalo,charlotte,chattanooga,chicago,cincinnati,cleveland,'colorado springs',columbus,'corpus christi',dallas,dayton,denver,'des moines',detroit,'el paso',ewa,flint,'fort lauderdale','fort wayne','fort worth',fresno,gary,'grand rapids',greensboro,honolulu,houston,'huntington beach',indianapolis,jackson,jacksonville,'jersey city','kansas city',knoxville,'las vegas',lexington,lincoln,'little rock','long beach','los angeles',louisville,lubbock,madison,memphis,mesa,metairie,miami,milwaukee,minneapolis,mobile,montgomery,nashville,'new orleans','new york',newark,norfolk,oakland,'oklahoma city',omaha,philadelphia,phoenix,pittsburgh,portland,providence,richmond,riverside,rochester,sacramento,'salt lake city','san antonio','san diego','san francisco','san jose','santa ana',seattle,shreveport,spokane,springfield,'st. louis','st. paul','st. petersburg',syracuse,tacoma,tampa,toledo,tucson,tulsa,'virginia beach',warren,washington,wichita,worcester,yonkers]", "funql_ans": "[cityid(akron,oh),cityid(albuquerque,nm),cityid(anaheim,ca),cityid(anchorage,ak),cityid(arlington,tx),cityid(arlington,va),cityid(atlanta,ga),cityid(aurora,co),cityid(austin,tx),cityid(baltimore,md),cityid('baton rouge',la),cityid(birmingham,al),cityid(boston,ma),cityid(buffalo,ny),cityid(charlotte,nc),cityid(chattanooga,tn),cityid(chicago,il),cityid(cincinnati,oh),cityid(cleveland,oh),cityid('colorado springs',co),cityid(columbus,ga),cityid(columbus,oh),cityid('corpus christi',tx),cityid(dallas,tx),cityid(dayton,oh),cityid(denver,co),cityid('des moines',ia),cityid(detroit,mi),cityid('el paso',tx),cityid(ewa,hi),cityid(flint,mi),cityid('fort lauderdale',fl),cityid('fort wayne',in),cityid('fort worth',tx),cityid(fresno,ca),cityid(gary,in),cityid('grand rapids',mi),cityid(greensboro,nc),cityid(honolulu,hi),cityid(houston,tx),cityid('huntington beach',ca),cityid(indianapolis,in),cityid(jackson,ms),cityid(jacksonville,fl),cityid('jersey city',nj),cityid('kansas city',ks),cityid('kansas city',mo),cityid(knoxville,tn),cityid('las vegas',nv),cityid(lexington,ky),cityid(lincoln,ne),cityid('little rock',ar),cityid('long beach',ca),cityid('los angeles',ca),cityid(louisville,ky),cityid(lubbock,tx),cityid(madison,wi),cityid(memphis,tn),cityid(mesa,az),cityid(metairie,la),cityid(miami,fl),cityid(milwaukee,wi),cityid(minneapolis,mn),cityid(mobile,al),cityid(montgomery,al),cityid(nashville,tn),cityid('new orleans',la),cityid('new york',ny),cityid(newark,nj),cityid(norfolk,va),cityid(oakland,ca),cityid('oklahoma city',ok),cityid(omaha,ne),cityid(philadelphia,pa),cityid(phoenix,az),cityid(pittsburgh,pa),cityid(portland,or),cityid(providence,ri),cityid(richmond,va),cityid(riverside,ca),cityid(rochester,ny),cityid(sacramento,ca),cityid('salt lake city',ut),cityid('san antonio',tx),cityid('san diego',ca),cityid('san francisco',ca),cityid('san jose',ca),cityid('santa ana',ca),cityid(seattle,wa),cityid(shreveport,la),cityid(spokane,wa),cityid(springfield,ma),cityid('st. louis',mo),cityid('st. paul',mn),cityid('st. petersburg',fl),cityid(syracuse,ny),cityid(tacoma,wa),cityid(tampa,fl),cityid(toledo,oh),cityid(tucson,az),cityid(tulsa,ok),cityid('virginia beach',va),cityid(warren,mi),cityid(washington,dc),cityid(wichita,ks),cityid(worcester,ma),cityid(yonkers,ny)]", "funql_answer_parsed": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"], "prolog_answer_parsed": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"], "qid": "geo880_236", "answer": ["akron", "albuquerque", "anaheim", "anchorage", "arlington", "atlanta", "aurora", "austin", "baltimore", "baton rouge", "birmingham", "boston", "buffalo", "charlotte", "chattanooga", "chicago", "cincinnati", "cleveland", "colorado springs", "columbus", "corpus christi", "dallas", "dayton", "denver", "des moines", "detroit", "el paso", "ewa", "flint", "fort lauderdale", "fort wayne", "fort worth", "fresno", "gary", "grand rapids", "greensboro", "honolulu", "houston", "huntington beach", "indianapolis", "jackson", "jacksonville", "jersey city", "kansas city", "knoxville", "las vegas", "lexington", "lincoln", "little rock", "long beach", "los angeles", "louisville", "lubbock", "madison", "memphis", "mesa", "metairie", "miami", "milwaukee", "minneapolis", "mobile", "montgomery", "nashville", "new orleans", "new york", "newark", "norfolk", "oakland", "oklahoma city", "omaha", "philadelphia", "phoenix", "pittsburgh", "portland", "providence", "richmond", "riverside", "rochester", "sacramento", "salt lake city", "san antonio", "san diego", "san francisco", "san jose", "santa ana", "seattle", "shreveport", "spokane", "springfield", "st. louis", "st. paul", "st. petersburg", "syracuse", "tacoma", "tampa", "toledo", "tucson", "tulsa", "virginia beach", "warren", "washington", "wichita", "worcester", "yonkers"]}
{"query": "What are the major lakes in United States ?", "prolog": "answer(A,(major(A),lake(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(major(lake(loc_2(countryid('usa')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_237", "answer": []}
{"query": "What are the major rivers in Ohio ?", "prolog": "answer(A,(major(A),river(A),loc(A,B),const(B,stateid(ohio))))", "funql": "answer(major(river(loc_2(stateid('ohio')))))", "prolog_ans": "[ohio,wabash]", "funql_ans": "[riverid(ohio),riverid(wabash)]", "funql_answer_parsed": ["ohio", "wabash"], "prolog_answer_parsed": ["ohio", "wabash"], "qid": "geo880_238", "answer": ["ohio", "wabash"]}
{"query": "What are the major rivers in the US ?", "prolog": "answer(A,(major(A),river(A),loc(A,B),const(B,countryid(usa))))", "funql": "answer(major(river(loc_2(countryid('usa')))))", "prolog_ans": "[arkansas,canadian,cheyenne,cimarron,colorado,columbia,cumberland,dakota,gila,green,'little missouri',mississippi,missouri,'north platte',ohio,ouachita,pearl,pecos,red,'rio grande','smoky hill',snake,tennessee,wabash,washita,white,yellowstone]", "funql_ans": "[riverid(arkansas),riverid(canadian),riverid(cheyenne),riverid(cimarron),riverid(colorado),riverid(columbia),riverid(cumberland),riverid(dakota),riverid(gila),riverid(green),riverid('little missouri'),riverid(mississippi),riverid(missouri),riverid('north platte'),riverid(ohio),riverid(ouachita),riverid(pearl),riverid(pecos),riverid(red),riverid('rio grande'),riverid('smoky hill'),riverid(snake),riverid(tennessee),riverid(wabash),riverid(washita),riverid(white),riverid(yellowstone)]", "funql_answer_parsed": ["arkansas", "canadian", "cheyenne", "cimarron", "colorado", "columbia", "cumberland", "dakota", "gila", "green", "little missouri", "mississippi", "missouri", "north platte", "ohio", "ouachita", "pearl", "pecos", "red", "rio grande", "smoky hill", "snake", "tennessee", "wabash", "washita", "white", "yellowstone"], "prolog_answer_parsed": ["arkansas", "canadian", "cheyenne", "cimarron", "colorado", "columbia", "cumberland", "dakota", "gila", "green", "little missouri", "mississippi", "missouri", "north platte", "ohio", "ouachita", "pearl", "pecos", "red", "rio grande", "smoky hill", "snake", "tennessee", "wabash", "washita", "white", "yellowstone"], "qid": "geo880_239", "answer": ["arkansas", "canadian", "cheyenne", "cimarron", "colorado", "columbia", "cumberland", "dakota", "gila", "green", "little missouri", "mississippi", "missouri", "north platte", "ohio", "ouachita", "pearl", "pecos", "red", "rio grande", "smoky hill", "snake", "tennessee", "wabash", "washita", "white", "yellowstone"]}
{"query": "What are the names of the major cities in Illinois ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(illinois))))", "funql": "answer(major(city(loc_2(stateid('illinois')))))", "prolog_ans": "[chicago]", "funql_ans": "[cityid(chicago,il)]", "funql_answer_parsed": ["chicago"], "prolog_answer_parsed": ["chicago"], "qid": "geo880_240", "answer": ["chicago"]}
{"query": "What are the neighboring states for Michigan ?", "prolog": "answer(A,(next_to(A,B),state(A),const(B,stateid(michigan))))", "funql": "answer(state(next_to_2(stateid('michigan'))))", "prolog_ans": "[indiana,ohio,wisconsin]", "funql_ans": "[stateid(indiana),stateid(ohio),stateid(wisconsin)]", "funql_answer_parsed": ["indiana", "ohio", "wisconsin"], "prolog_answer_parsed": ["indiana", "ohio", "wisconsin"], "qid": "geo880_241", "answer": ["indiana", "ohio", "wisconsin"]}
{"query": "What are the population densities of each US state ?", "prolog": "answer(A,(density(B,A),state(B)))", "funql": "answer(density_1(state(all)))", "prolog_ans": "[0.6798646362098139,4.8007545317915525,5.351700680272109,7.244343891402715,8.957505576015354,9.231966053748232,10.71546052631579,11.373493975903614,17.208480565371026,20.297542043984475,23.842105263157894,27.12391705211542,27.778846153846153,28.724179829890645,33.81932962573275,42.96992481203007,43.24517512508935,48.29383886255924,51.740674955595026,52.83018867924528,53.203661327231124,53.33068472716233,60.36484245439469,70.53084648493544,75.31914893617021,80.57851239669421,83.69989136822609,88.17610062893081,92.75042444821732,99.21327729281172,100.3374795101726,108.94636924537257,111.67647617239415,131.1776251226693,141.9375509728533,148.97233812393756,149.81012658227849,151.65745856353593,158.32478632478632,202.4866785079929,261.50121065375305,261.8301403725611,290.60665362035223,357.5967413441955,403.1548757170172,580.0,618.9243027888447,692.5398358281024,781.5181518151816,945.8071144214717]", "funql_ans": "[0.0053517006802721095,0.6798646362098139,4.8007545317915525,7.244343891402715,8.957505576015354,9.231966053748232,10.71546052631579,11.373493975903614,17.208480565371026,20.297542043984475,23.842105263157894,27.12391705211542,27.778846153846153,28.724179829890645,33.81932962573275,42.96992481203007,43.24517512508935,48.29383886255924,51.740674955595026,52.83018867924528,53.203661327231124,53.33068472716233,60.36484245439469,70.53084648493544,75.31914893617021,80.57851239669421,83.69989136822609,88.17610062893081,92.75042444821732,99.21327729281172,100.3374795101726,108.94636924537257,111.67647617239415,131.1776251226693,141.9375509728533,148.97233812393756,149.81012658227849,151.65745856353593,158.32478632478632,202.4866785079929,261.50121065375305,261.8301403725611,290.60665362035223,357.5967413441955,403.1548757170172,580.0,618.9243027888447,692.5398358281024,781.5181518151816,945.8071144214717]", "funql_answer_parsed": [0.0053517007, 0.6798646362, 4.8007545318, 7.2443438914, 8.957505576, 9.2319660537, 10.7154605263, 11.3734939759, 17.2084805654, 20.297542044, 23.8421052632, 27.1239170521, 27.7788461538, 28.7241798299, 33.8193296257, 42.969924812, 43.2451751251, 48.2938388626, 51.7406749556, 52.8301886792, 53.2036613272, 53.3306847272, 60.3648424544, 70.5308464849, 75.3191489362, 80.5785123967, 83.6998913682, 88.1761006289, 92.7504244482, 99.2132772928, 100.3374795102, 108.9463692454, 111.6764761724, 131.1776251227, 141.9375509729, 148.9723381239, 149.8101265823, 151.6574585635, 158.3247863248, 202.486678508, 261.5012106538, 261.8301403726, 290.6066536204, 357.5967413442, 403.154875717, 580.0, 618.9243027888, 692.5398358281, 781.5181518152, 945.8071144215], "prolog_answer_parsed": [0.6798646362, 4.8007545318, 5.3517006803, 7.2443438914, 8.957505576, 9.2319660537, 10.7154605263, 11.3734939759, 17.2084805654, 20.297542044, 23.8421052632, 27.1239170521, 27.7788461538, 28.7241798299, 33.8193296257, 42.969924812, 43.2451751251, 48.2938388626, 51.7406749556, 52.8301886792, 53.2036613272, 53.3306847272, 60.3648424544, 70.5308464849, 75.3191489362, 80.5785123967, 83.6998913682, 88.1761006289, 92.7504244482, 99.2132772928, 100.3374795102, 108.9463692454, 111.6764761724, 131.1776251227, 141.9375509729, 148.9723381239, 149.8101265823, 151.6574585635, 158.3247863248, 202.486678508, 261.5012106538, 261.8301403726, 290.6066536204, 357.5967413442, 403.154875717, 580.0, 618.9243027888, 692.5398358281, 781.5181518152, 945.8071144215], "qid": "geo880_242", "answer": [0.6798646362098139, 4.8007545317915525, 5.351700680272109, 7.244343891402715, 8.957505576015354, 9.231966053748232, 10.71546052631579, 11.373493975903614, 17.208480565371026, 20.297542043984475, 23.842105263157894, 27.12391705211542, 27.778846153846153, 28.724179829890645, 33.81932962573275, 42.96992481203007, 43.24517512508935, 48.29383886255924, 51.740674955595026, 52.83018867924528, 53.203661327231124, 53.33068472716233, 60.36484245439469, 70.53084648493544, 75.31914893617021, 80.57851239669421, 83.69989136822609, 88.17610062893081, 92.75042444821732, 99.21327729281172, 100.3374795101726, 108.94636924537257, 111.67647617239415, 131.1776251226693, 141.9375509728533, 148.97233812393756, 149.81012658227849, 151.65745856353593, 158.32478632478632, 202.4866785079929, 261.50121065375305, 261.8301403725611, 290.60665362035223, 357.5967413441955, 403.1548757170172, 580.0, 618.9243027888447, 692.5398358281024, 781.5181518151816, 945.8071144214717]}
{"query": "What is the population of Mississippi ?", "prolog": "answer(A,(population(B,A),const(B,stateid(mississippi))))", "funql": "answer(population_1(stateid('mississippi')))", "prolog_ans": "[2520000.0]", "funql_ans": "[2520000.0]", "funql_answer_parsed": [2520000.0], "prolog_answer_parsed": [2520000.0], "qid": "geo880_243", "answer": [2520000.0]}
{"query": "What are the populations of all the major cities in Montana ?", "prolog": "answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(montana))))", "funql": "answer(population_1(major(city(loc_2(stateid('montana'))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_244", "answer": []}
{"query": "What are the populations of states through which the Mississippi river runs ?", "prolog": "answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))", "funql": "answer(population_1(state(traverse_1(river(riverid('mississippi'))))))", "prolog_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "prolog_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "qid": "geo880_245", "answer": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0]}
{"query": "What are the populations of states through which the Mississippi river runs ?", "prolog": "answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))", "funql": "answer(population_1(state(traverse_1(river(riverid('mississippi'))))))", "prolog_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "prolog_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "qid": "geo880_246", "answer": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0]}
{"query": "What are the populations of states through which the Mississippi runs ?", "prolog": "answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))", "funql": "answer(population_1(state(traverse_1(riverid('mississippi')))))", "prolog_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "prolog_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "qid": "geo880_247", "answer": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0]}
{"query": "What are the populations of states through which the Mississippi runs ?", "prolog": "answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))", "funql": "answer(population_1(state(traverse_1(riverid('mississippi')))))", "prolog_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "prolog_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "qid": "geo880_248", "answer": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0]}
{"query": "What are the populations of states which border Texas ?", "prolog": "answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(texas))))", "funql": "answer(population_1(state(next_to_2(stateid('texas')))))", "prolog_ans": "[1303000.0,2286000.0,3025000.0,4206000.0]", "funql_ans": "[1303000.0,2286000.0,3025000.0,4206000.0]", "funql_answer_parsed": [1303000.0, 2286000.0, 3025000.0, 4206000.0], "prolog_answer_parsed": [1303000.0, 2286000.0, 3025000.0, 4206000.0], "qid": "geo880_249", "answer": [1303000.0, 2286000.0, 3025000.0, 4206000.0]}
{"query": "What are the populations of the major cities of Texas ?", "prolog": "answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(texas))))", "funql": "answer(population_1(major(city(loc_2(stateid('texas'))))))", "prolog_ans": "[160123,173979,231999,345496,385164,425259,785880,904078,1595138]", "funql_ans": "[160123,173979,231999,345496,385164,425259,785880,904078,1595138]", "funql_answer_parsed": [160123, 173979, 231999, 345496, 385164, 425259, 785880, 904078, 1595138], "prolog_answer_parsed": [160123, 173979, 231999, 345496, 385164, 425259, 785880, 904078, 1595138], "qid": "geo880_250", "answer": [160123, 173979, 231999, 345496, 385164, 425259, 785880, 904078, 1595138]}
{"query": "What are the populations of the states through which the Mississippi river runs ?", "prolog": "answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))", "funql": "answer(population_1(state(traverse_1(river(riverid('mississippi'))))))", "prolog_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "prolog_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "qid": "geo880_251", "answer": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0]}
{"query": "What are the populations of the states through which the Mississippi river runs ?", "prolog": "answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))", "funql": "answer(population_1(state(traverse_1(river(riverid('mississippi'))))))", "prolog_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "prolog_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "qid": "geo880_252", "answer": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0]}
{"query": "What are the populations of the states through which the Mississippi runs ?", "prolog": "answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))", "funql": "answer(population_1(state(traverse_1(riverid('mississippi')))))", "prolog_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "prolog_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "qid": "geo880_253", "answer": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0]}
{"query": "What are the populations of the states through which the Mississippi runs ?", "prolog": "answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))", "funql": "answer(population_1(state(traverse_1(riverid('mississippi')))))", "prolog_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_ans": "[2286000.0,2364000.0,2520000.0,2913000.0,4076000.0,4206000.0,4591000.0,4700000.0,4916000.0,11400000.0]", "funql_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "prolog_answer_parsed": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0], "qid": "geo880_254", "answer": [2286000.0, 2364000.0, 2520000.0, 2913000.0, 4076000.0, 4206000.0, 4591000.0, 4700000.0, 4916000.0, 11400000.0]}
{"query": "What are the rivers in Alaska ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))", "funql": "answer(river(loc_2(stateid('alaska'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_255", "answer": []}
{"query": "What are the rivers in the state of Indiana ?", "prolog": "answer(A,(river(A),loc(A,B),state(B),const(B,stateid(indiana))))", "funql": "answer(river(loc_2(state(stateid('indiana')))))", "prolog_ans": "[ohio,wabash]", "funql_ans": "[riverid(ohio),riverid(wabash)]", "funql_answer_parsed": ["ohio", "wabash"], "prolog_answer_parsed": ["ohio", "wabash"], "qid": "geo880_256", "answer": ["ohio", "wabash"]}
{"query": "What are the rivers in the state of Texas ?", "prolog": "answer(A,(river(A),loc(A,B),state(B),const(B,stateid(texas))))", "funql": "answer(river(loc_2(state(stateid('texas')))))", "prolog_ans": "[canadian,pecos,red,'rio grande',washita]", "funql_ans": "[riverid(canadian),riverid(pecos),riverid(red),riverid('rio grande'),riverid(washita)]", "funql_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "prolog_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "qid": "geo880_257", "answer": ["canadian", "pecos", "red", "rio grande", "washita"]}
{"query": "What are the rivers of Montana ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(montana))))", "funql": "answer(river(loc_2(stateid('montana'))))", "prolog_ans": "[bighorn,'clark fork','little missouri',missouri,powder,yellowstone]", "funql_ans": "[riverid(bighorn),riverid('clark fork'),riverid('little missouri'),riverid(missouri),riverid(powder),riverid(yellowstone)]", "funql_answer_parsed": ["bighorn", "clark fork", "little missouri", "missouri", "powder", "yellowstone"], "prolog_answer_parsed": ["bighorn", "clark fork", "little missouri", "missouri", "powder", "yellowstone"], "qid": "geo880_258", "answer": ["bighorn", "clark fork", "little missouri", "missouri", "powder", "yellowstone"]}
{"query": "What are the states ?", "prolog": "answer(A,state(A))", "funql": "answer(state(all))", "prolog_ans": "[alabama,alaska,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,hawaii,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maine,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'rhode island','south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(alabama),stateid(alaska),stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid(connecticut),stateid(delaware),stateid('district of columbia'),stateid(florida),stateid(georgia),stateid(hawaii),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(maine),stateid(maryland),stateid(massachusetts),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new hampshire'),stateid('new jersey'),stateid('new mexico'),stateid('new york'),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid(oregon),stateid(pennsylvania),stateid('rhode island'),stateid('south carolina'),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(vermont),stateid(virginia),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_259", "answer": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"]}
{"query": "What are the states that border the state with the greatest population ?", "prolog": "answer(A,(state(A),next_to(B,A),largest(C,(state(B),population(B,C)))))", "funql": "answer(state(next_to_2(largest_one(population_1(state(all))))))", "prolog_ans": "[arizona,nevada,oregon]", "funql_ans": "[stateid(arizona),stateid(nevada),stateid(oregon)]", "funql_answer_parsed": ["arizona", "nevada", "oregon"], "prolog_answer_parsed": ["arizona", "nevada", "oregon"], "qid": "geo880_260", "answer": ["arizona", "nevada", "oregon"]}
{"query": "What are the states that the Potomac runs through ?", "prolog": "answer(A,(state(A),const(B,riverid(potomac)),traverse(B,A)))", "funql": "answer(state(traverse_1(riverid('potomac'))))", "prolog_ans": "['district of columbia',maryland,virginia,'west virginia']", "funql_ans": "[stateid('district of columbia'),stateid(maryland),stateid(virginia),stateid('west virginia')]", "funql_answer_parsed": ["district of columbia", "maryland", "virginia", "west virginia"], "prolog_answer_parsed": ["district of columbia", "maryland", "virginia", "west virginia"], "qid": "geo880_261", "answer": ["district of columbia", "maryland", "virginia", "west virginia"]}
{"query": "What are the states through which the longest river runs ?", "prolog": "answer(A,(state(A),traverse(B,A),longest(B,(river(B)))))", "funql": "answer(state(traverse_1(longest(river(all)))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_262", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "What can you tell me about the population of Missouri ?", "prolog": "answer(A,(population(B,A),const(B,stateid(missouri))))", "funql": "answer(population_1(stateid('missouri')))", "prolog_ans": "[4916000.0]", "funql_ans": "[4916000.0]", "funql_answer_parsed": [4916000.0], "prolog_answer_parsed": [4916000.0], "qid": "geo880_263", "answer": [4916000.0]}
{"query": "What capital has the largest population ?", "prolog": "answer(A,largest(B,(capital(A),population(A,B))))", "funql": "answer(largest_one(population_1(capital(all))))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_264", "answer": ["phoenix"]}
{"query": "What capital is the largest in the US ?", "prolog": "answer(A,largest(A,(capital(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(capital(loc_2(countryid('usa')))))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_265", "answer": ["phoenix"]}
{"query": "What cities are located in Pennsylvania ?", "prolog": "answer(A,(city(A),loc(A,B),const(B,stateid(pennsylvania))))", "funql": "answer(city(loc_2(stateid('pennsylvania'))))", "prolog_ans": "[abingdon,allentown,altoona,bethlehem,'bristol township',erie,'lower merion','penn hills',philadelphia,pittsburgh,reading,scranton,'upper darby']", "funql_ans": "[cityid(abingdon,pa),cityid(allentown,pa),cityid(altoona,pa),cityid(bethlehem,pa),cityid('bristol township',pa),cityid(erie,pa),cityid('lower merion',pa),cityid('penn hills',pa),cityid(philadelphia,pa),cityid(pittsburgh,pa),cityid(reading,pa),cityid(scranton,pa),cityid('upper darby',pa)]", "funql_answer_parsed": ["abingdon", "allentown", "altoona", "bethlehem", "bristol township", "erie", "lower merion", "penn hills", "philadelphia", "pittsburgh", "reading", "scranton", "upper darby"], "prolog_answer_parsed": ["abingdon", "allentown", "altoona", "bethlehem", "bristol township", "erie", "lower merion", "penn hills", "philadelphia", "pittsburgh", "reading", "scranton", "upper darby"], "qid": "geo880_266", "answer": ["abingdon", "allentown", "altoona", "bethlehem", "bristol township", "erie", "lower merion", "penn hills", "philadelphia", "pittsburgh", "reading", "scranton", "upper darby"]}
{"query": "What cities in California ?", "prolog": "answer(A,(city(A),loc(A,B),const(B,stateid(california))))", "funql": "answer(city(loc_2(stateid('california'))))", "prolog_ans": "[alameda,alhambra,anaheim,bakersfield,berkeley,'buena park',burbank,carson,'chula vista','citrus heights',compton,concord,'costa mesa','daly city',downey,'east los angeles','el cajon','el monte',escondido,fairfield,fremont,fresno,fullerton,'garden grove',glendale,hayward,'huntington beach',inglewood,irvine,lakewood,'long beach','los angeles',modesto,'mountain view','newport beach',norwalk,oakland,oceanside,ontario,orange,oxnard,pasadena,pomona,'redondo beach',richmond,riverside,sacramento,salinas,'san bernardino','san diego','san francisco','san jose','san leandro','san mateo','santa ana','santa barbara','santa clara','santa monica','santa rosa','scotts valley','simi valley','south gate',stockton,sunnyvale,'thousand oaks',torrance,vallejo,ventura,'west covina',westminster,whittier]", "funql_ans": "[cityid(alameda,ca),cityid(alhambra,ca),cityid(anaheim,ca),cityid(bakersfield,ca),cityid(berkeley,ca),cityid('buena park',ca),cityid(burbank,ca),cityid(carson,ca),cityid('chula vista',ca),cityid('citrus heights',ca),cityid(compton,ca),cityid(concord,ca),cityid('costa mesa',ca),cityid('daly city',ca),cityid(downey,ca),cityid('east los angeles',ca),cityid('el cajon',ca),cityid('el monte',ca),cityid(escondido,ca),cityid(fairfield,ca),cityid(fremont,ca),cityid(fresno,ca),cityid(fullerton,ca),cityid('garden grove',ca),cityid(glendale,ca),cityid(hayward,ca),cityid('huntington beach',ca),cityid(inglewood,ca),cityid(irvine,ca),cityid(lakewood,ca),cityid('long beach',ca),cityid('los angeles',ca),cityid(modesto,ca),cityid('mountain view',ca),cityid('newport beach',ca),cityid(norwalk,ca),cityid(oakland,ca),cityid(oceanside,ca),cityid(ontario,ca),cityid(orange,ca),cityid(oxnard,ca),cityid(pasadena,ca),cityid(pomona,ca),cityid('redondo beach',ca),cityid(richmond,ca),cityid(riverside,ca),cityid(sacramento,ca),cityid(salinas,ca),cityid('san bernardino',ca),cityid('san diego',ca),cityid('san francisco',ca),cityid('san jose',ca),cityid('san leandro',ca),cityid('san mateo',ca),cityid('santa ana',ca),cityid('santa barbara',ca),cityid('santa clara',ca),cityid('santa monica',ca),cityid('santa rosa',ca),cityid('scotts valley',ca),cityid('simi valley',ca),cityid('south gate',ca),cityid(stockton,ca),cityid(sunnyvale,ca),cityid('thousand oaks',ca),cityid(torrance,ca),cityid(vallejo,ca),cityid(ventura,ca),cityid('west covina',ca),cityid(westminster,ca),cityid(whittier,ca)]", "funql_answer_parsed": ["alameda", "alhambra", "anaheim", "bakersfield", "berkeley", "buena park", "burbank", "carson", "chula vista", "citrus heights", "compton", "concord", "costa mesa", "daly city", "downey", "east los angeles", "el cajon", "el monte", "escondido", "fairfield", "fremont", "fresno", "fullerton", "garden grove", "glendale", "hayward", "huntington beach", "inglewood", "irvine", "lakewood", "long beach", "los angeles", "modesto", "mountain view", "newport beach", "norwalk", "oakland", "oceanside", "ontario", "orange", "oxnard", "pasadena", "pomona", "redondo beach", "richmond", "riverside", "sacramento", "salinas", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "scotts valley", "simi valley", "south gate", "stockton", "sunnyvale", "thousand oaks", "torrance", "vallejo", "ventura", "west covina", "westminster", "whittier"], "prolog_answer_parsed": ["alameda", "alhambra", "anaheim", "bakersfield", "berkeley", "buena park", "burbank", "carson", "chula vista", "citrus heights", "compton", "concord", "costa mesa", "daly city", "downey", "east los angeles", "el cajon", "el monte", "escondido", "fairfield", "fremont", "fresno", "fullerton", "garden grove", "glendale", "hayward", "huntington beach", "inglewood", "irvine", "lakewood", "long beach", "los angeles", "modesto", "mountain view", "newport beach", "norwalk", "oakland", "oceanside", "ontario", "orange", "oxnard", "pasadena", "pomona", "redondo beach", "richmond", "riverside", "sacramento", "salinas", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "scotts valley", "simi valley", "south gate", "stockton", "sunnyvale", "thousand oaks", "torrance", "vallejo", "ventura", "west covina", "westminster", "whittier"], "qid": "geo880_267", "answer": ["alameda", "alhambra", "anaheim", "bakersfield", "berkeley", "buena park", "burbank", "carson", "chula vista", "citrus heights", "compton", "concord", "costa mesa", "daly city", "downey", "east los angeles", "el cajon", "el monte", "escondido", "fairfield", "fremont", "fresno", "fullerton", "garden grove", "glendale", "hayward", "huntington beach", "inglewood", "irvine", "lakewood", "long beach", "los angeles", "modesto", "mountain view", "newport beach", "norwalk", "oakland", "oceanside", "ontario", "orange", "oxnard", "pasadena", "pomona", "redondo beach", "richmond", "riverside", "sacramento", "salinas", "san bernardino", "san diego", "san francisco", "san jose", "san leandro", "san mateo", "santa ana", "santa barbara", "santa clara", "santa monica", "santa rosa", "scotts valley", "simi valley", "south gate", "stockton", "sunnyvale", "thousand oaks", "torrance", "vallejo", "ventura", "west covina", "westminster", "whittier"]}
{"query": "What cities in Texas have the highest number of citizens ?", "prolog": "answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('texas'))))))", "prolog_ans": "[houston]", "funql_ans": "[cityid(houston,tx)]", "funql_answer_parsed": ["houston"], "prolog_answer_parsed": ["houston"], "qid": "geo880_268", "answer": ["houston"]}
{"query": "What cities in Texas have the highest populations ?", "prolog": "answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('texas'))))))", "prolog_ans": "[houston]", "funql_ans": "[cityid(houston,tx)]", "funql_answer_parsed": ["houston"], "prolog_answer_parsed": ["houston"], "qid": "geo880_269", "answer": ["houston"]}
{"query": "What city has the largest population ?", "prolog": "answer(A,largest(B,(city(A),population(A,B))))", "funql": "answer(largest_one(population_1(city(all))))", "prolog_ans": "['new york']", "funql_ans": "[cityid('new york',ny)]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_270", "answer": ["new york"]}
{"query": "What city has the least population ?", "prolog": "answer(A,smallest(B,(city(A),population(A,B))))", "funql": "answer(smallest_one(population_1(city(all))))", "prolog_ans": "['scotts valley']", "funql_ans": "[cityid('scotts valley',ca)]", "funql_answer_parsed": ["scotts valley"], "prolog_answer_parsed": ["scotts valley"], "qid": "geo880_271", "answer": ["scotts valley"]}
{"query": "What city has the most people ?", "prolog": "answer(A,largest(B,(city(A),population(A,B))))", "funql": "answer(largest_one(population_1(city(all))))", "prolog_ans": "['new york']", "funql_ans": "[cityid('new york',ny)]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_272", "answer": ["new york"]}
{"query": "What city in the United States has the highest population density ?", "prolog": "answer(A,largest(B,(city(A),loc(A,C),const(C,countryid(usa)),density(A,B))))", "funql": "answer(largest_one(density_1(city(loc_2(countryid('usa'))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_273", "answer": []}
{"query": "What is capital of Iowa ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))", "funql": "answer(capital(loc_2(stateid('iowa'))))", "prolog_ans": "['des moines']", "funql_ans": "[cityid('des moines',ia)]", "funql_answer_parsed": ["des moines"], "prolog_answer_parsed": ["des moines"], "qid": "geo880_274", "answer": ["des moines"]}
{"query": "What is capital of the state with the lowest point ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),loc(C,B),lowest(C,place(C))))", "funql": "answer(capital(loc_2(state(loc_1(lowest(place(all)))))))", "prolog_ans": "[albany,annapolis,atlanta,augusta,austin,'baton rouge',bismarck,boise,boston,'carson city',charleston,cheyenne,columbia,columbus,concord,denver,'des moines',dover,frankfort,harrisburg,hartford,helena,honolulu,indianapolis,jackson,'jefferson city',juneau,lansing,lincoln,'little rock',madison,montgomery,montpelier,nashville,'oklahoma city',olympia,phoenix,pierre,providence,raleigh,richmond,sacramento,salem,'salt lake city','santa fe',springfield,'st. paul',tallahassee,topeka,trenton,washington]", "funql_ans": "[cityid(sacramento,ca)]", "funql_answer_parsed": ["sacramento"], "prolog_answer_parsed": ["albany", "annapolis", "atlanta", "augusta", "austin", "baton rouge", "bismarck", "boise", "boston", "carson city", "charleston", "cheyenne", "columbia", "columbus", "concord", "denver", "des moines", "dover", "frankfort", "harrisburg", "hartford", "helena", "honolulu", "indianapolis", "jackson", "jefferson city", "juneau", "lansing", "lincoln", "little rock", "madison", "montgomery", "montpelier", "nashville", "oklahoma city", "olympia", "phoenix", "pierre", "providence", "raleigh", "richmond", "sacramento", "salem", "salt lake city", "santa fe", "springfield", "st. paul", "tallahassee", "topeka", "trenton", "washington"], "qid": "geo880_275", "answer": ["sacramento"]}
{"query": "What is largest capital ?", "prolog": "answer(A,largest(A,capital(A)))", "funql": "answer(largest(capital(all)))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_276", "answer": ["phoenix"]}
{"query": "What is the adjacent state of California ?", "prolog": "answer(A,(next_to(A,B),state(A),const(B,stateid(california))))", "funql": "answer(state(next_to_2(stateid('california'))))", "prolog_ans": "[arizona,nevada,oregon]", "funql_ans": "[stateid(arizona),stateid(nevada),stateid(oregon)]", "funql_answer_parsed": ["arizona", "nevada", "oregon"], "prolog_answer_parsed": ["arizona", "nevada", "oregon"], "qid": "geo880_277", "answer": ["arizona", "nevada", "oregon"]}
{"query": "What is the area of Alaska ?", "prolog": "answer(A,(area(B,A),const(B,stateid(alaska))))", "funql": "answer(area_1(stateid('alaska')))", "prolog_ans": "[591000.0]", "funql_ans": "[591000.0]", "funql_answer_parsed": [591000.0], "prolog_answer_parsed": [591000.0], "qid": "geo880_278", "answer": [591000.0]}
{"query": "What is the area of all the states combined ?", "prolog": "answer(A,sum(B,(area(C,B),state(C)),A))", "funql": "answer(sum(area_1(state(all))))", "prolog_ans": "[3670038.0]", "funql_ans": "[3670038.0]", "funql_answer_parsed": [3670038.0], "prolog_answer_parsed": [3670038.0], "qid": "geo880_279", "answer": [3670038.0]}
{"query": "What is the area of California ?", "prolog": "answer(A,(area(B,A),const(B,stateid(california))))", "funql": "answer(area_1(stateid('california')))", "prolog_ans": "[158000.0]", "funql_ans": "[158000.0]", "funql_answer_parsed": [158000.0], "prolog_answer_parsed": [158000.0], "qid": "geo880_280", "answer": [158000.0]}
{"query": "What is the area of Florida ?", "prolog": "answer(A,(area(B,A),const(B,stateid(florida))))", "funql": "answer(area_1(stateid('florida')))", "prolog_ans": "[68664.0]", "funql_ans": "[68664.0]", "funql_answer_parsed": [68664.0], "prolog_answer_parsed": [68664.0], "qid": "geo880_281", "answer": [68664.0]}
{"query": "What is the area of Idaho ?", "prolog": "answer(A,(area(B,A),const(B,stateid(idaho))))", "funql": "answer(area_1(stateid('idaho')))", "prolog_ans": "[83000.0]", "funql_ans": "[83000.0]", "funql_answer_parsed": [83000.0], "prolog_answer_parsed": [83000.0], "qid": "geo880_282", "answer": [83000.0]}
{"query": "What is the area of Maine ?", "prolog": "answer(A,(area(B,A),const(B,stateid(maine))))", "funql": "answer(area_1(stateid('maine')))", "prolog_ans": "[33265.0]", "funql_ans": "[33265.0]", "funql_answer_parsed": [33265.0], "prolog_answer_parsed": [33265.0], "qid": "geo880_283", "answer": [33265.0]}
{"query": "What is the area of Maryland in square kilometers ?", "prolog": "answer(A,(area(B,A),const(B,stateid(maryland))))", "funql": "answer(area_1(stateid('maryland')))", "prolog_ans": "[10460.0]", "funql_ans": "[10460.0]", "funql_answer_parsed": [10460.0], "prolog_answer_parsed": [10460.0], "qid": "geo880_284", "answer": [10460.0]}
{"query": "What is the area of New Mexico ?", "prolog": "answer(A,(area(B,A),const(B,stateid('new mexico'))))", "funql": "answer(area_1(stateid('new mexico')))", "prolog_ans": "[121600.0]", "funql_ans": "[121600.0]", "funql_answer_parsed": [121600.0], "prolog_answer_parsed": [121600.0], "qid": "geo880_285", "answer": [121600.0]}
{"query": "What is the area of Ohio ?", "prolog": "answer(A,(area(B,A),const(B,stateid(ohio))))", "funql": "answer(area_1(stateid('ohio')))", "prolog_ans": "[41300.0]", "funql_ans": "[41300.0]", "funql_answer_parsed": [41300.0], "prolog_answer_parsed": [41300.0], "qid": "geo880_286", "answer": [41300.0]}
{"query": "What is the area of Seattle ?", "prolog": "answer(A,(area(B,A),const(B,cityid(seattle,_))))", "funql": "answer(area_1(cityid('seattle', _)))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_287", "answer": []}
{"query": "What is the area of South Carolina ?", "prolog": "answer(A,(area(B,A),const(B,stateid('south carolina'))))", "funql": "answer(area_1(stateid('south carolina')))", "prolog_ans": "[31113.0]", "funql_ans": "[31113.0]", "funql_answer_parsed": [31113.0], "prolog_answer_parsed": [31113.0], "qid": "geo880_288", "answer": [31113.0]}
{"query": "What is the area of Texas ?", "prolog": "answer(A,(area(B,A),const(B,stateid(texas))))", "funql": "answer(area_1(stateid('texas')))", "prolog_ans": "[266807.0]", "funql_ans": "[266807.0]", "funql_answer_parsed": [266807.0], "prolog_answer_parsed": [266807.0], "qid": "geo880_289", "answer": [266807.0]}
{"query": "What is the area of the largest state ?", "prolog": "answer(A,(area(B,A),largest(B,state(B))))", "funql": "answer(area_1(largest(state(all))))", "prolog_ans": "[591000.0]", "funql_ans": "[591000.0]", "funql_answer_parsed": [591000.0], "prolog_answer_parsed": [591000.0], "qid": "geo880_290", "answer": [591000.0]}
{"query": "What is the area of the smallest state ?", "prolog": "answer(A,(area(B,A),smallest(B,state(B))))", "funql": "answer(area_1(smallest(state(all))))", "prolog_ans": "[1100.0]", "funql_ans": "[1100.0]", "funql_answer_parsed": [1100.0], "prolog_answer_parsed": [1100.0], "qid": "geo880_291", "answer": [1100.0]}
{"query": "What is the area of the state with the capital Albany ?", "prolog": "answer(A,(area(B,A),state(B),loc(C,B),capital(C),const(C,cityid(albany,_))))", "funql": "answer(area_1(state(loc_1(capital(cityid('albany', _))))))", "prolog_ans": "[49100.0]", "funql_ans": "[49100.0]", "funql_answer_parsed": [49100.0], "prolog_answer_parsed": [49100.0], "qid": "geo880_292", "answer": [49100.0]}
{"query": "What is the area of the state with the smallest population density ?", "prolog": "answer(A,(area(B,A),smallest(C,(state(B),density(B,C)))))", "funql": "answer(area_1(smallest_one(density_1(state(all)))))", "prolog_ans": "[591000.0]", "funql_ans": "[147000.0]", "funql_answer_parsed": [147000.0], "prolog_answer_parsed": [591000.0], "qid": "geo880_293", "answer": [591000.0]}
{"query": "What is the area of the states ?", "prolog": "answer(A,(area(B,A),state(B)))", "funql": "answer(area_1(state(all)))", "prolog_ans": "[1100.0,1212.0,2044.0,5020.0,6471.0,7787.0,8284.0,9279.0,9614.0,10460.0,24200.0,31113.0,33265.0,36200.0,40760.0,41300.0,42140.0,45308.0,47700.0,49100.0,51700.0,52670.0,53200.0,56153.0,56300.0,58500.0,58900.0,68139.0,68664.0,69700.0,69950.0,70700.0,77116.0,77300.0,82300.0,83000.0,84400.0,84900.0,97073.0,97809.0,104000.0,110500.0,114000.0,121600.0,147000.0,158000.0,266807.0,591000.0]", "funql_ans": "[1100.0,1212.0,2044.0,5020.0,6471.0,7787.0,8284.0,9279.0,9614.0,10460.0,24200.0,31113.0,33265.0,36200.0,40760.0,41300.0,42140.0,45308.0,47700.0,49100.0,51700.0,52670.0,53200.0,56153.0,56300.0,58500.0,58900.0,68139.0,68664.0,69700.0,69950.0,70700.0,77116.0,77300.0,82300.0,83000.0,84400.0,84900.0,97073.0,97809.0,104000.0,110500.0,114000.0,121600.0,147000.0,158000.0,266807.0,591000.0]", "funql_answer_parsed": [1100.0, 1212.0, 2044.0, 5020.0, 6471.0, 7787.0, 8284.0, 9279.0, 9614.0, 10460.0, 24200.0, 31113.0, 33265.0, 36200.0, 40760.0, 41300.0, 42140.0, 45308.0, 47700.0, 49100.0, 51700.0, 52670.0, 53200.0, 56153.0, 56300.0, 58500.0, 58900.0, 68139.0, 68664.0, 69700.0, 69950.0, 70700.0, 77116.0, 77300.0, 82300.0, 83000.0, 84400.0, 84900.0, 97073.0, 97809.0, 104000.0, 110500.0, 114000.0, 121600.0, 147000.0, 158000.0, 266807.0, 591000.0], "prolog_answer_parsed": [1100.0, 1212.0, 2044.0, 5020.0, 6471.0, 7787.0, 8284.0, 9279.0, 9614.0, 10460.0, 24200.0, 31113.0, 33265.0, 36200.0, 40760.0, 41300.0, 42140.0, 45308.0, 47700.0, 49100.0, 51700.0, 52670.0, 53200.0, 56153.0, 56300.0, 58500.0, 58900.0, 68139.0, 68664.0, 69700.0, 69950.0, 70700.0, 77116.0, 77300.0, 82300.0, 83000.0, 84400.0, 84900.0, 97073.0, 97809.0, 104000.0, 110500.0, 114000.0, 121600.0, 147000.0, 158000.0, 266807.0, 591000.0], "qid": "geo880_294", "answer": [1100.0, 1212.0, 2044.0, 5020.0, 6471.0, 7787.0, 8284.0, 9279.0, 9614.0, 10460.0, 24200.0, 31113.0, 33265.0, 36200.0, 40760.0, 41300.0, 42140.0, 45308.0, 47700.0, 49100.0, 51700.0, 52670.0, 53200.0, 56153.0, 56300.0, 58500.0, 58900.0, 68139.0, 68664.0, 69700.0, 69950.0, 70700.0, 77116.0, 77300.0, 82300.0, 83000.0, 84400.0, 84900.0, 97073.0, 97809.0, 104000.0, 110500.0, 114000.0, 121600.0, 147000.0, 158000.0, 266807.0, 591000.0]}
{"query": "What is the area of the Texas state ?", "prolog": "answer(A,(area(B,A),const(B,stateid(texas))))", "funql": "answer(area_1(state(stateid('texas'))))", "prolog_ans": "[266807.0]", "funql_ans": "[266807.0]", "funql_answer_parsed": [266807.0], "prolog_answer_parsed": [266807.0], "qid": "geo880_295", "answer": [266807.0]}
{"query": "What is the area of Wisconsin ?", "prolog": "answer(A,(area(B,A),const(B,stateid(wisconsin))))", "funql": "answer(area_1(stateid('wisconsin')))", "prolog_ans": "[56153.0]", "funql_ans": "[56153.0]", "funql_answer_parsed": [56153.0], "prolog_answer_parsed": [56153.0], "qid": "geo880_296", "answer": [56153.0]}
{"query": "What is the average population of the US by state ?", "prolog": "answer(A,(density(B,A),const(B,countryid(usa))))", "funql": "answer(density_1(countryid('usa')))", "prolog_ans": "[31.332062981629086]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [31.3320629816], "qid": "geo880_297", "answer": [31.332062981629086], "python_impossible": true}
{"query": "What is the average population per square km in Pennsylvania ?", "prolog": "answer(A,(density(B,A),const(B,stateid(pennsylvania))))", "funql": "answer(density_1(stateid('pennsylvania')))", "prolog_ans": "[261.8301403725611]", "funql_ans": "[261.8301403725611]", "funql_answer_parsed": [261.8301403726], "prolog_answer_parsed": [261.8301403726], "qid": "geo880_298", "answer": [261.8301403725611]}
{"query": "What is the average population per square km in the US ?", "prolog": "answer(A,(density(B,A),const(B,countryid(usa))))", "funql": "answer(density_1(countryid('usa')))", "prolog_ans": "[31.332062981629086]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [31.3320629816], "qid": "geo880_299", "answer": [31.332062981629086]}
{"query": "What is the biggest American city in a state with a river ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),state(B),loc(C,B),river(C))))", "funql": "answer(largest(city(loc_2(state(loc_1(river(all)))))))", "prolog_ans": "['new york']", "funql_ans": "[cityid('new york',ny)]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_300", "answer": ["new york"]}
{"query": "What is the biggest capital city in the US ?", "prolog": "answer(A,largest(A,(capital(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(capital(city(loc_2(countryid('usa'))))))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_301", "answer": ["phoenix"]}
{"query": "What is the biggest city in Arizona ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(arizona)))))", "funql": "answer(largest(city(loc_2(stateid('arizona')))))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_302", "answer": ["phoenix"]}
{"query": "What is the biggest city in Georgia ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(georgia)))))", "funql": "answer(largest(city(loc_2(stateid('georgia')))))", "prolog_ans": "[atlanta]", "funql_ans": "[cityid(atlanta,ga)]", "funql_answer_parsed": ["atlanta"], "prolog_answer_parsed": ["atlanta"], "qid": "geo880_303", "answer": ["atlanta"]}
{"query": "What is the biggest city in Kansas ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))", "funql": "answer(largest(city(loc_2(stateid('kansas')))))", "prolog_ans": "[wichita]", "funql_ans": "[cityid(wichita,ks)]", "funql_answer_parsed": ["wichita"], "prolog_answer_parsed": ["wichita"], "qid": "geo880_304", "answer": ["wichita"]}
{"query": "What is the biggest city in Louisiana ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(louisiana)))))", "funql": "answer(largest(city(loc_2(stateid('louisiana')))))", "prolog_ans": "['new orleans']", "funql_ans": "[cityid('new orleans',la)]", "funql_answer_parsed": ["new orleans"], "prolog_answer_parsed": ["new orleans"], "qid": "geo880_305", "answer": ["new orleans"]}
{"query": "What is the biggest city in Nebraska ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(nebraska)))))", "funql": "answer(largest(city(loc_2(stateid('nebraska')))))", "prolog_ans": "[omaha]", "funql_ans": "[cityid(omaha,ne)]", "funql_answer_parsed": ["omaha"], "prolog_answer_parsed": ["omaha"], "qid": "geo880_306", "answer": ["omaha"]}
{"query": "What is the biggest city in Oregon ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(oregon)))))", "funql": "answer(largest(city(loc_2(stateid('oregon')))))", "prolog_ans": "[portland]", "funql_ans": "[cityid(portland,or)]", "funql_answer_parsed": ["portland"], "prolog_answer_parsed": ["portland"], "qid": "geo880_307", "answer": ["portland"]}
{"query": "What is the biggest city in Texas ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(largest(city(loc_2(stateid('texas')))))", "prolog_ans": "[houston]", "funql_ans": "[cityid(houston,tx)]", "funql_answer_parsed": ["houston"], "prolog_answer_parsed": ["houston"], "qid": "geo880_308", "answer": ["houston"]}
{"query": "What is the biggest city in the smallest state ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),smallest(B,state(B)))))", "funql": "answer(largest(city(loc_2(smallest(state(all))))))", "prolog_ans": "[washington]", "funql_ans": "[cityid(washington,dc)]", "funql_answer_parsed": ["washington"], "prolog_answer_parsed": ["washington"], "qid": "geo880_309", "answer": ["washington"]}
{"query": "What is the biggest city in the US ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(city(loc_2(countryid('usa')))))", "prolog_ans": "['new york']", "funql_ans": "[cityid('new york',ny)]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_310", "answer": ["new york"]}
{"query": "What is the biggest city in the USA ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(city(loc_2(countryid('usa')))))", "prolog_ans": "['new york']", "funql_ans": "[cityid('new york',ny)]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_311", "answer": ["new york"]}
{"query": "What is the biggest city in USA ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(city(loc_2(countryid('usa')))))", "prolog_ans": "['new york']", "funql_ans": "[cityid('new york',ny)]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_312", "answer": ["new york"]}
{"query": "What is the biggest city in Wyoming ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(wyoming)))))", "funql": "answer(largest(city(loc_2(stateid('wyoming')))))", "prolog_ans": "[casper]", "funql_ans": "[cityid(casper,wy)]", "funql_answer_parsed": ["casper"], "prolog_answer_parsed": ["casper"], "qid": "geo880_313", "answer": ["casper"]}
{"query": "What is the biggest river in Illinois ?", "prolog": "answer(A,largest(A,(river(A),loc(A,B),const(B,stateid(illinois)))))", "funql": "answer(longest(river(loc_2(stateid('illinois')))))", "prolog_ans": "[mississippi]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_314", "answer": ["mississippi"]}
{"query": "What is the biggest state ?", "prolog": "answer(A,largest(A,state(A)))", "funql": "answer(largest(state(all)))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_315", "answer": ["alaska"]}
{"query": "What is the biggest state in continental US ?", "prolog": "answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(state(loc_2(countryid('usa')))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_316", "answer": ["alaska"]}
{"query": "What is the biggest state in the USA ?", "prolog": "answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(state(loc_2(countryid('usa')))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_317", "answer": ["alaska"]}
{"query": "What is the capital city of the largest state in the US ?", "prolog": "answer(A,(capital(A),city(A),loc(A,B),largest(B,(state(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(capital(city(loc_2(largest(state(loc_2(countryid('usa'))))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_318", "answer": []}
{"query": "What is the capital of California ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(california))))", "funql": "answer(capital(loc_2(stateid('california'))))", "prolog_ans": "[sacramento]", "funql_ans": "[cityid(sacramento,ca)]", "funql_answer_parsed": ["sacramento"], "prolog_answer_parsed": ["sacramento"], "qid": "geo880_319", "answer": ["sacramento"]}
{"query": "What is the capital of Colorado ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))", "funql": "answer(capital(loc_2(stateid('colorado'))))", "prolog_ans": "[denver]", "funql_ans": "[cityid(denver,co)]", "funql_answer_parsed": ["denver"], "prolog_answer_parsed": ["denver"], "qid": "geo880_320", "answer": ["denver"]}
{"query": "What is the capital of Georgia ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(georgia))))", "funql": "answer(capital(loc_2(stateid('georgia'))))", "prolog_ans": "[atlanta]", "funql_ans": "[cityid(atlanta,ga)]", "funql_answer_parsed": ["atlanta"], "prolog_answer_parsed": ["atlanta"], "qid": "geo880_321", "answer": ["atlanta"]}
{"query": "What is the capital of Hawaii ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(hawaii))))", "funql": "answer(capital(loc_2(stateid('hawaii'))))", "prolog_ans": "[honolulu]", "funql_ans": "[cityid(honolulu,hi)]", "funql_answer_parsed": ["honolulu"], "prolog_answer_parsed": ["honolulu"], "qid": "geo880_322", "answer": ["honolulu"]}
{"query": "What is the capital of Illinois ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(illinois))))", "funql": "answer(capital(loc_2(stateid('illinois'))))", "prolog_ans": "[springfield]", "funql_ans": "[cityid(springfield,il)]", "funql_answer_parsed": ["springfield"], "prolog_answer_parsed": ["springfield"], "qid": "geo880_323", "answer": ["springfield"]}
{"query": "What is the capital of Indiana ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(indiana))))", "funql": "answer(capital(loc_2(stateid('indiana'))))", "prolog_ans": "[indianapolis]", "funql_ans": "[cityid(indianapolis,in)]", "funql_answer_parsed": ["indianapolis"], "prolog_answer_parsed": ["indianapolis"], "qid": "geo880_324", "answer": ["indianapolis"]}
{"query": "What is the capital of Iowa ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))", "funql": "answer(capital(loc_2(stateid('iowa'))))", "prolog_ans": "['des moines']", "funql_ans": "[cityid('des moines',ia)]", "funql_answer_parsed": ["des moines"], "prolog_answer_parsed": ["des moines"], "qid": "geo880_325", "answer": ["des moines"]}
{"query": "What is the capital of Maine ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(maine))))", "funql": "answer(capital(loc_2(stateid('maine'))))", "prolog_ans": "[augusta]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["augusta"], "qid": "geo880_326", "answer": ["augusta"]}
{"query": "What is the capital of Maryland ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(maryland))))", "funql": "answer(capital(loc_2(stateid('maryland'))))", "prolog_ans": "[annapolis]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["annapolis"], "qid": "geo880_327", "answer": ["annapolis"]}
{"query": "What is the capital of Massachusetts ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(massachusetts))))", "funql": "answer(capital(loc_2(stateid('massachusetts'))))", "prolog_ans": "[boston]", "funql_ans": "[cityid(boston,ma)]", "funql_answer_parsed": ["boston"], "prolog_answer_parsed": ["boston"], "qid": "geo880_328", "answer": ["boston"]}
{"query": "What is the capital of Michigan ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(michigan))))", "funql": "answer(capital(loc_2(stateid('michigan'))))", "prolog_ans": "[lansing]", "funql_ans": "[cityid(lansing,mi)]", "funql_answer_parsed": ["lansing"], "prolog_answer_parsed": ["lansing"], "qid": "geo880_329", "answer": ["lansing"]}
{"query": "What is the capital of New Hampshire ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid('new hampshire'))))", "funql": "answer(capital(loc_2(stateid('new hampshire'))))", "prolog_ans": "[concord]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["concord"], "qid": "geo880_330", "answer": ["concord"]}
{"query": "What is the capital of New Jersey ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid('new jersey'))))", "funql": "answer(capital(loc_2(stateid('new jersey'))))", "prolog_ans": "[trenton]", "funql_ans": "[cityid(trenton,nj)]", "funql_answer_parsed": ["trenton"], "prolog_answer_parsed": ["trenton"], "qid": "geo880_331", "answer": ["trenton"]}
{"query": "What is the capital of New York ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid('new york'))))", "funql": "answer(capital(loc_2(stateid('new york'))))", "prolog_ans": "[albany]", "funql_ans": "[cityid(albany,ny)]", "funql_answer_parsed": ["albany"], "prolog_answer_parsed": ["albany"], "qid": "geo880_332", "answer": ["albany"]}
{"query": "What is the capital of North Dakota ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid('north dakota'))))", "funql": "answer(capital(loc_2(stateid('north dakota'))))", "prolog_ans": "[bismarck]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["bismarck"], "qid": "geo880_333", "answer": ["bismarck"]}
{"query": "What is the capital of Ohio ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))", "funql": "answer(capital(loc_2(stateid('ohio'))))", "prolog_ans": "[columbus]", "funql_ans": "[cityid(columbus,oh)]", "funql_answer_parsed": ["columbus"], "prolog_answer_parsed": ["columbus"], "qid": "geo880_334", "answer": ["columbus"]}
{"query": "What is the capital of Pennsylvania ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(pennsylvania))))", "funql": "answer(capital(loc_2(stateid('pennsylvania'))))", "prolog_ans": "[harrisburg]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["harrisburg"], "qid": "geo880_335", "answer": ["harrisburg"]}
{"query": "What is the capital of states that have cities named Durham ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),loc(C,B),city(C),const(C,cityid(durham,_))))", "funql": "answer(capital(loc_2(state(loc_1(city(cityid('durham', _)))))))", "prolog_ans": "[raleigh]", "funql_ans": "[cityid(raleigh,nc)]", "funql_answer_parsed": ["raleigh"], "prolog_answer_parsed": ["raleigh"], "qid": "geo880_336", "answer": ["raleigh"]}
{"query": "What is the capital of Texas ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(capital(loc_2(stateid('texas'))))", "prolog_ans": "[austin]", "funql_ans": "[cityid(austin,tx)]", "funql_answer_parsed": ["austin"], "prolog_answer_parsed": ["austin"], "qid": "geo880_337", "answer": ["austin"]}
{"query": "What is the capital of the Alabama state ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(alabama)),state(B)))", "funql": "answer(capital(loc_2(state(stateid('alabama')))))", "prolog_ans": "[montgomery]", "funql_ans": "[cityid(montgomery,al)]", "funql_answer_parsed": ["montgomery"], "prolog_answer_parsed": ["montgomery"], "qid": "geo880_338", "answer": ["montgomery"]}
{"query": "What is the capital of the Florida state ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(florida)),state(B)))", "funql": "answer(capital(loc_2(state(stateid('florida')))))", "prolog_ans": "[tallahassee]", "funql_ans": "[cityid(tallahassee,fl)]", "funql_answer_parsed": ["tallahassee"], "prolog_answer_parsed": ["tallahassee"], "qid": "geo880_339", "answer": ["tallahassee"]}
{"query": "What is the capital of the largest state ?", "prolog": "answer(A,(capital(A),loc(A,B),largest(B,state(B))))", "funql": "answer(capital(loc_2(largest(state(all)))))", "prolog_ans": "[juneau]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["juneau"], "qid": "geo880_340", "answer": ["juneau"]}
{"query": "What is the capital of the smallest state ?", "prolog": "answer(A,(capital(A),loc(A,B),smallest(B,state(B))))", "funql": "answer(capital(loc_2(smallest(state(all)))))", "prolog_ans": "[washington]", "funql_ans": "[cityid(washington,dc)]", "funql_answer_parsed": ["washington"], "prolog_answer_parsed": ["washington"], "qid": "geo880_341", "answer": ["washington"]}
{"query": "What is the capital of the state Texas ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),const(B,stateid(texas))))", "funql": "answer(capital(loc_2(state(stateid('texas')))))", "prolog_ans": "[austin]", "funql_ans": "[cityid(austin,tx)]", "funql_answer_parsed": ["austin"], "prolog_answer_parsed": ["austin"], "qid": "geo880_342", "answer": ["austin"]}
{"query": "What is the capital of the state that borders the most states ?", "prolog": "answer(A,(capital(A),loc(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))", "funql": "answer(capital(loc_2(most(state(next_to_2(state(all)))))))", "prolog_ans": "['jefferson city']", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["jefferson city"], "qid": "geo880_343", "answer": ["jefferson city"]}
{"query": "What is the capital of the state that borders the state that borders Texas ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(texas))))", "funql": "answer(capital(loc_2(state(next_to_2(state(next_to_2(stateid('texas'))))))))", "prolog_ans": "[austin,'baton rouge',denver,jackson,'jefferson city','little rock',nashville,'oklahoma city',phoenix,'salt lake city','santa fe',topeka]", "funql_ans": "[cityid(austin,tx),cityid('baton rouge',la),cityid(denver,co),cityid(jackson,ms),cityid('little rock',ar),cityid(nashville,tn),cityid('oklahoma city',ok),cityid(phoenix,az),cityid('salt lake city',ut),cityid(topeka,ks)]", "funql_answer_parsed": ["austin", "baton rouge", "denver", "jackson", "little rock", "nashville", "oklahoma city", "phoenix", "salt lake city", "topeka"], "prolog_answer_parsed": ["austin", "baton rouge", "denver", "jackson", "jefferson city", "little rock", "nashville", "oklahoma city", "phoenix", "salt lake city", "santa fe", "topeka"], "qid": "geo880_344", "answer": NaN}
{"query": "What is the capital of the state with the highest elevation ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),loc(C,B),highest(C,place(C))))", "funql": "answer(capital(loc_2(state(loc_1(highest(place(all)))))))", "prolog_ans": "[juneau]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["juneau"], "qid": "geo880_345", "answer": ["juneau"]}
{"query": "What is the capital of the state with the highest point ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),loc(C,B),highest(C,(place(C)))))", "funql": "answer(capital(loc_2(state(loc_1(highest(place(all)))))))", "prolog_ans": "[juneau]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["juneau"], "qid": "geo880_346", "answer": ["juneau"]}
{"query": "What is the capital of the state with the largest population ?", "prolog": "answer(A,(capital(A),loc(A,B),largest(C,(state(B),population(B,C)))))", "funql": "answer(capital(loc_2(largest_one(population_1(state(all))))))", "prolog_ans": "[sacramento]", "funql_ans": "[cityid(sacramento,ca)]", "funql_answer_parsed": ["sacramento"], "prolog_answer_parsed": ["sacramento"], "qid": "geo880_347", "answer": ["sacramento"]}
{"query": "What is the capital of the state with the largest population density ?", "prolog": "answer(A,(capital(A),loc(A,B),largest(C,(state(B),density(B,C)))))", "funql": "answer(capital(loc_2(largest_one(density_1(state(all))))))", "prolog_ans": "[trenton]", "funql_ans": "[cityid(trenton,nj)]", "funql_answer_parsed": ["trenton"], "prolog_answer_parsed": ["trenton"], "qid": "geo880_348", "answer": ["trenton"]}
{"query": "What is the capital of the state with the longest river ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),loc(C,B),longest(C,(river(C)))))", "funql": "answer(capital(loc_2(state(loc_1(longest(river(all)))))))", "prolog_ans": "[albany,annapolis,atlanta,austin,'baton rouge',bismarck,boise,boston,'carson city',charleston,cheyenne,columbia,columbus,concord,denver,'des moines',dover,frankfort,harrisburg,hartford,helena,indianapolis,jackson,'jefferson city',lansing,lincoln,'little rock',madison,montgomery,montpelier,nashville,'oklahoma city',olympia,phoenix,pierre,raleigh,richmond,sacramento,salem,'salt lake city','santa fe',springfield,'st. paul',tallahassee,topeka,trenton,washington]", "funql_ans": "[cityid('des moines',ia),cityid(lincoln,ne)]", "funql_answer_parsed": ["des moines", "lincoln"], "prolog_answer_parsed": ["albany", "annapolis", "atlanta", "austin", "baton rouge", "bismarck", "boise", "boston", "carson city", "charleston", "cheyenne", "columbia", "columbus", "concord", "denver", "des moines", "dover", "frankfort", "harrisburg", "hartford", "helena", "indianapolis", "jackson", "jefferson city", "lansing", "lincoln", "little rock", "madison", "montgomery", "montpelier", "nashville", "oklahoma city", "olympia", "phoenix", "pierre", "raleigh", "richmond", "sacramento", "salem", "salt lake city", "santa fe", "springfield", "st. paul", "tallahassee", "topeka", "trenton", "washington"], "qid": "geo880_349", "answer": NaN}
{"query": "What is the capital of the state with the most inhabitants ?", "prolog": "answer(A,(capital(A),loc(A,B),largest(C,(state(B),population(B,C)))))", "funql": "answer(capital(loc_2(largest_one(population_1(state(all))))))", "prolog_ans": "[sacramento]", "funql_ans": "[cityid(sacramento,ca)]", "funql_answer_parsed": ["sacramento"], "prolog_answer_parsed": ["sacramento"], "qid": "geo880_350", "answer": ["sacramento"]}
{"query": "What is the capital of Utah ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(utah))))", "funql": "answer(capital(loc_2(stateid('utah'))))", "prolog_ans": "['salt lake city']", "funql_ans": "[cityid('salt lake city',ut)]", "funql_answer_parsed": ["salt lake city"], "prolog_answer_parsed": ["salt lake city"], "qid": "geo880_351", "answer": ["salt lake city"]}
{"query": "What is the capital of Vermont ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(vermont))))", "funql": "answer(capital(loc_2(stateid('vermont'))))", "prolog_ans": "[montpelier]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["montpelier"], "qid": "geo880_352", "answer": ["montpelier"]}
{"query": "What is the capital of Washington ?", "prolog": "answer(A,(capital(A),loc(A,B),const(B,stateid(washington))))", "funql": "answer(capital(loc_2(stateid('washington'))))", "prolog_ans": "[olympia]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["olympia"], "qid": "geo880_353", "answer": ["olympia"]}
{"query": "What is the city in Texas with the largest population ?", "prolog": "answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('texas'))))))", "prolog_ans": "[houston]", "funql_ans": "[cityid(houston,tx)]", "funql_answer_parsed": ["houston"], "prolog_answer_parsed": ["houston"], "qid": "geo880_354", "answer": ["houston"]}
{"query": "What is the city with the smallest population ?", "prolog": "answer(A,smallest(B,(city(A),population(A,B))))", "funql": "answer(smallest_one(population_1(city(all))))", "prolog_ans": "['scotts valley']", "funql_ans": "[cityid('scotts valley',ca)]", "funql_answer_parsed": ["scotts valley"], "prolog_answer_parsed": ["scotts valley"], "qid": "geo880_355", "answer": ["scotts valley"]}
{"query": "What is the combined area of all 50 states ?", "prolog": "answer(A,sum(B,(area(C,B),state(C)),A))", "funql": "answer(sum(area_1(state(all))))", "prolog_ans": "[3670038.0]", "funql_ans": "[3670038.0]", "funql_answer_parsed": [3670038.0], "prolog_answer_parsed": [3670038.0], "qid": "geo880_356", "answer": [3670038.0]}
{"query": "What is the combined population of all 50 states ?", "prolog": "answer(A,sum(B,(population(C,B),state(C)),A))", "funql": "answer(sum(population_1(state(all))))", "prolog_ans": "[225195124.0]", "funql_ans": "[224409210.7]", "funql_answer_parsed": [224409210.7], "prolog_answer_parsed": [225195124.0], "qid": "geo880_357", "answer": [225195124.0]}
{"query": "What is the density of Texas ?", "prolog": "answer(A,(density(B,A),const(B,stateid(texas))))", "funql": "answer(density_1(stateid('texas')))", "prolog_ans": "[53.33068472716233]", "funql_ans": "[53.33068472716233]", "funql_answer_parsed": [53.3306847272], "prolog_answer_parsed": [53.3306847272], "qid": "geo880_358", "answer": [53.33068472716233]}
{"query": "What is the density of the New York ?", "prolog": "answer(A,(density(B,A),const(B,stateid('new york'))))", "funql": "answer(density_1(stateid('new york')))", "prolog_ans": "[357.5967413441955]", "funql_ans": "[357.5967413441955]", "funql_answer_parsed": [357.5967413442], "prolog_answer_parsed": [357.5967413442], "qid": "geo880_359", "answer": [357.5967413441955]}
{"query": "What is the elevation of Death Valley ?", "prolog": "answer(A,(elevation(B,A),const(B,placeid('death valley'))))", "funql": "answer(elevation_1(placeid('death valley')))", "prolog_ans": "[-85]", "funql_ans": "[-85]", "funql_answer_parsed": [-85], "prolog_answer_parsed": [-85], "qid": "geo880_360", "answer": [-85]}
{"query": "What is the elevation of the highest point in the USA ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(elevation_1(highest(place(loc_2(countryid('usa'))))))", "prolog_ans": "[6194]", "funql_ans": "[6194]", "funql_answer_parsed": [6194], "prolog_answer_parsed": [6194], "qid": "geo880_361", "answer": [6194]}
{"query": "What is the height of Mount McKinley ?", "prolog": "answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))", "funql": "answer(elevation_1(placeid('mount mckinley')))", "prolog_ans": "[6194]", "funql_ans": "[6194]", "funql_answer_parsed": [6194], "prolog_answer_parsed": [6194], "qid": "geo880_362", "answer": [6194]}
{"query": "What is the height of the highest mountain in Texas ?", "prolog": "answer(A,(elevation(B,A),highest(B,(mountain(B),loc(B,C),const(C,stateid(texas))))))", "funql": "answer(elevation_1(highest(mountain(loc_2(stateid('texas'))))))", "prolog_ans": "[]", "funql_ans": "[2667]", "funql_answer_parsed": [2667], "prolog_answer_parsed": [], "qid": "geo880_363", "answer": [2667]}
{"query": "What is the height of the highest point in the USA ?", "prolog": "answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(elevation_1(highest(place(loc_2(countryid('usa'))))))", "prolog_ans": "[6194]", "funql_ans": "[6194]", "funql_answer_parsed": [6194], "prolog_answer_parsed": [6194], "qid": "geo880_364", "answer": [6194]}
{"query": "What is the high point of Wyoming ?", "prolog": "answer(A,(high_point(B,A),const(B,stateid(wyoming))))", "funql": "answer(high_point_1(stateid('wyoming')))", "prolog_ans": "['gannett peak']", "funql_ans": "[placeid('gannett peak')]", "funql_answer_parsed": ["gannett peak"], "prolog_answer_parsed": ["gannett peak"], "qid": "geo880_365", "answer": ["gannett peak"]}
{"query": "What is the highest elevation in New Mexico ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('new mexico')))))", "funql": "answer(highest(place(loc_2(stateid('new mexico')))))", "prolog_ans": "['wheeler peak']", "funql_ans": "[placeid('wheeler peak')]", "funql_answer_parsed": ["wheeler peak"], "prolog_answer_parsed": ["wheeler peak"], "qid": "geo880_366", "answer": ["wheeler peak"]}
{"query": "What is the highest elevation in South Carolina ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('south carolina')))))", "funql": "answer(highest(place(loc_2(stateid('south carolina')))))", "prolog_ans": "['sassafras mountain']", "funql_ans": "[placeid('sassafras mountain')]", "funql_answer_parsed": ["sassafras mountain"], "prolog_answer_parsed": ["sassafras mountain"], "qid": "geo880_367", "answer": ["sassafras mountain"]}
{"query": "What is the highest elevation in Texas ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(highest(place(loc_2(stateid('texas')))))", "prolog_ans": "['guadalupe peak']", "funql_ans": "[placeid('guadalupe peak')]", "funql_answer_parsed": ["guadalupe peak"], "prolog_answer_parsed": ["guadalupe peak"], "qid": "geo880_368", "answer": ["guadalupe peak"]}
{"query": "What is the highest elevation in the United States ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(place(loc_2(countryid('usa')))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_369", "answer": ["mount mckinley"]}
{"query": "What is the highest mountain in Alaska ?", "prolog": "answer(A,highest(A,(mountain(A),loc(A,B),const(B,stateid(alaska)))))", "funql": "answer(highest(mountain(loc_2(stateid('alaska')))))", "prolog_ans": "[mckinley]", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mckinley"], "qid": "geo880_370", "answer": ["mount mckinley"]}
{"query": "What is the highest mountain in Texas ?", "prolog": "answer(A,highest(A,(mountain(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(highest(mountain(loc_2(stateid('texas')))))", "prolog_ans": "[]", "funql_ans": "[placeid('guadalupe peak')]", "funql_answer_parsed": ["guadalupe peak"], "prolog_answer_parsed": [], "qid": "geo880_371", "answer": ["guadalupe peak"]}
{"query": "What is the highest mountain in the US ?", "prolog": "answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(mountain(loc_2(countryid('usa')))))", "prolog_ans": "[mckinley]", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mckinley"], "qid": "geo880_372", "answer": ["mount mckinley"]}
{"query": "What is the highest mountain in US ?", "prolog": "answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(mountain(loc_2(countryid('usa')))))", "prolog_ans": "[mckinley]", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mckinley"], "qid": "geo880_373", "answer": ["mount mckinley"]}
{"query": "What is the highest point in Colorado ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))", "funql": "answer(highest(place(loc_2(stateid('colorado')))))", "prolog_ans": "['mount elbert']", "funql_ans": "[placeid('mount elbert')]", "funql_answer_parsed": ["mount elbert"], "prolog_answer_parsed": ["mount elbert"], "qid": "geo880_374", "answer": ["mount elbert"]}
{"query": "What is the highest point in Delaware ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(delaware)))))", "funql": "answer(highest(place(loc_2(stateid('delaware')))))", "prolog_ans": "[centerville]", "funql_ans": "[placeid(centerville)]", "funql_answer_parsed": ["centerville"], "prolog_answer_parsed": ["centerville"], "qid": "geo880_375", "answer": ["centerville"]}
{"query": "What is the highest point in each state whose lowest point is sea level ?", "prolog": "answer(A,(highest(A,(place(A),loc(A,B),state(B))),lowest(C,(loc(C,B),place(C))),elevation(C,0)))", "funql": "answer(highest(place(loc_2(state(loc_1(place(elevation_2(0))))))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_376", "answer": ["mount mckinley"]}
{"query": "What is the highest point in Florida ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(florida)))))", "funql": "answer(highest(place(loc_2(stateid('florida')))))", "prolog_ans": "['walton county']", "funql_ans": "[placeid('walton county')]", "funql_answer_parsed": ["walton county"], "prolog_answer_parsed": ["walton county"], "qid": "geo880_377", "answer": ["walton county"]}
{"query": "What is the highest point in Iowa ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))", "funql": "answer(highest(place(loc_2(stateid('iowa')))))", "prolog_ans": "['ocheyedan mound']", "funql_ans": "[placeid('ocheyedan mound')]", "funql_answer_parsed": ["ocheyedan mound"], "prolog_answer_parsed": ["ocheyedan mound"], "qid": "geo880_378", "answer": ["ocheyedan mound"]}
{"query": "What is the highest point in Kansas ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas)))))", "funql": "answer(highest(place(loc_2(stateid('kansas')))))", "prolog_ans": "['mount sunflower']", "funql_ans": "[placeid('mount sunflower')]", "funql_answer_parsed": ["mount sunflower"], "prolog_answer_parsed": ["mount sunflower"], "qid": "geo880_379", "answer": ["mount sunflower"]}
{"query": "What is the highest point in Maine ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine)))))", "funql": "answer(highest(place(loc_2(stateid('maine')))))", "prolog_ans": "['mount katahdin']", "funql_ans": "[placeid('mount katahdin')]", "funql_answer_parsed": ["mount katahdin"], "prolog_answer_parsed": ["mount katahdin"], "qid": "geo880_380", "answer": ["mount katahdin"]}
{"query": "What is the highest point in Montana ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))", "funql": "answer(highest(place(loc_2(stateid('montana')))))", "prolog_ans": "['granite peak']", "funql_ans": "[placeid('granite peak')]", "funql_answer_parsed": ["granite peak"], "prolog_answer_parsed": ["granite peak"], "qid": "geo880_381", "answer": ["granite peak"]}
{"query": "What is the highest point in Nevada in meters ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(nevada)))))", "funql": "answer(highest(place(loc_2(stateid('nevada')))))", "prolog_ans": "['boundary peak']", "funql_ans": "[placeid('boundary peak')]", "funql_answer_parsed": ["boundary peak"], "prolog_answer_parsed": ["boundary peak"], "qid": "geo880_382", "answer": ["boundary peak"]}
{"query": "What is the highest point in New Mexico ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('new mexico')))))", "funql": "answer(highest(place(loc_2(stateid('new mexico')))))", "prolog_ans": "['wheeler peak']", "funql_ans": "[placeid('wheeler peak')]", "funql_answer_parsed": ["wheeler peak"], "prolog_answer_parsed": ["wheeler peak"], "qid": "geo880_383", "answer": ["wheeler peak"]}
{"query": "What is the highest point in Ohio ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(ohio)))))", "funql": "answer(highest(place(loc_2(stateid('ohio')))))", "prolog_ans": "['campbell hill']", "funql_ans": "[placeid('campbell hill')]", "funql_answer_parsed": ["campbell hill"], "prolog_answer_parsed": ["campbell hill"], "qid": "geo880_384", "answer": ["campbell hill"]}
{"query": "What is the highest point in Rhode Island ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('rhode island')))))", "funql": "answer(highest(place(loc_2(stateid('rhode island')))))", "prolog_ans": "['jerimoth hill']", "funql_ans": "[placeid('jerimoth hill')]", "funql_answer_parsed": ["jerimoth hill"], "prolog_answer_parsed": ["jerimoth hill"], "qid": "geo880_385", "answer": ["jerimoth hill"]}
{"query": "What is the highest point in states bordering Georgia ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(georgia)))))", "funql": "answer(highest(place(loc_2(state(next_to_2(stateid('georgia')))))))", "prolog_ans": "['mount mitchell']", "funql_ans": "[placeid('mount mitchell')]", "funql_answer_parsed": ["mount mitchell"], "prolog_answer_parsed": ["mount mitchell"], "qid": "geo880_386", "answer": ["mount mitchell"]}
{"query": "What is the highest point in Texas ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(highest(place(loc_2(stateid('texas')))))", "prolog_ans": "['guadalupe peak']", "funql_ans": "[placeid('guadalupe peak')]", "funql_answer_parsed": ["guadalupe peak"], "prolog_answer_parsed": ["guadalupe peak"], "qid": "geo880_387", "answer": ["guadalupe peak"]}
{"query": "What is the highest point in the country ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(place(loc_2(countryid('usa')))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_388", "answer": ["mount mckinley"]}
{"query": "What is the highest point in the smallest state ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),smallest(B,state(B)))))", "funql": "answer(highest(place(loc_2(smallest(state(all))))))", "prolog_ans": "[tenleytown]", "funql_ans": "[placeid(tenleytown)]", "funql_answer_parsed": ["tenleytown"], "prolog_answer_parsed": ["tenleytown"], "qid": "geo880_389", "answer": ["tenleytown"]}
{"query": "What is the highest point in the state with capital Austin ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid(austin,_)))))", "funql": "answer(highest(place(loc_2(state(loc_1(capital(cityid('austin', _))))))))", "prolog_ans": "['guadalupe peak']", "funql_ans": "[placeid('guadalupe peak')]", "funql_answer_parsed": ["guadalupe peak"], "prolog_answer_parsed": ["guadalupe peak"], "qid": "geo880_390", "answer": ["guadalupe peak"]}
{"query": "What is the highest point in the state with capital Des Moines ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid('des moines',_)))))", "funql": "answer(highest(place(loc_2(state(loc_1(capital(cityid('des moines', _))))))))", "prolog_ans": "['ocheyedan mound']", "funql_ans": "[placeid('ocheyedan mound')]", "funql_answer_parsed": ["ocheyedan mound"], "prolog_answer_parsed": ["ocheyedan mound"], "qid": "geo880_391", "answer": ["ocheyedan mound"]}
{"query": "What is the highest point in the state with the capital Des Moines ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid('des moines',_)))))", "funql": "answer(highest(place(loc_2(state(loc_1(capital(cityid('des moines', _))))))))", "prolog_ans": "['ocheyedan mound']", "funql_ans": "[placeid('ocheyedan mound')]", "funql_answer_parsed": ["ocheyedan mound"], "prolog_answer_parsed": ["ocheyedan mound"], "qid": "geo880_392", "answer": ["ocheyedan mound"]}
{"query": "What is the highest point in the state with the most rivers ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),most(B,C,(state(B),traverse(C,B),river(C))))))", "funql": "answer(highest(place(loc_2(most(state(traverse_1(river(all))))))))", "prolog_ans": "['mount elbert']", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["mount elbert"], "qid": "geo880_393", "answer": ["mount elbert"]}
{"query": "What is the highest point in the state with the smallest population ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),smallest(C,(state(B),population(B,C))))))", "funql": "answer(highest(place(loc_2(smallest_one(population_1(state(all)))))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('granite peak')]", "funql_answer_parsed": ["granite peak"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_394", "answer": ["mount mckinley"]}
{"query": "What is the highest point in the states bordering Colorado ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(colorado)))))", "funql": "answer(highest(place(loc_2(state(next_to_2(stateid('colorado')))))))", "prolog_ans": "['gannett peak']", "funql_ans": "[placeid('gannett peak')]", "funql_answer_parsed": ["gannett peak"], "prolog_answer_parsed": ["gannett peak"], "qid": "geo880_395", "answer": ["gannett peak"]}
{"query": "What is the highest point in the United States ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(place(loc_2(countryid('usa')))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_396", "answer": ["mount mckinley"]}
{"query": "What is the highest point in the US ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(place(loc_2(countryid('usa')))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_397", "answer": ["mount mckinley"]}
{"query": "What is the highest point in the USA ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(place(loc_2(countryid('usa')))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_398", "answer": ["mount mckinley"]}
{"query": "What is the highest point in Virginia ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(virginia)))))", "funql": "answer(highest(place(loc_2(stateid('virginia')))))", "prolog_ans": "['mount rogers']", "funql_ans": "[placeid('mount rogers')]", "funql_answer_parsed": ["mount rogers"], "prolog_answer_parsed": ["mount rogers"], "qid": "geo880_399", "answer": ["mount rogers"]}
{"query": "What is the highest point in Wyoming ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming)))))", "funql": "answer(highest(place(loc_2(stateid('wyoming')))))", "prolog_ans": "['gannett peak']", "funql_ans": "[placeid('gannett peak')]", "funql_answer_parsed": ["gannett peak"], "prolog_answer_parsed": ["gannett peak"], "qid": "geo880_400", "answer": ["gannett peak"]}
{"query": "What is the highest point of the state with the largest area ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),largest(C,(state(B),area(B,C))))))", "funql": "answer(highest(place(loc_2(largest_one(area_1(state(all)))))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_401", "answer": ["mount mckinley"]}
{"query": "What is the highest point of the state with the smallest population density ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),smallest(C,(state(B),density(B,C))))))", "funql": "answer(highest(place(loc_2(smallest_one(density_1(state(all)))))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('granite peak')]", "funql_answer_parsed": ["granite peak"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_402", "answer": ["mount mckinley"]}
{"query": "What is the highest point of the USA ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(place(loc_2(countryid('usa')))))", "prolog_ans": "['mount mckinley']", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mount mckinley"], "qid": "geo880_403", "answer": ["mount mckinley"]}
{"query": "What is the largest capital ?", "prolog": "answer(A,largest(A,capital(A)))", "funql": "answer(largest(capital(all)))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_404", "answer": ["phoenix"]}
{"query": "What is the largest capital city in the USA ?", "prolog": "answer(A,largest(A,(capital(A),city(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(capital(city(loc_2(countryid('usa'))))))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_405", "answer": ["phoenix"]}
{"query": "What is the largest city in a state that borders Texas ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas)))))", "funql": "answer(largest(city(loc_2(state(next_to_2(stateid('texas')))))))", "prolog_ans": "['new orleans']", "funql_ans": "[cityid('new orleans',la)]", "funql_answer_parsed": ["new orleans"], "prolog_answer_parsed": ["new orleans"], "qid": "geo880_406", "answer": ["new orleans"]}
{"query": "What is the largest city in Alabama ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(alabama)))))", "funql": "answer(largest(city(loc_2(stateid('alabama')))))", "prolog_ans": "[birmingham]", "funql_ans": "[cityid(birmingham,al)]", "funql_answer_parsed": ["birmingham"], "prolog_answer_parsed": ["birmingham"], "qid": "geo880_407", "answer": ["birmingham"]}
{"query": "What is the largest city in California ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(california)))))", "funql": "answer(largest(city(loc_2(stateid('california')))))", "prolog_ans": "['los angeles']", "funql_ans": "[cityid('los angeles',ca)]", "funql_answer_parsed": ["los angeles"], "prolog_answer_parsed": ["los angeles"], "qid": "geo880_408", "answer": ["los angeles"]}
{"query": "What is the largest city in Michigan ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(michigan)))))", "funql": "answer(largest(city(loc_2(stateid('michigan')))))", "prolog_ans": "[detroit]", "funql_ans": "[cityid(detroit,mi)]", "funql_answer_parsed": ["detroit"], "prolog_answer_parsed": ["detroit"], "qid": "geo880_409", "answer": ["detroit"]}
{"query": "What is the largest city in Minnesota by population ?", "prolog": "answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(minnesota)),population(A,B))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('minnesota'))))))", "prolog_ans": "[minneapolis]", "funql_ans": "[cityid(minneapolis,mn)]", "funql_answer_parsed": ["minneapolis"], "prolog_answer_parsed": ["minneapolis"], "qid": "geo880_410", "answer": ["minneapolis"]}
{"query": "What is the largest city in Missouri ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(missouri)))))", "funql": "answer(largest(city(loc_2(stateid('missouri')))))", "prolog_ans": "['st. louis']", "funql_ans": "[cityid('st. louis',mo)]", "funql_answer_parsed": ["st. louis"], "prolog_answer_parsed": ["st. louis"], "qid": "geo880_411", "answer": ["st. louis"]}
{"query": "What is the largest city in Rhode Island ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid('rhode island')))))", "funql": "answer(largest(city(loc_2(stateid('rhode island')))))", "prolog_ans": "[providence]", "funql_ans": "[cityid(providence,ri)]", "funql_answer_parsed": ["providence"], "prolog_answer_parsed": ["providence"], "qid": "geo880_412", "answer": ["providence"]}
{"query": "What is the largest city in smallest state through which the Mississippi runs ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),smallest(B,(state(B),const(C,riverid(mississippi)),traverse(C,B))))))", "funql": "answer(largest(city(loc_2(smallest(state(traverse_1(riverid('mississippi'))))))))", "prolog_ans": "[memphis]", "funql_ans": "[cityid(memphis,tn)]", "funql_answer_parsed": ["memphis"], "prolog_answer_parsed": ["memphis"], "qid": "geo880_413", "answer": ["memphis"]}
{"query": "What is the largest city in states that border California ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(california)))))", "funql": "answer(largest(city(loc_2(state(next_to_2(stateid('california')))))))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_414", "answer": ["phoenix"]}
{"query": "What is the largest city in Texas ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(largest(city(loc_2(stateid('texas')))))", "prolog_ans": "[houston]", "funql_ans": "[cityid(houston,tx)]", "funql_answer_parsed": ["houston"], "prolog_answer_parsed": ["houston"], "qid": "geo880_415", "answer": ["houston"]}
{"query": "What is the largest city in the smallest state in the USA ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))", "funql": "answer(largest(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))", "prolog_ans": "[washington]", "funql_ans": "[cityid(washington,dc)]", "funql_answer_parsed": ["washington"], "prolog_answer_parsed": ["washington"], "qid": "geo880_416", "answer": ["washington"]}
{"query": "What is the largest city in Wisconsin ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(wisconsin)))))", "funql": "answer(largest(city(loc_2(stateid('wisconsin')))))", "prolog_ans": "[milwaukee]", "funql_ans": "[cityid(milwaukee,wi)]", "funql_answer_parsed": ["milwaukee"], "prolog_answer_parsed": ["milwaukee"], "qid": "geo880_417", "answer": ["milwaukee"]}
{"query": "What is the largest city of Kansas ?", "prolog": "answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))", "funql": "answer(largest(city(loc_2(stateid('kansas')))))", "prolog_ans": "[wichita]", "funql_ans": "[cityid(wichita,ks)]", "funql_answer_parsed": ["wichita"], "prolog_answer_parsed": ["wichita"], "qid": "geo880_418", "answer": ["wichita"]}
{"query": "What is the largest of the states that the Rio Grande runs through ?", "prolog": "answer(A,largest(A,(state(A),const(B,riverid('rio grande')),traverse(B,A))))", "funql": "answer(largest(state(traverse_1(riverid('rio grande')))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_419", "answer": ["texas"]}
{"query": "What is the largest river in Washington state ?", "prolog": "answer(A,largest(A,(river(A),loc(A,B),const(B,stateid(washington)))))", "funql": "answer(longest(river(loc_2(state(stateid('washington'))))))", "prolog_ans": "[columbia]", "funql_ans": "[riverid(columbia)]", "funql_answer_parsed": ["columbia"], "prolog_answer_parsed": ["columbia"], "qid": "geo880_420", "answer": ["columbia"]}
{"query": "What is the largest state ?", "prolog": "answer(A,largest(A,state(A)))", "funql": "answer(largest(state(all)))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_421", "answer": ["alaska"]}
{"query": "What is the largest state bordering Arkansas ?", "prolog": "answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(arkansas)))))", "funql": "answer(largest(state(next_to_2(stateid('arkansas')))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_422", "answer": ["texas"]}
{"query": "What is the largest state bordering Texas ?", "prolog": "answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))", "funql": "answer(largest(state(next_to_2(stateid('texas')))))", "prolog_ans": "['new mexico']", "funql_ans": "[stateid('new mexico')]", "funql_answer_parsed": ["new mexico"], "prolog_answer_parsed": ["new mexico"], "qid": "geo880_423", "answer": ["new mexico"]}
{"query": "What is the largest state capital in population ?", "prolog": "answer(A,largest(B,(state(C),capital(C,A),population(A,B))))", "funql": "answer(largest_one(population_1(capital_1(state(all)))))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_424", "answer": ["phoenix"]}
{"query": "What is the largest state in the US ?", "prolog": "answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(state(loc_2(countryid('usa')))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_425", "answer": ["alaska"]}
{"query": "What is the largest state in USA ?", "prolog": "answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(largest(state(loc_2(countryid('usa')))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_426", "answer": ["alaska"]}
{"query": "What is the largest state that borders California ?", "prolog": "answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(california)))))", "funql": "answer(largest(state(next_to_2(stateid('california')))))", "prolog_ans": "[arizona]", "funql_ans": "[stateid(arizona)]", "funql_answer_parsed": ["arizona"], "prolog_answer_parsed": ["arizona"], "qid": "geo880_427", "answer": ["arizona"]}
{"query": "What is the largest state that borders Texas ?", "prolog": "answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))", "funql": "answer(largest(state(next_to_2(stateid('texas')))))", "prolog_ans": "['new mexico']", "funql_ans": "[stateid('new mexico')]", "funql_answer_parsed": ["new mexico"], "prolog_answer_parsed": ["new mexico"], "qid": "geo880_428", "answer": ["new mexico"]}
{"query": "What is the largest state that borders the state with the highest population ?", "prolog": "answer(A,largest(A,(state(A),next_to(A,B),largest(C,(state(B),population(B,C))))))", "funql": "answer(largest(state(next_to_2(largest_one(population_1(state(all)))))))", "prolog_ans": "[arizona]", "funql_ans": "[stateid(arizona)]", "funql_answer_parsed": ["arizona"], "prolog_answer_parsed": ["arizona"], "qid": "geo880_429", "answer": ["arizona"]}
{"query": "What is the largest state that borders the state with the lowest point in the USA ?", "prolog": "answer(A,largest(A,(state(A),next_to(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa)))))))", "funql": "answer(largest(state(next_to_2(state(loc_1(lowest(place(loc_2(countryid('usa'))))))))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(arizona)]", "funql_answer_parsed": ["arizona"], "prolog_answer_parsed": ["texas"], "qid": "geo880_430", "answer": NaN}
{"query": "What is the largest state traversed by the Mississippi river ?", "prolog": "answer(A,largest(A,(state(A),traverse(B,A),const(B,riverid(mississippi)))))", "funql": "answer(largest(state(traverse_1(river(riverid('mississippi'))))))", "prolog_ans": "[minnesota]", "funql_ans": "[stateid(minnesota)]", "funql_answer_parsed": ["minnesota"], "prolog_answer_parsed": ["minnesota"], "qid": "geo880_431", "answer": ["minnesota"]}
{"query": "What is the least populous state ?", "prolog": "answer(A,smallest(B,(population(A,B),state(A))))", "funql": "answer(smallest_one(population_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_432", "answer": ["alaska"]}
{"query": "What is the length of the Colorado river ?", "prolog": "answer(A,(len(B,A),const(B,riverid(colorado)),river(B)))", "funql": "answer(len(river(riverid('colorado'))))", "prolog_ans": "[2333]", "funql_ans": "[2333]", "funql_answer_parsed": [2333], "prolog_answer_parsed": [2333], "qid": "geo880_433", "answer": [2333]}
{"query": "What is the length of the Colorado river in Texas ?", "prolog": "answer(A,(len(B,A),const(B,riverid(colorado)),river(B),loc(B,C),const(C,stateid(texas))))", "funql": "answer(len(intersection(riverid('colorado'), river(loc_2(stateid('texas'))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_434", "answer": []}
{"query": "What is the length of the longest river in the USA ?", "prolog": "answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(len(longest(river(loc_2(countryid('usa'))))))", "prolog_ans": "[451,459,462,483,492,523,541,579,603,636,655,658,660,679,682,684,693,702,740,764,788,805,848,869,901,965,973,1049,1080,1094,1105,1110,1142,1175,1458,1569,1638,1670,1953,2333,3033,3778,3968]", "funql_ans": "[3968]", "funql_answer_parsed": [3968], "prolog_answer_parsed": [451, 459, 462, 483, 492, 523, 541, 579, 603, 636, 655, 658, 660, 679, 682, 684, 693, 702, 740, 764, 788, 805, 848, 869, 901, 965, 973, 1049, 1080, 1094, 1105, 1110, 1142, 1175, 1458, 1569, 1638, 1670, 1953, 2333, 3033, 3778, 3968], "qid": "geo880_435", "answer": [3968]}
{"query": "What is the length of the longest river that runs through Texas ?", "prolog": "answer(A,(len(B,A),longest(B,(river(B),traverse(B,C),const(C,stateid(texas))))))", "funql": "answer(len(longest(river(traverse_2(stateid('texas'))))))", "prolog_ans": "[805,1458,1638,3033]", "funql_ans": "[3033]", "funql_answer_parsed": [3033], "prolog_answer_parsed": [805, 1458, 1638, 3033], "qid": "geo880_436", "answer": [3033]}
{"query": "What is the length of the Mississippi river ?", "prolog": "answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))", "funql": "answer(len(river(riverid('mississippi'))))", "prolog_ans": "[3778]", "funql_ans": "[3778]", "funql_answer_parsed": [3778], "prolog_answer_parsed": [3778], "qid": "geo880_437", "answer": [3778]}
{"query": "What is the length of the river that flows through the most states ?", "prolog": "answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))", "funql": "answer(len(most(river(traverse_2(state(all))))))", "prolog_ans": "[3778]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [3778], "qid": "geo880_438", "answer": [3778]}
{"query": "What is the length of the river that runs through the most number of states ?", "prolog": "answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))", "funql": "answer(len(most(river(traverse_2(state(all))))))", "prolog_ans": "[3778]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [3778], "qid": "geo880_439", "answer": [3778]}
{"query": "What is the length of the river that runs through the most states ?", "prolog": "answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))", "funql": "answer(len(most(river(traverse_2(state(all))))))", "prolog_ans": "[3778]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [3778], "qid": "geo880_440", "answer": [3778]}
{"query": "What is the length of the river that traverses the most states ?", "prolog": "answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))", "funql": "answer(len(most(river(traverse_2(state(all))))))", "prolog_ans": "[3778]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [3778], "qid": "geo880_441", "answer": [3778]}
{"query": "What is the longest river ?", "prolog": "answer(A,longest(A,river(A)))", "funql": "answer(longest(river(all)))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_442", "answer": ["missouri"]}
{"query": "What is the longest river flowing through New York ?", "prolog": "answer(A,longest(A,(river(A),traverse(A,B),const(B,stateid('new york')))))", "funql": "answer(longest(river(traverse_2(stateid('new york')))))", "prolog_ans": "[allegheny]", "funql_ans": "[riverid(allegheny)]", "funql_answer_parsed": ["allegheny"], "prolog_answer_parsed": ["allegheny"], "qid": "geo880_443", "answer": ["allegheny"]}
{"query": "What is the longest river in America ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(longest(river(loc_2(countryid('usa')))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_444", "answer": ["missouri"]}
{"query": "What is the longest river in California ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(california)))))", "funql": "answer(longest(river(loc_2(stateid('california')))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_445", "answer": ["colorado"]}
{"query": "What is the longest river in Florida ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(florida)))))", "funql": "answer(longest(river(loc_2(stateid('florida')))))", "prolog_ans": "[chattahoochee]", "funql_ans": "[riverid(chattahoochee)]", "funql_answer_parsed": ["chattahoochee"], "prolog_answer_parsed": ["chattahoochee"], "qid": "geo880_446", "answer": ["chattahoochee"]}
{"query": "What is the longest river in Mississippi ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))", "funql": "answer(longest(river(loc_2(stateid('mississippi')))))", "prolog_ans": "[mississippi]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_447", "answer": ["mississippi"]}
{"query": "What is the longest river in New York ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,stateid('new york')))))", "funql": "answer(longest(river(loc_2(stateid('new york')))))", "prolog_ans": "[allegheny]", "funql_ans": "[riverid(allegheny)]", "funql_answer_parsed": ["allegheny"], "prolog_answer_parsed": ["allegheny"], "qid": "geo880_448", "answer": ["allegheny"]}
{"query": "What is the longest river in Pennsylvania ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(pennsylvania)))))", "funql": "answer(longest(river(loc_2(stateid('pennsylvania')))))", "prolog_ans": "[ohio]", "funql_ans": "[riverid(ohio)]", "funql_answer_parsed": ["ohio"], "prolog_answer_parsed": ["ohio"], "qid": "geo880_449", "answer": ["ohio"]}
{"query": "What is the longest river in Texas ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(longest(river(loc_2(stateid('texas')))))", "prolog_ans": "['rio grande']", "funql_ans": "[riverid('rio grande')]", "funql_answer_parsed": ["rio grande"], "prolog_answer_parsed": ["rio grande"], "qid": "geo880_450", "answer": ["rio grande"]}
{"query": "What is the longest river in the largest state ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),largest(B,state(B)))))", "funql": "answer(longest(river(loc_2(largest(state(all))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_451", "answer": []}
{"query": "What is the longest river in the smallest state in the USA ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))", "funql": "answer(longest(river(loc_2(smallest(state(loc_2(countryid('usa'))))))))", "prolog_ans": "[potomac]", "funql_ans": "[riverid(potomac)]", "funql_answer_parsed": ["potomac"], "prolog_answer_parsed": ["potomac"], "qid": "geo880_452", "answer": ["potomac"]}
{"query": "What is the longest river in the state with the highest point ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),state(B),loc(C,B),highest(C,place(C)))))", "funql": "answer(longest(river(loc_2(state(loc_1(highest(place(all))))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_453", "answer": []}
{"query": "What is the longest river in the state with the most major cities ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),most(B,C,(state(B),loc(C,B),major(C),city(C))))))", "funql": "answer(longest(river(loc_2(most(state(loc_1(major(city(all)))))))))", "prolog_ans": "[colorado]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["colorado"], "qid": "geo880_454", "answer": ["colorado"]}
{"query": "What is the longest river in the states that border Nebraska ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(nebraska)))))", "funql": "answer(longest(river(loc_2(state(next_to_2(stateid('nebraska')))))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_455", "answer": ["missouri"]}
{"query": "What is the longest river in the United States ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(longest(river(loc_2(countryid('usa')))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_456", "answer": ["missouri"]}
{"query": "What is the longest river in the US ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(longest(river(loc_2(countryid('usa')))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_457", "answer": ["missouri"]}
{"query": "What is the longest river that does not run through Texas ?", "prolog": "answer(A,longest(A,(river(A),not((traverse(A,B),const(B,stateid(texas)))))))", "funql": "answer(longest(exclude(river(all), traverse_2(stateid('texas')))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_458", "answer": ["missouri"]}
{"query": "What is the longest river that flows through a state that borders Indiana ?", "prolog": "answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(indiana)))))", "funql": "answer(longest(river(traverse_2(state(next_to_2(stateid('indiana')))))))", "prolog_ans": "[mississippi]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_459", "answer": ["mississippi"]}
{"query": "What is the longest river that flows through Colorado ?", "prolog": "answer(A,longest(A,(river(A),traverse(A,B),const(B,stateid(colorado)))))", "funql": "answer(longest(river(traverse_2(stateid('colorado')))))", "prolog_ans": "['rio grande']", "funql_ans": "[riverid('rio grande')]", "funql_answer_parsed": ["rio grande"], "prolog_answer_parsed": ["rio grande"], "qid": "geo880_460", "answer": ["rio grande"]}
{"query": "What is the longest river that passes the states that border the state that borders the most states ?", "prolog": "answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),most(C,D,(state(C),next_to(C,D),state(D))))))", "funql": "answer(longest(river(traverse_2(state(next_to_2(most(state(next_to_2(state(all))))))))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_461", "answer": ["missouri"]}
{"query": "What is the longest river that runs through a state that borders Tennessee ?", "prolog": "answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(tennessee)))))", "funql": "answer(longest(river(traverse_2(state(next_to_2(stateid('tennessee')))))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_462", "answer": ["missouri"]}
{"query": "What is the lowest elevation in Pennsylvania ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(pennsylvania)))))", "funql": "answer(lowest(place(loc_2(stateid('pennsylvania')))))", "prolog_ans": "['delaware river']", "funql_ans": "[placeid('delaware river')]", "funql_answer_parsed": ["delaware river"], "prolog_answer_parsed": ["delaware river"], "qid": "geo880_463", "answer": ["delaware river"]}
{"query": "What is the lowest point in Arkansas ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(arkansas)))))", "funql": "answer(lowest(place(loc_2(stateid('arkansas')))))", "prolog_ans": "['ouachita river']", "funql_ans": "[placeid('ouachita river')]", "funql_answer_parsed": ["ouachita river"], "prolog_answer_parsed": ["ouachita river"], "qid": "geo880_464", "answer": ["ouachita river"]}
{"query": "What is the lowest point in California ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(california)))))", "funql": "answer(lowest(place(loc_2(stateid('california')))))", "prolog_ans": "['death valley']", "funql_ans": "[placeid('death valley')]", "funql_answer_parsed": ["death valley"], "prolog_answer_parsed": ["death valley"], "qid": "geo880_465", "answer": ["death valley"]}
{"query": "What is the lowest point in Louisiana ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(louisiana)))))", "funql": "answer(lowest(place(loc_2(stateid('louisiana')))))", "prolog_ans": "['new orleans']", "funql_ans": "[placeid('new orleans')]", "funql_answer_parsed": ["new orleans"], "prolog_answer_parsed": ["new orleans"], "qid": "geo880_466", "answer": ["new orleans"]}
{"query": "What is the lowest point in Massachusetts ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(massachusetts)))))", "funql": "answer(lowest(place(loc_2(stateid('massachusetts')))))", "prolog_ans": "['atlantic ocean']", "funql_ans": "[placeid('atlantic ocean')]", "funql_answer_parsed": ["atlantic ocean"], "prolog_answer_parsed": ["atlantic ocean"], "qid": "geo880_467", "answer": ["atlantic ocean"]}
{"query": "What is the lowest point in Mississippi ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))", "funql": "answer(lowest(place(loc_2(stateid('mississippi')))))", "prolog_ans": "['gulf of mexico']", "funql_ans": "[placeid('gulf of mexico')]", "funql_answer_parsed": ["gulf of mexico"], "prolog_answer_parsed": ["gulf of mexico"], "qid": "geo880_468", "answer": ["gulf of mexico"]}
{"query": "What is the lowest point in Nebraska in meters ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(nebraska)))))", "funql": "answer(lowest(place(loc_2(stateid('nebraska')))))", "prolog_ans": "['southeast corner']", "funql_ans": "[placeid('southeast corner')]", "funql_answer_parsed": ["southeast corner"], "prolog_answer_parsed": ["southeast corner"], "qid": "geo880_469", "answer": ["southeast corner"]}
{"query": "What is the lowest point in Oregon ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(oregon)))))", "funql": "answer(lowest(place(loc_2(stateid('oregon')))))", "prolog_ans": "['pacific ocean']", "funql_ans": "[placeid('pacific ocean')]", "funql_answer_parsed": ["pacific ocean"], "prolog_answer_parsed": ["pacific ocean"], "qid": "geo880_470", "answer": ["pacific ocean"]}
{"query": "What is the lowest point in Texas ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(lowest(place(loc_2(stateid('texas')))))", "prolog_ans": "['gulf of mexico']", "funql_ans": "[placeid('gulf of mexico')]", "funql_answer_parsed": ["gulf of mexico"], "prolog_answer_parsed": ["gulf of mexico"], "qid": "geo880_471", "answer": ["gulf of mexico"]}
{"query": "What is the lowest point in the state of California ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),state(B),const(B,stateid(california)))))", "funql": "answer(lowest(place(loc_2(state(stateid('california'))))))", "prolog_ans": "['death valley']", "funql_ans": "[placeid('death valley')]", "funql_answer_parsed": ["death valley"], "prolog_answer_parsed": ["death valley"], "qid": "geo880_472", "answer": ["death valley"]}
{"query": "What is the lowest point in the state of Texas ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),state(B),const(B,stateid(texas)))))", "funql": "answer(lowest(place(loc_2(state(stateid('texas'))))))", "prolog_ans": "['gulf of mexico']", "funql_ans": "[placeid('gulf of mexico')]", "funql_answer_parsed": ["gulf of mexico"], "prolog_answer_parsed": ["gulf of mexico"], "qid": "geo880_473", "answer": ["gulf of mexico"]}
{"query": "What is the lowest point in the United States ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(lowest(place(loc_2(countryid('usa')))))", "prolog_ans": "['death valley']", "funql_ans": "[placeid('death valley')]", "funql_answer_parsed": ["death valley"], "prolog_answer_parsed": ["death valley"], "qid": "geo880_474", "answer": ["death valley"]}
{"query": "What is the lowest point in USA ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(lowest(place(loc_2(countryid('usa')))))", "prolog_ans": "['death valley']", "funql_ans": "[placeid('death valley')]", "funql_answer_parsed": ["death valley"], "prolog_answer_parsed": ["death valley"], "qid": "geo880_475", "answer": ["death valley"]}
{"query": "What is the lowest point in Wisconsin ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(wisconsin)))))", "funql": "answer(lowest(place(loc_2(stateid('wisconsin')))))", "prolog_ans": "['lake michigan']", "funql_ans": "[placeid('lake michigan')]", "funql_answer_parsed": ["lake michigan"], "prolog_answer_parsed": ["lake michigan"], "qid": "geo880_476", "answer": ["lake michigan"]}
{"query": "What is the lowest point of all states through which the Colorado river runs through ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),state(B),const(C,riverid(colorado)),river(C),traverse(C,B))))", "funql": "answer(lowest(place(loc_2(state(traverse_1(river(riverid('colorado'))))))))", "prolog_ans": "['death valley']", "funql_ans": "[placeid('death valley')]", "funql_answer_parsed": ["death valley"], "prolog_answer_parsed": ["death valley"], "qid": "geo880_477", "answer": ["death valley"]}
{"query": "What is the lowest point of Colorado ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))", "funql": "answer(lowest(place(loc_2(stateid('colorado')))))", "prolog_ans": "['arkansas river']", "funql_ans": "[placeid('arkansas river')]", "funql_answer_parsed": ["arkansas river"], "prolog_answer_parsed": ["arkansas river"], "qid": "geo880_478", "answer": ["arkansas river"]}
{"query": "What is the lowest point of the state with the largest area ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),largest(C,(state(B),area(B,C))))))", "funql": "answer(lowest(place(loc_2(largest_one(area_1(state(all)))))))", "prolog_ans": "['pacific ocean']", "funql_ans": "[placeid('pacific ocean')]", "funql_answer_parsed": ["pacific ocean"], "prolog_answer_parsed": ["pacific ocean"], "qid": "geo880_479", "answer": ["pacific ocean"]}
{"query": "What is the lowest point of the US ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(lowest(place(loc_2(countryid('usa')))))", "prolog_ans": "['death valley']", "funql_ans": "[placeid('death valley')]", "funql_answer_parsed": ["death valley"], "prolog_answer_parsed": ["death valley"], "qid": "geo880_480", "answer": ["death valley"]}
{"query": "What is the major cities in Montana ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(montana))))", "funql": "answer(major(city(loc_2(stateid('montana')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_481", "answer": []}
{"query": "What is the maximum elevation of San Francisco ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,cityid('san francisco',_)))))", "funql": "answer(highest(place(loc_2(cityid('san francisco', _)))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_482", "answer": []}
{"query": "What is the most dense state in the USA ?", "prolog": "answer(A,largest(B,(density(A,B),state(A),loc(A,C),const(C,countryid(usa)))))", "funql": "answer(largest_one(density_1(state(loc_2(countryid('usa'))))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_483", "answer": ["new jersey"]}
{"query": "What is the most populated capital in the USA ?", "prolog": "answer(A,largest(B,(population(A,B),capital(A),loc(A,C),const(C,countryid(usa)))))", "funql": "answer(largest_one(population_1(capital(loc_2(countryid('usa'))))))", "prolog_ans": "[phoenix]", "funql_ans": "[cityid(phoenix,az)]", "funql_answer_parsed": ["phoenix"], "prolog_answer_parsed": ["phoenix"], "qid": "geo880_484", "answer": ["phoenix"]}
{"query": "What is the most populated state bordering Oklahoma ?", "prolog": "answer(A,largest(B,(population(A,B),state(A),next_to(A,C),const(C,stateid(oklahoma)))))", "funql": "answer(largest_one(population_1(state(next_to_2(stateid('oklahoma'))))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_485", "answer": ["texas"]}
{"query": "What is the most populous city ?", "prolog": "answer(A,largest(B,(population(A,B),city(A))))", "funql": "answer(largest_one(population_1(city(all))))", "prolog_ans": "['new york']", "funql_ans": "[cityid('new york',ny)]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_486", "answer": ["new york"]}
{"query": "What is the most populous city in Texas ?", "prolog": "answer(B,largest(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas)))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('texas'))))))", "prolog_ans": "[houston]", "funql_ans": "[cityid(houston,tx)]", "funql_answer_parsed": ["houston"], "prolog_answer_parsed": ["houston"], "qid": "geo880_487", "answer": ["houston"]}
{"query": "What is the most populous city in Wyoming ?", "prolog": "answer(A,largest(B,(population(A,B),city(A),loc(A,C),const(C,stateid(wyoming)))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('wyoming'))))))", "prolog_ans": "[casper]", "funql_ans": "[cityid(casper,wy)]", "funql_answer_parsed": ["casper"], "prolog_answer_parsed": ["casper"], "qid": "geo880_488", "answer": ["casper"]}
{"query": "What is the most populous state ?", "prolog": "answer(A,largest(B,(population(A,B),state(A))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_489", "answer": ["california"]}
{"query": "What is the most populous state in the US ?", "prolog": "answer(A,largest(B,(population(A,B),state(A),loc(A,C),const(C,countryid(usa)))))", "funql": "answer(largest_one(population_1(state(loc_2(countryid('usa'))))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_490", "answer": ["california"]}
{"query": "What is the most populous state through which the Mississippi runs ?", "prolog": "answer(A,largest(B,(population(A,B),state(A),const(C,riverid(mississippi)),traverse(C,A))))", "funql": "answer(largest_one(population_1(state(traverse_1(riverid('mississippi'))))))", "prolog_ans": "[illinois]", "funql_ans": "[stateid(illinois)]", "funql_answer_parsed": ["illinois"], "prolog_answer_parsed": ["illinois"], "qid": "geo880_491", "answer": ["illinois"]}
{"query": "What is the name of the state with the lowest point ?", "prolog": "answer(A,(state(A),loc(B,A),lowest(B,place(B))))", "funql": "answer(state(loc_1(lowest(place(all)))))", "prolog_ans": "[alabama,alaska,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,hawaii,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maine,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'rhode island','south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_492", "answer": ["california"]}
{"query": "What is the number of neighboring states for Kentucky ?", "prolog": "answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(kentucky))),A))", "funql": "answer(count(state(next_to_2(stateid('kentucky')))))", "prolog_ans": "[7]", "funql_ans": "[7]", "funql_answer_parsed": [7], "prolog_answer_parsed": [7], "qid": "geo880_493", "answer": [7]}
{"query": "What is the population density in the state with capital Austin ?", "prolog": "answer(A,(density(B,A),state(B),loc(C,B),capital(C),const(C,cityid(austin,_))))", "funql": "answer(density_1(state(loc_1(capital(cityid('austin', _))))))", "prolog_ans": "[53.33068472716233]", "funql_ans": "[53.33068472716233]", "funql_answer_parsed": [53.3306847272], "prolog_answer_parsed": [53.3306847272], "qid": "geo880_494", "answer": [53.33068472716233]}
{"query": "What is the population density of Maine ?", "prolog": "answer(A,(density(B,A),const(B,stateid(maine))))", "funql": "answer(density_1(stateid('maine')))", "prolog_ans": "[33.81932962573275]", "funql_ans": "[33.81932962573275]", "funql_answer_parsed": [33.8193296257], "prolog_answer_parsed": [33.8193296257], "qid": "geo880_495", "answer": [33.81932962573275]}
{"query": "What is the population density of South Dakota ?", "prolog": "answer(A,(density(B,A),const(B,stateid('south dakota'))))", "funql": "answer(density_1(stateid('south dakota')))", "prolog_ans": "[8.957505576015354]", "funql_ans": "[8.957505576015354]", "funql_answer_parsed": [8.957505576], "prolog_answer_parsed": [8.957505576], "qid": "geo880_496", "answer": [8.957505576015354]}
{"query": "What is the population density of Texas ?", "prolog": "answer(A,(density(B,A),const(B,stateid(texas))))", "funql": "answer(density_1(stateid('texas')))", "prolog_ans": "[53.33068472716233]", "funql_ans": "[53.33068472716233]", "funql_answer_parsed": [53.3306847272], "prolog_answer_parsed": [53.3306847272], "qid": "geo880_497", "answer": [53.33068472716233]}
{"query": "What is the population density of the largest state ?", "prolog": "answer(A,(density(B,A),largest(B,state(B))))", "funql": "answer(density_1(largest(state(all))))", "prolog_ans": "[0.6798646362098139]", "funql_ans": "[0.6798646362098139]", "funql_answer_parsed": [0.6798646362], "prolog_answer_parsed": [0.6798646362], "qid": "geo880_498", "answer": [0.6798646362098139]}
{"query": "What is the population density of the smallest state ?", "prolog": "answer(A,(density(B,A),smallest(B,state(B))))", "funql": "answer(density_1(smallest(state(all))))", "prolog_ans": "[580.0]", "funql_ans": "[580.0]", "funql_answer_parsed": [580.0], "prolog_answer_parsed": [580.0], "qid": "geo880_499", "answer": [580.0]}
{"query": "What is the population density of the state with the smallest area ?", "prolog": "answer(A,(density(B,A),smallest(C,(state(B),area(B,C)))))", "funql": "answer(density_1(smallest_one(area_1(state(all)))))", "prolog_ans": "[580.0]", "funql_ans": "[580.0]", "funql_answer_parsed": [580.0], "prolog_answer_parsed": [580.0], "qid": "geo880_500", "answer": [580.0]}
{"query": "What is the population density of the state with the smallest population ?", "prolog": "answer(A,(density(B,A),smallest(C,(state(B),population(B,C)))))", "funql": "answer(density_1(smallest_one(population_1(state(all)))))", "prolog_ans": "[0.6798646362098139]", "funql_ans": "[0.0053517006802721095]", "funql_answer_parsed": [0.0053517007], "prolog_answer_parsed": [0.6798646362], "qid": "geo880_501", "answer": [0.6798646362098139]}
{"query": "What is the population density of Wyoming ?", "prolog": "answer(A,(density(B,A),const(B,stateid(wyoming))))", "funql": "answer(density_1(stateid('wyoming')))", "prolog_ans": "[4.8007545317915525]", "funql_ans": "[4.8007545317915525]", "funql_answer_parsed": [4.8007545318], "prolog_answer_parsed": [4.8007545318], "qid": "geo880_502", "answer": [4.8007545317915525]}
{"query": "What is the population in Boston ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boston,_))))", "funql": "answer(population_1(cityid('boston', _)))", "prolog_ans": "[562994]", "funql_ans": "[562994]", "funql_answer_parsed": [562994], "prolog_answer_parsed": [562994], "qid": "geo880_503", "answer": [562994]}
{"query": "What is the population of Alaska ?", "prolog": "answer(A,(population(B,A),const(B,stateid(alaska))))", "funql": "answer(population_1(stateid('alaska')))", "prolog_ans": "[401800.0]", "funql_ans": "[401800.0]", "funql_answer_parsed": [401800.0], "prolog_answer_parsed": [401800.0], "qid": "geo880_504", "answer": [401800.0]}
{"query": "What is the population of Arizona ?", "prolog": "answer(A,(population(B,A),const(B,stateid(arizona))))", "funql": "answer(population_1(stateid('arizona')))", "prolog_ans": "[2718000.0]", "funql_ans": "[2718000.0]", "funql_answer_parsed": [2718000.0], "prolog_answer_parsed": [2718000.0], "qid": "geo880_505", "answer": [2718000.0]}
{"query": "What is the population of Atlanta ?", "prolog": "answer(A,(population(B,A),const(B,cityid(atlanta,_))))", "funql": "answer(population_1(cityid('atlanta', _)))", "prolog_ans": "[425022]", "funql_ans": "[425022]", "funql_answer_parsed": [425022], "prolog_answer_parsed": [425022], "qid": "geo880_506", "answer": [425022]}
{"query": "What is the population of Atlanta GA ?", "prolog": "answer(A,(population(B,A),const(B,cityid(atlanta,_))))", "funql": "answer(population_1(cityid('atlanta', 'ga')))", "prolog_ans": "[425022]", "funql_ans": "[425022]", "funql_answer_parsed": [425022], "prolog_answer_parsed": [425022], "qid": "geo880_507", "answer": [425022]}
{"query": "What is the population of Austin ?", "prolog": "answer(A,(population(B,A),const(B,cityid(austin,_))))", "funql": "answer(population_1(cityid('austin', _)))", "prolog_ans": "[345496]", "funql_ans": "[345496]", "funql_answer_parsed": [345496], "prolog_answer_parsed": [345496], "qid": "geo880_508", "answer": [345496]}
{"query": "What is the population of Austin Texas ?", "prolog": "answer(A,(population(B,A),const(B,cityid(austin,tx))))", "funql": "answer(population_1(cityid('austin', 'tx')))", "prolog_ans": "[345496]", "funql_ans": "[345496]", "funql_answer_parsed": [345496], "prolog_answer_parsed": [345496], "qid": "geo880_509", "answer": [345496]}
{"query": "What is the population of Boston Massachusetts ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boston,ma))))", "funql": "answer(population_1(cityid('boston', 'ma')))", "prolog_ans": "[562994]", "funql_ans": "[562994]", "funql_answer_parsed": [562994], "prolog_answer_parsed": [562994], "qid": "geo880_510", "answer": [562994]}
{"query": "What is the population of Boulder ?", "prolog": "answer(A,(population(B,A),const(B,cityid(boulder,_))))", "funql": "answer(population_1(cityid('boulder', _)))", "prolog_ans": "[76685]", "funql_ans": "[76685]", "funql_answer_parsed": [76685], "prolog_answer_parsed": [76685], "qid": "geo880_511", "answer": [76685]}
{"query": "What is the population of California ?", "prolog": "answer(A,(population(B,A),const(B,stateid(california))))", "funql": "answer(population_1(stateid('california')))", "prolog_ans": "[23670000.0]", "funql_ans": "[23670000.0]", "funql_answer_parsed": [23670000.0], "prolog_answer_parsed": [23670000.0], "qid": "geo880_512", "answer": [23670000.0]}
{"query": "What is the population of Dallas ?", "prolog": "answer(A,(population(B,A),const(B,cityid(dallas,_))))", "funql": "answer(population_1(cityid('dallas', _)))", "prolog_ans": "[904078]", "funql_ans": "[904078]", "funql_answer_parsed": [904078], "prolog_answer_parsed": [904078], "qid": "geo880_513", "answer": [904078]}
{"query": "What is the population of Denver ?", "prolog": "answer(A,(population(B,A),const(B,cityid(denver,_))))", "funql": "answer(population_1(cityid('denver', _)))", "prolog_ans": "[492365]", "funql_ans": "[492365]", "funql_answer_parsed": [492365], "prolog_answer_parsed": [492365], "qid": "geo880_514", "answer": [492365]}
{"query": "What is the population of Erie Pennsylvania ?", "prolog": "answer(A,(population(B,A),const(B,cityid(erie,pa))))", "funql": "answer(population_1(cityid('erie', 'pa')))", "prolog_ans": "[119123]", "funql_ans": "[119123]", "funql_answer_parsed": [119123], "prolog_answer_parsed": [119123], "qid": "geo880_515", "answer": [119123]}
{"query": "What is the population of Hawaii ?", "prolog": "answer(A,(population(B,A),const(B,stateid(hawaii))))", "funql": "answer(population_1(stateid('hawaii')))", "prolog_ans": "[964000.0]", "funql_ans": "[964000.0]", "funql_answer_parsed": [964000.0], "prolog_answer_parsed": [964000.0], "qid": "geo880_516", "answer": [964000.0]}
{"query": "What is the population of Houston ?", "prolog": "answer(A,(population(B,A),const(B,cityid(houston,_))))", "funql": "answer(population_1(cityid('houston', _)))", "prolog_ans": "[1595138]", "funql_ans": "[1595138]", "funql_answer_parsed": [1595138], "prolog_answer_parsed": [1595138], "qid": "geo880_517", "answer": [1595138]}
{"query": "What is the population of Idaho ?", "prolog": "answer(A,(population(B,A),const(B,stateid(idaho))))", "funql": "answer(population_1(stateid('idaho')))", "prolog_ans": "[944000.0]", "funql_ans": "[944000.0]", "funql_answer_parsed": [944000.0], "prolog_answer_parsed": [944000.0], "qid": "geo880_518", "answer": [944000.0]}
{"query": "What is the population of Illinois ?", "prolog": "answer(A,(population(B,A),const(B,stateid(illinois))))", "funql": "answer(population_1(stateid('illinois')))", "prolog_ans": "[11400000.0]", "funql_ans": "[11400000.0]", "funql_answer_parsed": [11400000.0], "prolog_answer_parsed": [11400000.0], "qid": "geo880_519", "answer": [11400000.0]}
{"query": "What is the population of Maine ?", "prolog": "answer(A,(population(B,A),const(B,stateid(maine))))", "funql": "answer(population_1(stateid('maine')))", "prolog_ans": "[1125000.0]", "funql_ans": "[1125000.0]", "funql_answer_parsed": [1125000.0], "prolog_answer_parsed": [1125000.0], "qid": "geo880_520", "answer": [1125000.0]}
{"query": "What is the population of Maryland ?", "prolog": "answer(A,(population(B,A),const(B,stateid(maryland))))", "funql": "answer(population_1(stateid('maryland')))", "prolog_ans": "[4217000.0]", "funql_ans": "[4217000.0]", "funql_answer_parsed": [4217000.0], "prolog_answer_parsed": [4217000.0], "qid": "geo880_521", "answer": [4217000.0]}
{"query": "What is the population of Minnesota ?", "prolog": "answer(A,(population(B,A),const(B,stateid(minnesota))))", "funql": "answer(population_1(stateid('minnesota')))", "prolog_ans": "[4076000.0]", "funql_ans": "[4076000.0]", "funql_answer_parsed": [4076000.0], "prolog_answer_parsed": [4076000.0], "qid": "geo880_522", "answer": [4076000.0]}
{"query": "What is the population of Montana ?", "prolog": "answer(A,(population(B,A),const(B,stateid(montana))))", "funql": "answer(population_1(stateid('montana')))", "prolog_ans": "[786700.0]", "funql_ans": "[786.7]", "funql_answer_parsed": [786.7], "prolog_answer_parsed": [786700.0], "qid": "geo880_523", "answer": [786700.0]}
{"query": "What is the population of New Mexico ?", "prolog": "answer(A,(population(B,A),const(B,stateid('new mexico'))))", "funql": "answer(population_1(stateid('new mexico')))", "prolog_ans": "[1303000.0]", "funql_ans": "[1303000.0]", "funql_answer_parsed": [1303000.0], "prolog_answer_parsed": [1303000.0], "qid": "geo880_524", "answer": [1303000.0]}
{"query": "What is the population of New York ?", "prolog": "answer(A,(population(B,A),const(B,stateid('new york'))))", "funql": "answer(population_1(stateid('new york')))", "prolog_ans": "[17558000.0]", "funql_ans": "[17558000.0]", "funql_answer_parsed": [17558000.0], "prolog_answer_parsed": [17558000.0], "qid": "geo880_525", "answer": [17558000.0]}
{"query": "What is the population of New York City ?", "prolog": "answer(A,(population(B,A),const(B,cityid('new york',_))))", "funql": "answer(population_1(city(cityid('new york', _))))", "prolog_ans": "[7071639]", "funql_ans": "[7071639]", "funql_answer_parsed": [7071639], "prolog_answer_parsed": [7071639], "qid": "geo880_526", "answer": [7071639]}
{"query": "What is the population of Oregon ?", "prolog": "answer(A,(population(B,A),const(B,stateid(oregon))))", "funql": "answer(population_1(stateid('oregon')))", "prolog_ans": "[2633000.0]", "funql_ans": "[2633000.0]", "funql_answer_parsed": [2633000.0], "prolog_answer_parsed": [2633000.0], "qid": "geo880_527", "answer": [2633000.0]}
{"query": "What is the population of Portland Maine ?", "prolog": "answer(A,(population(B,A),const(B,cityid(portland,me))))", "funql": "answer(population_1(cityid('portland', 'me')))", "prolog_ans": "[61572]", "funql_ans": "[61572]", "funql_answer_parsed": [61572], "prolog_answer_parsed": [61572], "qid": "geo880_528", "answer": [61572]}
{"query": "What is the population of Rhode Island ?", "prolog": "answer(A,(population(B,A),const(B,stateid('rhode island'))))", "funql": "answer(population_1(stateid('rhode island')))", "prolog_ans": "[947200.0]", "funql_ans": "[947200.0]", "funql_answer_parsed": [947200.0], "prolog_answer_parsed": [947200.0], "qid": "geo880_529", "answer": [947200.0]}
{"query": "What is the population of Sacramento ?", "prolog": "answer(A,(population(B,A),const(B,cityid(sacramento,_))))", "funql": "answer(population_1(cityid('sacramento', _)))", "prolog_ans": "[275741]", "funql_ans": "[275741]", "funql_answer_parsed": [275741], "prolog_answer_parsed": [275741], "qid": "geo880_530", "answer": [275741]}
{"query": "What is the population of San Antonio ?", "prolog": "answer(A,(population(B,A),const(B,cityid('san antonio',_))))", "funql": "answer(population_1(cityid('san antonio', _)))", "prolog_ans": "[785880]", "funql_ans": "[785880]", "funql_answer_parsed": [785880], "prolog_answer_parsed": [785880], "qid": "geo880_531", "answer": [785880]}
{"query": "What is the population of Seattle ?", "prolog": "answer(A,(population(B,A),const(B,cityid(seattle,_))))", "funql": "answer(population_1(cityid('seattle', _)))", "prolog_ans": "[493846]", "funql_ans": "[493846]", "funql_answer_parsed": [493846], "prolog_answer_parsed": [493846], "qid": "geo880_532", "answer": [493846]}
{"query": "What is the population of Seattle Washington ?", "prolog": "answer(A,(population(B,A),const(B,cityid(seattle,wa))))", "funql": "answer(population_1(cityid('seattle', 'wa')))", "prolog_ans": "[493846]", "funql_ans": "[493846]", "funql_answer_parsed": [493846], "prolog_answer_parsed": [493846], "qid": "geo880_533", "answer": [493846]}
{"query": "What is the population of South Dakota ?", "prolog": "answer(A,(population(B,A),const(B,stateid('south dakota'))))", "funql": "answer(population_1(stateid('south dakota')))", "prolog_ans": "[690767.0]", "funql_ans": "[690767.0]", "funql_answer_parsed": [690767.0], "prolog_answer_parsed": [690767.0], "qid": "geo880_534", "answer": [690767.0]}
{"query": "What is the population of Springfield Missouri ?", "prolog": "answer(A,(population(B,A),const(B,cityid(springfield,mo))))", "funql": "answer(population_1(cityid('springfield', 'mo')))", "prolog_ans": "[133116]", "funql_ans": "[133116]", "funql_answer_parsed": [133116], "prolog_answer_parsed": [133116], "qid": "geo880_535", "answer": [133116]}
{"query": "What is the population of Springfield South Dakota ?", "prolog": "answer(A,(population(B,A),const(B,cityid(springfield,sd))))", "funql": "answer(population_1(cityid('springfield', 'sd')))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_536", "answer": []}
{"query": "What is the population of Tempe Arizona ?", "prolog": "answer(A,(population(B,A),const(B,cityid(tempe,az))))", "funql": "answer(population_1(cityid('tempe', 'az')))", "prolog_ans": "[106919]", "funql_ans": "[106919]", "funql_answer_parsed": [106919], "prolog_answer_parsed": [106919], "qid": "geo880_537", "answer": [106919]}
{"query": "What is the population of Texas ?", "prolog": "answer(A,(population(B,A),const(B,stateid(texas))))", "funql": "answer(population_1(stateid('texas')))", "prolog_ans": "[14229000.0]", "funql_ans": "[14229000.0]", "funql_answer_parsed": [14229000.0], "prolog_answer_parsed": [14229000.0], "qid": "geo880_538", "answer": [14229000.0]}
{"query": "What is the population of the capital of the largest state ?", "prolog": "answer(A,(population(B,A),capital(B),loc(B,C),largest(C,state(C))))", "funql": "answer(population_1(capital(loc_2(largest(state(all))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_539", "answer": []}
{"query": "What is the population of the capital of the largest state through which the Mississippi runs ?", "prolog": "answer(A,(population(B,A),capital(B),loc(B,C),largest(C,(state(C),const(D,riverid(mississippi)),traverse(D,C)))))", "funql": "answer(population_1(capital(loc_2(largest(state(traverse_1(riverid('mississippi'))))))))", "prolog_ans": "[270230]", "funql_ans": "[270230]", "funql_answer_parsed": [270230], "prolog_answer_parsed": [270230], "qid": "geo880_540", "answer": [270230]}
{"query": "What is the population of the capital of the smallest state ?", "prolog": "answer(A,(population(B,A),capital(B),loc(B,C),smallest(C,state(C))))", "funql": "answer(population_1(capital(loc_2(smallest(state(all))))))", "prolog_ans": "[638333]", "funql_ans": "[638333]", "funql_answer_parsed": [638333], "prolog_answer_parsed": [638333], "qid": "geo880_541", "answer": [638333]}
{"query": "What is the population of the largest city in the state with the largest area ?", "prolog": "answer(A,(population(B,A),largest(B,(city(B),loc(B,C),largest(D,(state(C),area(C,D)))))))", "funql": "answer(population_1(largest(city(loc_2(largest_one(area_1(state(all))))))))", "prolog_ans": "[174431]", "funql_ans": "[174431]", "funql_answer_parsed": [174431], "prolog_answer_parsed": [174431], "qid": "geo880_542", "answer": [174431]}
{"query": "What is the population of the largest state ?", "prolog": "answer(A,(population(B,A),largest(B,state(B))))", "funql": "answer(population_1(largest(state(all))))", "prolog_ans": "[401800.0]", "funql_ans": "[401800.0]", "funql_answer_parsed": [401800.0], "prolog_answer_parsed": [401800.0], "qid": "geo880_543", "answer": [401800.0]}
{"query": "What is the population of the largest state that borders Texas ?", "prolog": "answer(A,(population(B,A),largest(B,(state(B),next_to(B,C),const(C,stateid(texas))))))", "funql": "answer(population_1(largest(state(next_to_2(stateid('texas'))))))", "prolog_ans": "[1303000.0]", "funql_ans": "[1303000.0]", "funql_answer_parsed": [1303000.0], "prolog_answer_parsed": [1303000.0], "qid": "geo880_544", "answer": [1303000.0]}
{"query": "What is the population of the major cities in Wisconsin ?", "prolog": "answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(wisconsin))))", "funql": "answer(population_1(major(city(loc_2(stateid('wisconsin'))))))", "prolog_ans": "[170616,636212]", "funql_ans": "[170616,636212]", "funql_answer_parsed": [170616, 636212], "prolog_answer_parsed": [170616, 636212], "qid": "geo880_545", "answer": [170616, 636212]}
{"query": "What is the population of the smallest state ?", "prolog": "answer(A,smallest(A,(population(B,A),state(B))))", "funql": "answer(smallest(population_1(state(all))))", "prolog_ans": "[401800.0]", "funql_ans": "[786.7]", "funql_answer_parsed": [786.7], "prolog_answer_parsed": [401800.0], "qid": "geo880_546", "answer": [401800.0]}
{"query": "What is the population of the state that borders the most states ?", "prolog": "answer(A,(population(B,A),most(B,C,(state(B),next_to(B,C),state(C)))))", "funql": "answer(population_1(most(state(next_to_2(state(all))))))", "prolog_ans": "[4916000.0]", "funql_ans": "[4916000.0]", "funql_answer_parsed": [4916000.0], "prolog_answer_parsed": [4916000.0], "qid": "geo880_547", "answer": [4916000.0]}
{"query": "What is the population of the state with the highest population density ?", "prolog": "answer(A,(population(B,A),largest(C,(state(B),density(B,C)))))", "funql": "answer(population_1(largest_one(density_1(state(all)))))", "prolog_ans": "[7365000.0]", "funql_ans": "[7365000.0]", "funql_answer_parsed": [7365000.0], "prolog_answer_parsed": [7365000.0], "qid": "geo880_548", "answer": [7365000.0]}
{"query": "What is the population of the state with the largest area ?", "prolog": "answer(A,(population(B,A),largest(C,(state(B),area(B,C)))))", "funql": "answer(population_1(largest_one(area_1(state(all)))))", "prolog_ans": "[401800.0]", "funql_ans": "[401800.0]", "funql_answer_parsed": [401800.0], "prolog_answer_parsed": [401800.0], "qid": "geo880_549", "answer": [401800.0]}
{"query": "What is the population of Tucson ?", "prolog": "answer(A,(population(B,A),const(B,cityid(tucson,_))))", "funql": "answer(population_1(cityid('tucson', _)))", "prolog_ans": "[330537]", "funql_ans": "[330537]", "funql_answer_parsed": [330537], "prolog_answer_parsed": [330537], "qid": "geo880_550", "answer": [330537]}
{"query": "What is the population of Utah ?", "prolog": "answer(A,(population(B,A),const(B,stateid(utah))))", "funql": "answer(population_1(stateid('utah')))", "prolog_ans": "[1461000.0]", "funql_ans": "[1461000.0]", "funql_answer_parsed": [1461000.0], "prolog_answer_parsed": [1461000.0], "qid": "geo880_551", "answer": [1461000.0]}
{"query": "What is the population of Washington ?", "prolog": "answer(A,(population(B,A),const(B,stateid(washington))))", "funql": "answer(population_1(stateid('washington')))", "prolog_ans": "[4113200.0]", "funql_ans": "[4113200.0]", "funql_answer_parsed": [4113200.0], "prolog_answer_parsed": [4113200.0], "qid": "geo880_552", "answer": [4113200.0]}
{"query": "What is the population of Washington DC ?", "prolog": "answer(A,(population(B,A),const(B,cityid(washington,dc))))", "funql": "answer(population_1(cityid('washington', 'dc')))", "prolog_ans": "[638333]", "funql_ans": "[638333]", "funql_answer_parsed": [638333], "prolog_answer_parsed": [638333], "qid": "geo880_553", "answer": [638333]}
{"query": "What is the river that cross over Ohio ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))", "funql": "answer(river(traverse_2(stateid('ohio'))))", "prolog_ans": "[ohio,wabash]", "funql_ans": "[riverid(ohio),riverid(wabash)]", "funql_answer_parsed": ["ohio", "wabash"], "prolog_answer_parsed": ["ohio", "wabash"], "qid": "geo880_554", "answer": ["ohio", "wabash"]}
{"query": "What is the shortest river ?", "prolog": "answer(A,shortest(A,river(A)))", "funql": "answer(shortest(river(all)))", "prolog_ans": "[delaware]", "funql_ans": "[riverid(delaware)]", "funql_answer_parsed": ["delaware"], "prolog_answer_parsed": ["delaware"], "qid": "geo880_555", "answer": ["delaware"]}
{"query": "What is the shortest river in Alaska ?", "prolog": "answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(alaska)))))", "funql": "answer(shortest(river(loc_2(stateid('alaska')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_556", "answer": []}
{"query": "What is the shortest river in Iowa ?", "prolog": "answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(iowa)))))", "funql": "answer(shortest(river(loc_2(stateid('iowa')))))", "prolog_ans": "[mississippi]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_557", "answer": ["mississippi"]}
{"query": "What is the shortest river in Nebraska ?", "prolog": "answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(nebraska)))))", "funql": "answer(shortest(river(loc_2(stateid('nebraska')))))", "prolog_ans": "[republican]", "funql_ans": "[riverid(republican)]", "funql_answer_parsed": ["republican"], "prolog_answer_parsed": ["republican"], "qid": "geo880_558", "answer": ["republican"]}
{"query": "What is the shortest river in Texas ?", "prolog": "answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(texas)))))", "funql": "answer(shortest(river(loc_2(stateid('texas')))))", "prolog_ans": "[pecos]", "funql_ans": "[riverid(pecos)]", "funql_answer_parsed": ["pecos"], "prolog_answer_parsed": ["pecos"], "qid": "geo880_559", "answer": ["pecos"]}
{"query": "What is the shortest river in the United States ?", "prolog": "answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(shortest(river(loc_2(countryid('usa')))))", "prolog_ans": "[delaware]", "funql_ans": "[riverid(delaware)]", "funql_answer_parsed": ["delaware"], "prolog_answer_parsed": ["delaware"], "qid": "geo880_560", "answer": ["delaware"]}
{"query": "What is the shortest river in the US ?", "prolog": "answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(shortest(river(loc_2(countryid('usa')))))", "prolog_ans": "[delaware]", "funql_ans": "[riverid(delaware)]", "funql_answer_parsed": ["delaware"], "prolog_answer_parsed": ["delaware"], "qid": "geo880_561", "answer": ["delaware"]}
{"query": "What is the shortest river in the USA ?", "prolog": "answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(shortest(river(loc_2(countryid('usa')))))", "prolog_ans": "[delaware]", "funql_ans": "[riverid(delaware)]", "funql_answer_parsed": ["delaware"], "prolog_answer_parsed": ["delaware"], "qid": "geo880_562", "answer": ["delaware"]}
{"query": "What is the size of California ?", "prolog": "answer(A,(size(B,A),const(B,stateid(california))))", "funql": "answer(size(stateid('california')))", "prolog_ans": "[158000.0]", "funql_ans": "[158000.0]", "funql_answer_parsed": [158000.0], "prolog_answer_parsed": [158000.0], "qid": "geo880_563", "answer": [158000.0]}
{"query": "What is the size of Florida ?", "prolog": "answer(A,(size(B,A),const(B,stateid(florida))))", "funql": "answer(size(stateid('florida')))", "prolog_ans": "[68664.0]", "funql_ans": "[68664.0]", "funql_answer_parsed": [68664.0], "prolog_answer_parsed": [68664.0], "qid": "geo880_564", "answer": [68664.0]}
{"query": "What is the size of Texas ?", "prolog": "answer(A,(size(B,A),const(B,stateid(texas))))", "funql": "answer(size(stateid('texas')))", "prolog_ans": "[266807.0]", "funql_ans": "[266807.0]", "funql_answer_parsed": [266807.0], "prolog_answer_parsed": [266807.0], "qid": "geo880_565", "answer": [266807.0]}
{"query": "What is the size of the capital of Texas ?", "prolog": "answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(texas))))", "funql": "answer(size(capital(loc_2(stateid('texas')))))", "prolog_ans": "[345496]", "funql_ans": "[345496]", "funql_answer_parsed": [345496], "prolog_answer_parsed": [345496], "qid": "geo880_566", "answer": [345496]}
{"query": "What is the size of the largest state in the USA ?", "prolog": "answer(A,(size(B,A),largest(B,(state(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(size(largest(state(loc_2(countryid('usa'))))))", "prolog_ans": "[591000.0]", "funql_ans": "[591000.0]", "funql_answer_parsed": [591000.0], "prolog_answer_parsed": [591000.0], "qid": "geo880_567", "answer": [591000.0]}
{"query": "What is the smallest city in Alaska ?", "prolog": "answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(alaska)))))", "funql": "answer(smallest(city(loc_2(stateid('alaska')))))", "prolog_ans": "[anchorage]", "funql_ans": "[cityid(anchorage,ak)]", "funql_answer_parsed": ["anchorage"], "prolog_answer_parsed": ["anchorage"], "qid": "geo880_568", "answer": ["anchorage"]}
{"query": "What is the smallest city in Arkansas ?", "prolog": "answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(arkansas)))))", "funql": "answer(smallest(city(loc_2(stateid('arkansas')))))", "prolog_ans": "['north little rock']", "funql_ans": "[cityid('north little rock',ar)]", "funql_answer_parsed": ["north little rock"], "prolog_answer_parsed": ["north little rock"], "qid": "geo880_569", "answer": ["north little rock"]}
{"query": "What is the smallest city in Hawaii ?", "prolog": "answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(hawaii)))))", "funql": "answer(smallest(city(loc_2(stateid('hawaii')))))", "prolog_ans": "[koolaupoko]", "funql_ans": "[cityid(koolaupoko,hi)]", "funql_answer_parsed": ["koolaupoko"], "prolog_answer_parsed": ["koolaupoko"], "qid": "geo880_570", "answer": ["koolaupoko"]}
{"query": "What is the smallest city in the largest state ?", "prolog": "answer(A,smallest(A,(city(A),loc(A,B),largest(B,state(B)))))", "funql": "answer(smallest(city(loc_2(largest(state(all))))))", "prolog_ans": "[anchorage]", "funql_ans": "[cityid(anchorage,ak)]", "funql_answer_parsed": ["anchorage"], "prolog_answer_parsed": ["anchorage"], "qid": "geo880_571", "answer": ["anchorage"]}
{"query": "What is the smallest city in the US ?", "prolog": "answer(A,smallest(A,(city(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(smallest(city(loc_2(countryid('usa')))))", "prolog_ans": "['scotts valley']", "funql_ans": "[cityid('scotts valley',ca)]", "funql_answer_parsed": ["scotts valley"], "prolog_answer_parsed": ["scotts valley"], "qid": "geo880_572", "answer": ["scotts valley"]}
{"query": "What is the smallest city in the USA ?", "prolog": "answer(A,smallest(A,(city(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(smallest(city(loc_2(countryid('usa')))))", "prolog_ans": "['scotts valley']", "funql_ans": "[cityid('scotts valley',ca)]", "funql_answer_parsed": ["scotts valley"], "prolog_answer_parsed": ["scotts valley"], "qid": "geo880_573", "answer": ["scotts valley"]}
{"query": "What is the smallest city in Washington ?", "prolog": "answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(washington)))))", "funql": "answer(smallest(city(loc_2(stateid('washington')))))", "prolog_ans": "[bellevue]", "funql_ans": "[cityid(bellevue,wa)]", "funql_answer_parsed": ["bellevue"], "prolog_answer_parsed": ["bellevue"], "qid": "geo880_574", "answer": ["bellevue"]}
{"query": "What is the smallest city of the smallest state in the US ?", "prolog": "answer(A,smallest(A,(city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))", "funql": "answer(smallest(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))", "prolog_ans": "[washington]", "funql_ans": "[cityid(washington,dc)]", "funql_answer_parsed": ["washington"], "prolog_answer_parsed": ["washington"], "qid": "geo880_575", "answer": ["washington"]}
{"query": "What is the smallest state bordering Ohio ?", "prolog": "answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(ohio)))))", "funql": "answer(smallest(state(next_to_2(stateid('ohio')))))", "prolog_ans": "['west virginia']", "funql_ans": "[stateid('west virginia')]", "funql_answer_parsed": ["west virginia"], "prolog_answer_parsed": ["west virginia"], "qid": "geo880_576", "answer": ["west virginia"]}
{"query": "What is the smallest state bordering Wyoming ?", "prolog": "answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(wyoming)))))", "funql": "answer(smallest(state(next_to_2(stateid('wyoming')))))", "prolog_ans": "['south dakota']", "funql_ans": "[stateid('south dakota')]", "funql_answer_parsed": ["south dakota"], "prolog_answer_parsed": ["south dakota"], "qid": "geo880_577", "answer": ["south dakota"]}
{"query": "What is the smallest state by area ?", "prolog": "answer(A,smallest(B,(state(A),area(A,B))))", "funql": "answer(smallest_one(area_1(state(all))))", "prolog_ans": "['district of columbia']", "funql_ans": "[stateid('district of columbia')]", "funql_answer_parsed": ["district of columbia"], "prolog_answer_parsed": ["district of columbia"], "qid": "geo880_578", "answer": ["district of columbia"]}
{"query": "What is the smallest state in the USA ?", "prolog": "answer(A,smallest(A,(state(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(smallest(state(loc_2(countryid('usa')))))", "prolog_ans": "['district of columbia']", "funql_ans": "[stateid('district of columbia')]", "funql_answer_parsed": ["district of columbia"], "prolog_answer_parsed": ["district of columbia"], "qid": "geo880_579", "answer": ["district of columbia"]}
{"query": "What is the smallest state that borders Texas ?", "prolog": "answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))", "funql": "answer(smallest(state(next_to_2(stateid('texas')))))", "prolog_ans": "[louisiana]", "funql_ans": "[stateid(louisiana)]", "funql_answer_parsed": ["louisiana"], "prolog_answer_parsed": ["louisiana"], "qid": "geo880_580", "answer": ["louisiana"]}
{"query": "What is the smallest state that borders the most states ?", "prolog": "answer(A,smallest(A,most(A,B,(state(A),next_to(A,B),state(B)))))", "funql": "answer(smallest(most(state(next_to_2(state(all))))))", "prolog_ans": "[missouri]", "funql_ans": "[stateid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_581", "answer": ["missouri"]}
{"query": "What is the smallest state that the Mississippi river runs through ?", "prolog": "answer(A,smallest(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A))))", "funql": "answer(smallest(state(traverse_1(river(riverid('mississippi'))))))", "prolog_ans": "[tennessee]", "funql_ans": "[stateid(tennessee)]", "funql_answer_parsed": ["tennessee"], "prolog_answer_parsed": ["tennessee"], "qid": "geo880_582", "answer": ["tennessee"]}
{"query": "What is the smallest state through which the longest river runs ?", "prolog": "answer(A,smallest(A,(state(A),longest(B,river(B)),traverse(B,A))))", "funql": "answer(smallest(state(traverse_1(longest(river(all))))))", "prolog_ans": "[iowa]", "funql_ans": "[stateid(iowa)]", "funql_answer_parsed": ["iowa"], "prolog_answer_parsed": ["iowa"], "qid": "geo880_583", "answer": ["iowa"]}
{"query": "What is the state that contains the highest point ?", "prolog": "answer(A,(state(A),loc(B,A),highest(B,place(B))))", "funql": "answer(state(loc_1(highest(place(all)))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_584", "answer": ["alaska"]}
{"query": "What is the state with the highest elevation in the United States ?", "prolog": "answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_585", "answer": ["alaska"]}
{"query": "What is the state with the largest area ?", "prolog": "answer(A,largest(B,(state(A),area(A,B))))", "funql": "answer(largest_one(area_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_586", "answer": ["alaska"]}
{"query": "What is the state with the largest density in USA ?", "prolog": "answer(A,largest(B,(state(A),density(A,B),loc(A,C),const(C,countryid(usa)))))", "funql": "answer(largest_one(density_1(state(loc_2(countryid('usa'))))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_587", "answer": ["new jersey"]}
{"query": "What is the state with the largest population density ?", "prolog": "answer(A,largest(B,(state(A),density(A,B))))", "funql": "answer(largest_one(density_1(state(all))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_588", "answer": ["new jersey"]}
{"query": "What is the state with the lowest point ?", "prolog": "answer(A,(state(A),loc(B,A),lowest(B,place(B))))", "funql": "answer(state(loc_1(lowest(place(all)))))", "prolog_ans": "[alabama,alaska,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,hawaii,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maine,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'rhode island','south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_589", "answer": ["california"]}
{"query": "What is the state with the lowest population ?", "prolog": "answer(A,smallest(B,(state(A),population(A,B))))", "funql": "answer(smallest_one(population_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_590", "answer": ["alaska"]}
{"query": "What is the state with the lowest population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_591", "answer": ["alaska"]}
{"query": "What is the state with the smallest area ?", "prolog": "answer(A,smallest(B,(state(A),area(A,B))))", "funql": "answer(smallest_one(area_1(state(all))))", "prolog_ans": "['district of columbia']", "funql_ans": "[stateid('district of columbia')]", "funql_answer_parsed": ["district of columbia"], "prolog_answer_parsed": ["district of columbia"], "qid": "geo880_592", "answer": ["district of columbia"]}
{"query": "What is the tallest mountain in America ?", "prolog": "answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(mountain(loc_2(countryid('usa')))))", "prolog_ans": "[mckinley]", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mckinley"], "qid": "geo880_593", "answer": ["mount mckinley"]}
{"query": "What is the tallest mountain in the United States ?", "prolog": "answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(mountain(loc_2(countryid('usa')))))", "prolog_ans": "[mckinley]", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mckinley"], "qid": "geo880_594", "answer": ["mount mckinley"]}
{"query": "What is the total area of the USA ?", "prolog": "answer(A,(area(B,A),const(B,countryid(usa))))", "funql": "answer(area_1(countryid('usa')))", "prolog_ans": "[9826675.0]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [9826675.0], "qid": "geo880_595", "answer": [9826675.0]}
{"query": "What is the total length of all rivers in the USA ?", "prolog": "answer(A,sum(B,(len(C,B),river(C)),A))", "funql": "answer(sum(len(river(all))))", "prolog_ans": "[51393]", "funql_ans": "[51393]", "funql_answer_parsed": [51393], "prolog_answer_parsed": [51393], "qid": "geo880_596", "answer": [51393]}
{"query": "What is the total population of the states that border Texas ?", "prolog": "answer(A,sum(B,(population(C,B),state(C),next_to(D,C),const(D,stateid(texas))),A))", "funql": "answer(sum(population_1(state(next_to_2(stateid('texas'))))))", "prolog_ans": "[10820000.0]", "funql_ans": "[10820000.0]", "funql_answer_parsed": [10820000.0], "prolog_answer_parsed": [10820000.0], "qid": "geo880_597", "answer": [10820000.0]}
{"query": "What length is the Mississippi ?", "prolog": "answer(A,(len(B,A),const(B,riverid(mississippi))))", "funql": "answer(len(riverid('mississippi')))", "prolog_ans": "[3778]", "funql_ans": "[3778]", "funql_answer_parsed": [3778], "prolog_answer_parsed": [3778], "qid": "geo880_598", "answer": [3778]}
{"query": "What major cities are located in Pennsylvania ?", "prolog": "answer(A,(major(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))", "funql": "answer(major(city(loc_2(stateid('pennsylvania')))))", "prolog_ans": "[philadelphia,pittsburgh]", "funql_ans": "[cityid(philadelphia,pa),cityid(pittsburgh,pa)]", "funql_answer_parsed": ["philadelphia", "pittsburgh"], "prolog_answer_parsed": ["philadelphia", "pittsburgh"], "qid": "geo880_599", "answer": ["philadelphia", "pittsburgh"]}
{"query": "What major rivers run through Illinois ?", "prolog": "answer(A,(major(A),river(A),traverse(A,B),const(B,stateid(illinois))))", "funql": "answer(major(river(traverse_2(stateid('illinois')))))", "prolog_ans": "[mississippi,ohio,wabash]", "funql_ans": "[riverid(mississippi),riverid(ohio),riverid(wabash)]", "funql_answer_parsed": ["mississippi", "ohio", "wabash"], "prolog_answer_parsed": ["mississippi", "ohio", "wabash"], "qid": "geo880_600", "answer": ["mississippi", "ohio", "wabash"]}
{"query": "What mountains are in Alaska ?", "prolog": "answer(A,(mountain(A),loc(A,B),const(B,stateid(alaska))))", "funql": "answer(mountain(loc_2(stateid('alaska'))))", "prolog_ans": "[alverstone,bear,blackburn,bona,'browne tower',churchill,'east buttress',fairweather,foraker,hubbard,hunter,kennedy,mckinley,sanford,'south buttress','st. elias',vancouver,wrangell]", "funql_ans": "[placeid('mount mckinley'),placeid('pacific ocean')]", "funql_answer_parsed": ["mount mckinley", "pacific ocean"], "prolog_answer_parsed": ["alverstone", "bear", "blackburn", "bona", "browne tower", "churchill", "east buttress", "fairweather", "foraker", "hubbard", "hunter", "kennedy", "mckinley", "sanford", "south buttress", "st. elias", "vancouver", "wrangell"], "qid": "geo880_601", "answer": ["alverstone", "bear", "blackburn", "bona", "browne tower", "churchill", "east buttress", "fairweather", "foraker", "hubbard", "hunter", "kennedy", "mckinley", "sanford", "south buttress", "st. elias", "vancouver", "wrangell"]}
{"query": "What river flows through Kansas ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(kansas))))", "funql": "answer(river(traverse_2(stateid('kansas'))))", "prolog_ans": "[arkansas,cimarron,neosho,republican,'smoky hill']", "funql_ans": "[riverid(arkansas),riverid(cimarron),riverid(neosho),riverid(republican),riverid('smoky hill')]", "funql_answer_parsed": ["arkansas", "cimarron", "neosho", "republican", "smoky hill"], "prolog_answer_parsed": ["arkansas", "cimarron", "neosho", "republican", "smoky hill"], "qid": "geo880_602", "answer": ["arkansas", "cimarron", "neosho", "republican", "smoky hill"]}
{"query": "What river flows through Texas ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))", "funql": "answer(river(traverse_2(stateid('texas'))))", "prolog_ans": "[canadian,pecos,red,'rio grande',washita]", "funql_ans": "[riverid(canadian),riverid(pecos),riverid(red),riverid('rio grande'),riverid(washita)]", "funql_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "prolog_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "qid": "geo880_603", "answer": ["canadian", "pecos", "red", "rio grande", "washita"]}
{"query": "What river flows through the most states ?", "prolog": "answer(A,most(A,B,(river(A),traverse(A,B),state(B))))", "funql": "answer(most(river(traverse_2(state(all)))))", "prolog_ans": "[mississippi]", "funql_ans": "[stateid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_604", "answer": ["mississippi"]}
{"query": "What river is the longest one in the United States ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(longest(river(loc_2(countryid('usa')))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_605", "answer": ["missouri"]}
{"query": "What river runs through Illinois ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(illinois))))", "funql": "answer(river(traverse_2(stateid('illinois'))))", "prolog_ans": "[mississippi,ohio,rock,wabash]", "funql_ans": "[riverid(mississippi),riverid(ohio),riverid(rock),riverid(wabash)]", "funql_answer_parsed": ["mississippi", "ohio", "rock", "wabash"], "prolog_answer_parsed": ["mississippi", "ohio", "rock", "wabash"], "qid": "geo880_606", "answer": ["mississippi", "ohio", "rock", "wabash"]}
{"query": "What river runs through the most states ?", "prolog": "answer(A,most(A,B,(river(A),traverse(A,B),state(B))))", "funql": "answer(most(river(traverse_2(state(all)))))", "prolog_ans": "[mississippi]", "funql_ans": "[stateid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_607", "answer": ["mississippi"]}
{"query": "What river runs through the state with the most cities ?", "prolog": "answer(A,(river(A),traverse(A,B),most(B,C,(state(B),loc(C,B),city(C)))))", "funql": "answer(river(traverse_2(most(state(loc_1(city(all)))))))", "prolog_ans": "[colorado]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["colorado"], "qid": "geo880_608", "answer": ["colorado"]}
{"query": "What river runs through Virginia ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(virginia))))", "funql": "answer(river(traverse_2(stateid('virginia'))))", "prolog_ans": "[potomac,roanoke]", "funql_ans": "[riverid(potomac),riverid(roanoke)]", "funql_answer_parsed": ["potomac", "roanoke"], "prolog_answer_parsed": ["potomac", "roanoke"], "qid": "geo880_609", "answer": ["potomac", "roanoke"]}
{"query": "What river traverses the most states ?", "prolog": "answer(A,most(A,B,(river(A),traverse(A,B),state(B))))", "funql": "answer(most(river(traverse_2(state(all)))))", "prolog_ans": "[mississippi]", "funql_ans": "[stateid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_610", "answer": ["mississippi"]}
{"query": "What river traverses the state which borders the most states ?", "prolog": "answer(A,(river(A),traverse(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))", "funql": "answer(river(traverse_2(most(state(next_to_2(state(all)))))))", "prolog_ans": "[mississippi,missouri,'st. francis',white]", "funql_ans": "[riverid(mississippi),riverid(missouri),riverid('st. francis'),riverid(white)]", "funql_answer_parsed": ["mississippi", "missouri", "st. francis", "white"], "prolog_answer_parsed": ["mississippi", "missouri", "st. francis", "white"], "qid": "geo880_611", "answer": ["mississippi", "missouri", "st. francis", "white"]}
{"query": "What rivers are in Nevada ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(nevada))))", "funql": "answer(river(loc_2(stateid('nevada'))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_612", "answer": ["colorado"]}
{"query": "What rivers are in New Mexico ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid('new mexico'))))", "funql": "answer(river(loc_2(stateid('new mexico'))))", "prolog_ans": "[canadian,cimarron,gila,pecos,red,'rio grande','san juan']", "funql_ans": "[riverid(canadian),riverid(cimarron),riverid(gila),riverid(pecos),riverid(red),riverid('rio grande'),riverid('san juan')]", "funql_answer_parsed": ["canadian", "cimarron", "gila", "pecos", "red", "rio grande", "san juan"], "prolog_answer_parsed": ["canadian", "cimarron", "gila", "pecos", "red", "rio grande", "san juan"], "qid": "geo880_613", "answer": ["canadian", "cimarron", "gila", "pecos", "red", "rio grande", "san juan"]}
{"query": "What rivers are in Oregon ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(oregon))))", "funql": "answer(river(loc_2(stateid('oregon'))))", "prolog_ans": "[columbia,snake]", "funql_ans": "[riverid(columbia),riverid(snake)]", "funql_answer_parsed": ["columbia", "snake"], "prolog_answer_parsed": ["columbia", "snake"], "qid": "geo880_614", "answer": ["columbia", "snake"]}
{"query": "What rivers are in states that border Texas ?", "prolog": "answer(A,(river(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))", "funql": "answer(river(loc_2(state(next_to_2(stateid('texas'))))))", "prolog_ans": "[arkansas,canadian,cimarron,gila,mississippi,neosho,ouachita,pearl,pecos,red,'rio grande','san juan','st. francis',washita,white]", "funql_ans": "[riverid(arkansas),riverid(canadian),riverid(cimarron),riverid(gila),riverid(mississippi),riverid(neosho),riverid(ouachita),riverid(pearl),riverid(pecos),riverid(red),riverid('rio grande'),riverid('san juan'),riverid('st. francis'),riverid(washita),riverid(white)]", "funql_answer_parsed": ["arkansas", "canadian", "cimarron", "gila", "mississippi", "neosho", "ouachita", "pearl", "pecos", "red", "rio grande", "san juan", "st. francis", "washita", "white"], "prolog_answer_parsed": ["arkansas", "canadian", "cimarron", "gila", "mississippi", "neosho", "ouachita", "pearl", "pecos", "red", "rio grande", "san juan", "st. francis", "washita", "white"], "qid": "geo880_615", "answer": ["arkansas", "canadian", "cimarron", "gila", "mississippi", "neosho", "ouachita", "pearl", "pecos", "red", "rio grande", "san juan", "st. francis", "washita", "white"]}
{"query": "What rivers are in Texas ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(river(loc_2(stateid('texas'))))", "prolog_ans": "[canadian,pecos,red,'rio grande',washita]", "funql_ans": "[riverid(canadian),riverid(pecos),riverid(red),riverid('rio grande'),riverid(washita)]", "funql_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "prolog_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "qid": "geo880_616", "answer": ["canadian", "pecos", "red", "rio grande", "washita"]}
{"query": "What rivers are in Utah ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(utah))))", "funql": "answer(river(loc_2(stateid('utah'))))", "prolog_ans": "[colorado,green,'san juan']", "funql_ans": "[riverid(colorado),riverid(green),riverid('san juan')]", "funql_answer_parsed": ["colorado", "green", "san juan"], "prolog_answer_parsed": ["colorado", "green", "san juan"], "qid": "geo880_617", "answer": ["colorado", "green", "san juan"]}
{"query": "What rivers are there in Texas ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(texas))))", "funql": "answer(river(loc_2(stateid('texas'))))", "prolog_ans": "[canadian,pecos,red,'rio grande',washita]", "funql_ans": "[riverid(canadian),riverid(pecos),riverid(red),riverid('rio grande'),riverid(washita)]", "funql_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "prolog_answer_parsed": ["canadian", "pecos", "red", "rio grande", "washita"], "qid": "geo880_618", "answer": ["canadian", "pecos", "red", "rio grande", "washita"]}
{"query": "What rivers do not run through Tennessee ?", "prolog": "answer(A,(river(A),not((traverse(A,B),const(B,stateid(tennessee))))))", "funql": "answer(exclude(river(all), traverse_2(stateid('tennessee'))))", "prolog_ans": "[allegheny,arkansas,bighorn,canadian,chattahoochee,cheyenne,cimarron,'clark fork',colorado,columbia,connecticut,dakota,delaware,gila,green,hudson,'little missouri',missouri,neosho,niobrara,'north platte',ohio,ouachita,pearl,pecos,potomac,powder,red,republican,'rio grande',roanoke,rock,'san juan','smoky hill',snake,'south platte','st. francis',tombigbee,wabash,washita,'wateree catawba',white,yellowstone]", "funql_ans": "[riverid(allegheny),riverid(arkansas),riverid(bighorn),riverid(canadian),riverid(chattahoochee),riverid(cheyenne),riverid(cimarron),riverid('clark fork'),riverid(colorado),riverid(columbia),riverid(connecticut),riverid(dakota),riverid(delaware),riverid(gila),riverid(green),riverid(hudson),riverid('little missouri'),riverid(missouri),riverid(neosho),riverid(niobrara),riverid('north platte'),riverid(ohio),riverid(ouachita),riverid(pearl),riverid(pecos),riverid(potomac),riverid(powder),riverid(red),riverid(republican),riverid('rio grande'),riverid(roanoke),riverid(rock),riverid('san juan'),riverid('smoky hill'),riverid(snake),riverid('south platte'),riverid('st. francis'),riverid(tombigbee),riverid(wabash),riverid(washita),riverid('wateree catawba'),riverid(white),riverid(yellowstone)]", "funql_answer_parsed": ["allegheny", "arkansas", "bighorn", "canadian", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "pecos", "potomac", "powder", "red", "republican", "rio grande", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tombigbee", "wabash", "washita", "wateree catawba", "white", "yellowstone"], "prolog_answer_parsed": ["allegheny", "arkansas", "bighorn", "canadian", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "pecos", "potomac", "powder", "red", "republican", "rio grande", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tombigbee", "wabash", "washita", "wateree catawba", "white", "yellowstone"], "qid": "geo880_619", "answer": ["allegheny", "arkansas", "bighorn", "canadian", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "pecos", "potomac", "powder", "red", "republican", "rio grande", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tombigbee", "wabash", "washita", "wateree catawba", "white", "yellowstone"]}
{"query": "What rivers flow though Colorado ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))", "funql": "answer(river(traverse_2(stateid('colorado'))))", "prolog_ans": "[arkansas,canadian,colorado,green,'north platte',republican,'rio grande','san juan','smoky hill','south platte']", "funql_ans": "[riverid(arkansas),riverid(canadian),riverid(colorado),riverid(green),riverid('north platte'),riverid(republican),riverid('rio grande'),riverid('san juan'),riverid('smoky hill'),riverid('south platte')]", "funql_answer_parsed": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"], "prolog_answer_parsed": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"], "qid": "geo880_620", "answer": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"]}
{"query": "What rivers flow through Missouri ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(missouri))))", "funql": "answer(river(traverse_2(stateid('missouri'))))", "prolog_ans": "[mississippi,missouri,'st. francis',white]", "funql_ans": "[riverid(mississippi),riverid(missouri),riverid('st. francis'),riverid(white)]", "funql_answer_parsed": ["mississippi", "missouri", "st. francis", "white"], "prolog_answer_parsed": ["mississippi", "missouri", "st. francis", "white"], "qid": "geo880_621", "answer": ["mississippi", "missouri", "st. francis", "white"]}
{"query": "What rivers flow through states that Alabama borders ?", "prolog": "answer(A,(river(A),traverse(A,B),state(B),const(C,stateid(alabama)),next_to(C,B)))", "funql": "answer(river(traverse_2(state(next_to_1(stateid('alabama'))))))", "prolog_ans": "[chattahoochee,cumberland,mississippi,tennessee,tombigbee]", "funql_ans": "[riverid(chattahoochee),riverid(cumberland),riverid(mississippi),riverid(tennessee),riverid(tombigbee)]", "funql_answer_parsed": ["chattahoochee", "cumberland", "mississippi", "tennessee", "tombigbee"], "prolog_answer_parsed": ["chattahoochee", "cumberland", "mississippi", "tennessee", "tombigbee"], "qid": "geo880_622", "answer": ["chattahoochee", "cumberland", "mississippi", "tennessee", "tombigbee"]}
{"query": "What rivers flow through states that border the state with the largest population ?", "prolog": "answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),largest(D,(state(C),population(C,D)))))", "funql": "answer(river(traverse_2(state(next_to_2(largest_one(population_1(state(all))))))))", "prolog_ans": "[colorado,columbia,gila,snake]", "funql_ans": "[riverid(colorado),riverid(columbia),riverid(gila),riverid(snake)]", "funql_answer_parsed": ["colorado", "columbia", "gila", "snake"], "prolog_answer_parsed": ["colorado", "columbia", "gila", "snake"], "qid": "geo880_623", "answer": ["colorado", "columbia", "gila", "snake"]}
{"query": "What rivers flow through the largest state ?", "prolog": "answer(A,(river(A),traverse(A,B),largest(B,state(B))))", "funql": "answer(river(traverse_2(largest(state(all)))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_624", "answer": []}
{"query": "What rivers flow through the state with the largest population ?", "prolog": "answer(A,(river(A),traverse(A,B),largest(C,(state(B),population(B,C)))))", "funql": "answer(river(traverse_2(largest_one(population_1(state(all))))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_625", "answer": ["colorado"]}
{"query": "What rivers run through Arizona ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(arizona))))", "funql": "answer(river(traverse_2(stateid('arizona'))))", "prolog_ans": "[colorado,gila]", "funql_ans": "[riverid(colorado),riverid(gila)]", "funql_answer_parsed": ["colorado", "gila"], "prolog_answer_parsed": ["colorado", "gila"], "qid": "geo880_626", "answer": ["colorado", "gila"]}
{"query": "What rivers run through Austin Texas ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,cityid(austin,tx))))", "funql": "answer(river(traverse_2(cityid('austin', 'tx'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_627", "answer": []}
{"query": "What rivers run through Colorado ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))", "funql": "answer(river(traverse_2(stateid('colorado'))))", "prolog_ans": "[arkansas,canadian,colorado,green,'north platte',republican,'rio grande','san juan','smoky hill','south platte']", "funql_ans": "[riverid(arkansas),riverid(canadian),riverid(colorado),riverid(green),riverid('north platte'),riverid(republican),riverid('rio grande'),riverid('san juan'),riverid('smoky hill'),riverid('south platte')]", "funql_answer_parsed": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"], "prolog_answer_parsed": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"], "qid": "geo880_628", "answer": ["arkansas", "canadian", "colorado", "green", "north platte", "republican", "rio grande", "san juan", "smoky hill", "south platte"]}
{"query": "What rivers run through Louisiana ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(louisiana))))", "funql": "answer(river(traverse_2(stateid('louisiana'))))", "prolog_ans": "[mississippi,ouachita,pearl,red]", "funql_ans": "[riverid(mississippi),riverid(ouachita),riverid(pearl),riverid(red)]", "funql_answer_parsed": ["mississippi", "ouachita", "pearl", "red"], "prolog_answer_parsed": ["mississippi", "ouachita", "pearl", "red"], "qid": "geo880_629", "answer": ["mississippi", "ouachita", "pearl", "red"]}
{"query": "What rivers run through Maine ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(maine))))", "funql": "answer(river(traverse_2(stateid('maine'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_630", "answer": []}
{"query": "What rivers run through New York ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid('new york'))))", "funql": "answer(river(traverse_2(stateid('new york'))))", "prolog_ans": "[allegheny,delaware,hudson]", "funql_ans": "[riverid(allegheny),riverid(delaware),riverid(hudson)]", "funql_answer_parsed": ["allegheny", "delaware", "hudson"], "prolog_answer_parsed": ["allegheny", "delaware", "hudson"], "qid": "geo880_631", "answer": ["allegheny", "delaware", "hudson"]}
{"query": "What rivers run through the state with the lowest point in the USA ?", "prolog": "answer(A,(river(A),traverse(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa))))))", "funql": "answer(river(traverse_2(state(loc_1(lowest(place(loc_2(countryid('usa')))))))))", "prolog_ans": "[allegheny,arkansas,bighorn,canadian,chattahoochee,cheyenne,cimarron,'clark fork',colorado,columbia,connecticut,cumberland,dakota,delaware,gila,green,hudson,'little missouri',mississippi,missouri,neosho,niobrara,'north platte',ohio,ouachita,pearl,pecos,potomac,powder,red,republican,'rio grande',roanoke,rock,'san juan','smoky hill',snake,'south platte','st. francis',tennessee,tombigbee,wabash,washita,'wateree catawba',white,yellowstone]", "funql_ans": "[riverid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["allegheny", "arkansas", "bighorn", "canadian", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "cumberland", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "mississippi", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "pecos", "potomac", "powder", "red", "republican", "rio grande", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tennessee", "tombigbee", "wabash", "washita", "wateree catawba", "white", "yellowstone"], "qid": "geo880_632", "answer": ["colorado"]}
{"query": "What rivers run through the states that border the state with the capital Atlanta ?", "prolog": "answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(atlanta,_))))", "funql": "answer(river(traverse_2(state(next_to_2(state(loc_1(capital(cityid('atlanta', _)))))))))", "prolog_ans": "[chattahoochee,cumberland,mississippi,roanoke,tennessee,tombigbee,'wateree catawba']", "funql_ans": "[riverid(chattahoochee),riverid(cumberland),riverid(mississippi),riverid(roanoke),riverid(tennessee),riverid(tombigbee),riverid('wateree catawba')]", "funql_answer_parsed": ["chattahoochee", "cumberland", "mississippi", "roanoke", "tennessee", "tombigbee", "wateree catawba"], "prolog_answer_parsed": ["chattahoochee", "cumberland", "mississippi", "roanoke", "tennessee", "tombigbee", "wateree catawba"], "qid": "geo880_633", "answer": ["chattahoochee", "cumberland", "mississippi", "roanoke", "tennessee", "tombigbee", "wateree catawba"]}
{"query": "What rivers run through West Virginia ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid('west virginia'))))", "funql": "answer(river(traverse_2(stateid('west virginia'))))", "prolog_ans": "[ohio,potomac]", "funql_ans": "[riverid(ohio),riverid(potomac)]", "funql_answer_parsed": ["ohio", "potomac"], "prolog_answer_parsed": ["ohio", "potomac"], "qid": "geo880_634", "answer": ["ohio", "potomac"]}
{"query": "What rivers traverses the state which borders the most states ?", "prolog": "answer(A,(river(A),traverse(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))", "funql": "answer(river(traverse_2(most(state(next_to_2(state(all)))))))", "prolog_ans": "[mississippi,missouri,'st. francis',white]", "funql_ans": "[riverid(mississippi),riverid(missouri),riverid('st. francis'),riverid(white)]", "funql_answer_parsed": ["mississippi", "missouri", "st. francis", "white"], "prolog_answer_parsed": ["mississippi", "missouri", "st. francis", "white"], "qid": "geo880_635", "answer": ["mississippi", "missouri", "st. francis", "white"]}
{"query": "What state bordering Nevada has the largest population ?", "prolog": "answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(nevada)),population(A,B))))", "funql": "answer(largest_one(population_1(state(next_to_2(stateid('nevada'))))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_636", "answer": ["california"]}
{"query": "What state borders Michigan ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))", "funql": "answer(state(next_to_2(stateid('michigan'))))", "prolog_ans": "[indiana,ohio,wisconsin]", "funql_ans": "[stateid(indiana),stateid(ohio),stateid(wisconsin)]", "funql_answer_parsed": ["indiana", "ohio", "wisconsin"], "prolog_answer_parsed": ["indiana", "ohio", "wisconsin"], "qid": "geo880_637", "answer": ["indiana", "ohio", "wisconsin"]}
{"query": "What state borders most other states ?", "prolog": "answer(A,most(A,B,(state(A),next_to(A,B),state(B))))", "funql": "answer(most(state(next_to_2(state(all)))))", "prolog_ans": "[missouri]", "funql_ans": "[stateid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_638", "answer": ["missouri"]}
{"query": "What state borders New York ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid('new york'))))", "funql": "answer(state(next_to_2(stateid('new york'))))", "prolog_ans": "[connecticut,massachusetts,'new jersey',pennsylvania,vermont]", "funql_ans": "[stateid(connecticut),stateid(massachusetts),stateid('new jersey'),stateid(pennsylvania),stateid(vermont)]", "funql_answer_parsed": ["connecticut", "massachusetts", "new jersey", "pennsylvania", "vermont"], "prolog_answer_parsed": ["connecticut", "massachusetts", "new jersey", "pennsylvania", "vermont"], "qid": "geo880_639", "answer": ["connecticut", "massachusetts", "new jersey", "pennsylvania", "vermont"]}
{"query": "What state borders the least states ?", "prolog": "answer(A,fewest(A,B,(state(A),next_to(A,B),state(B))))", "funql": "answer(fewest(state(next_to_2(state(all)))))", "prolog_ans": "[maine]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["maine"], "qid": "geo880_640", "answer": ["alaska"]}
{"query": "What state borders the least states excluding Alaska and excluding Hawaii ?", "prolog": "answer(A,fewest(A,B,(state(A),next_to(A,B),state(B),not((const(A,stateid(alaska)))),not((const(A,stateid(hawaii)))))))", "funql": "answer(fewest(state(next_to_2(exclude(exclude(state(all), stateid('alaska')), stateid('hawaii'))))))", "prolog_ans": "[maine]", "funql_ans": "[stateid(maine)]", "funql_answer_parsed": ["maine"], "prolog_answer_parsed": ["maine"], "qid": "geo880_641", "answer": ["maine"]}
{"query": "What state borders the most states ?", "prolog": "answer(A,most(A,B,(state(A),next_to(A,B),state(B))))", "funql": "answer(most(state(next_to_2(state(all)))))", "prolog_ans": "[missouri]", "funql_ans": "[stateid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_642", "answer": ["missouri"]}
{"query": "What state borders the state with the smallest population ?", "prolog": "answer(A,(state(A),next_to(A,B),smallest(C,(state(B),population(B,C)))))", "funql": "answer(state(next_to_2(smallest_one(population_1(state(all))))))", "prolog_ans": "[]", "funql_ans": "[stateid(idaho),stateid('north dakota'),stateid('south dakota'),stateid(wyoming)]", "funql_answer_parsed": ["idaho", "north dakota", "south dakota", "wyoming"], "prolog_answer_parsed": [], "qid": "geo880_643", "answer": []}
{"query": "What state contains the highest point in the US ?", "prolog": "answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_644", "answer": ["alaska"]}
{"query": "What state contains the highest point of those the Colorado river traverses ?", "prolog": "answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),state(C),const(D,riverid(colorado)),river(D),traverse(D,C)))))", "funql": "answer(state(loc_1(highest(place(loc_2(state(traverse_1(river(riverid('colorado'))))))))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_645", "answer": ["california"]}
{"query": "What state has highest elevation ?", "prolog": "answer(A,(state(A),loc(B,A),highest(B,place(B))))", "funql": "answer(state(loc_1(highest(place(all)))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_646", "answer": ["alaska"]}
{"query": "What state has no rivers ?", "prolog": "answer(A,(state(A),not((loc(B,A),river(B)))))", "funql": "answer(exclude(state(all), loc_1(river(all))))", "prolog_ans": "[alaska,hawaii,maine,'rhode island']", "funql_ans": "[stateid(alaska),stateid(hawaii),stateid(maine),stateid('rhode island')]", "funql_answer_parsed": ["alaska", "hawaii", "maine", "rhode island"], "prolog_answer_parsed": ["alaska", "hawaii", "maine", "rhode island"], "qid": "geo880_647", "answer": ["alaska", "hawaii", "maine", "rhode island"]}
{"query": "What state has the capital Salem ?", "prolog": "answer(A,(state(A),loc(B,A),capital(B),const(B,cityid(salem,_))))", "funql": "answer(state(loc_1(capital(cityid('salem', _)))))", "prolog_ans": "[oregon]", "funql_ans": "[stateid(oregon)]", "funql_answer_parsed": ["oregon"], "prolog_answer_parsed": ["oregon"], "qid": "geo880_648", "answer": ["oregon"]}
{"query": "What state has the city Flint ?", "prolog": "answer(A,(state(A),loc(B,A),city(B),const(B,cityid(flint,_))))", "funql": "answer(state(loc_1(city(cityid('flint', _)))))", "prolog_ans": "[michigan]", "funql_ans": "[stateid(michigan)]", "funql_answer_parsed": ["michigan"], "prolog_answer_parsed": ["michigan"], "qid": "geo880_649", "answer": ["michigan"]}
{"query": "What state has the city with the largest population ?", "prolog": "answer(A,(state(A),loc(B,A),largest(C,(city(B),population(B,C)))))", "funql": "answer(state(loc_1(largest_one(population_1(city(all))))))", "prolog_ans": "['new york']", "funql_ans": "[stateid('new york')]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_650", "answer": ["new york"]}
{"query": "What state has the city with the most population ?", "prolog": "answer(A,(state(A),loc(B,A),largest(C,(city(B),population(B,C)))))", "funql": "answer(state(loc_1(largest_one(population_1(city(all))))))", "prolog_ans": "['new york']", "funql_ans": "[stateid('new york')]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_651", "answer": ["new york"]}
{"query": "What state has the greatest population density ?", "prolog": "answer(A,largest(B,(state(A),density(A,B))))", "funql": "answer(largest_one(density_1(state(all))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_652", "answer": ["new jersey"]}
{"query": "What state has the highest elevation ?", "prolog": "answer(A,(state(A),loc(B,A),highest(B,(place(B)))))", "funql": "answer(state(loc_1(highest(place(all)))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_653", "answer": ["alaska"]}
{"query": "What state has the highest population ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_654", "answer": ["california"]}
{"query": "What state has the highest population density ?", "prolog": "answer(A,largest(B,(state(A),density(A,B))))", "funql": "answer(largest_one(density_1(state(all))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_655", "answer": ["new jersey"]}
{"query": "What state has the largest area ?", "prolog": "answer(A,largest(B,(state(A),area(A,B))))", "funql": "answer(largest_one(area_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_656", "answer": ["alaska"]}
{"query": "What state has the largest capital ?", "prolog": "answer(A,(state(A),loc(B,A),largest(B,capital(B))))", "funql": "answer(state(loc_1(largest(capital(all)))))", "prolog_ans": "[arizona]", "funql_ans": "[stateid(arizona)]", "funql_answer_parsed": ["arizona"], "prolog_answer_parsed": ["arizona"], "qid": "geo880_657", "answer": ["arizona"]}
{"query": "What state has the largest city ?", "prolog": "answer(A,(state(A),loc(B,A),largest(B,(city(B)))))", "funql": "answer(state(loc_1(largest(city(all)))))", "prolog_ans": "['new york']", "funql_ans": "[stateid('new york')]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_658", "answer": ["new york"]}
{"query": "What state has the largest population ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_659", "answer": ["california"]}
{"query": "What state has the largest population density ?", "prolog": "answer(A,largest(B,(state(A),density(A,B))))", "funql": "answer(largest_one(density_1(state(all))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_660", "answer": ["new jersey"]}
{"query": "What state has the largest urban population ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_661", "answer": ["california"]}
{"query": "What state has the least population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_662", "answer": ["alaska"]}
{"query": "What state has the longest river ?", "prolog": "answer(A,(state(A),loc(B,A),longest(B,river(B))))", "funql": "answer(state(loc_1(longest(river(all)))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_663", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "What state has the lowest population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_664", "answer": ["alaska"]}
{"query": "What state has the most cities ?", "prolog": "answer(A,most(A,B,(state(A),loc(B,A),city(B))))", "funql": "answer(most(state(loc_1(city(all)))))", "prolog_ans": "[california]", "funql_ans": "[cityid(birmingham,al)]", "funql_answer_parsed": ["birmingham"], "prolog_answer_parsed": ["california"], "qid": "geo880_665", "answer": ["california"]}
{"query": "What state has the most major cities ?", "prolog": "answer(A,most(A,B,(state(A),loc(B,A),major(B),city(B))))", "funql": "answer(most(state(loc_1(major(city(all))))))", "prolog_ans": "[california]", "funql_ans": "[cityid(birmingham,al)]", "funql_answer_parsed": ["birmingham"], "prolog_answer_parsed": ["california"], "qid": "geo880_666", "answer": ["california"]}
{"query": "What state has the most major rivers running through it ?", "prolog": "answer(A,most(A,B,(state(A),major(B),river(B),traverse(B,A))))", "funql": "answer(most(state(traverse_1(major(river(all))))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_667", "answer": ["colorado"]}
{"query": "What state has the most people ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_668", "answer": ["california"]}
{"query": "What state has the most rivers ?", "prolog": "answer(A,most(A,B,(state(A),loc(B,A),river(B))))", "funql": "answer(most(state(loc_1(river(all)))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_669", "answer": ["colorado"]}
{"query": "What state has the most rivers running through it ?", "prolog": "answer(A,most(A,B,(state(A),river(B),traverse(B,A))))", "funql": "answer(most(state(traverse_1(river(all)))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_670", "answer": ["colorado"]}
{"query": "What state has the shortest river ?", "prolog": "answer(A,(state(A),loc(B,A),shortest(B,river(B))))", "funql": "answer(state(loc_1(shortest(river(all)))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(delaware),stateid('new jersey'),stateid('new york'),stateid(pennsylvania)]", "funql_answer_parsed": ["delaware", "new jersey", "new york", "pennsylvania"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_671", "answer": ["delaware", "new jersey", "new york", "pennsylvania"]}
{"query": "What state has the smallest area ?", "prolog": "answer(A,smallest(B,(state(A),area(A,B))))", "funql": "answer(smallest_one(area_1(state(all))))", "prolog_ans": "['district of columbia']", "funql_ans": "[stateid('district of columbia')]", "funql_answer_parsed": ["district of columbia"], "prolog_answer_parsed": ["district of columbia"], "qid": "geo880_672", "answer": ["district of columbia"]}
{"query": "What state has the smallest capital ?", "prolog": "answer(A,(state(A),loc(B,A),smallest(B,capital(B))))", "funql": "answer(state(loc_1(smallest(capital(all)))))", "prolog_ans": "['west virginia']", "funql_ans": "[stateid('west virginia')]", "funql_answer_parsed": ["west virginia"], "prolog_answer_parsed": ["west virginia"], "qid": "geo880_673", "answer": ["west virginia"]}
{"query": "What state has the smallest population ?", "prolog": "answer(A,smallest(B,(state(A),population(A,B))))", "funql": "answer(smallest_one(population_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_674", "answer": ["alaska"]}
{"query": "What state has the smallest population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_675", "answer": ["alaska"]}
{"query": "What state has the smallest urban population ?", "prolog": "answer(A,smallest(B,(state(A),population(A,B))))", "funql": "answer(smallest_one(population_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_676", "answer": ["alaska"]}
{"query": "What state has the sparsest population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_677", "answer": ["alaska"]}
{"query": "What state is Austin in ?", "prolog": "answer(A,(state(A),const(B,cityid(austin,_)),loc(B,A)))", "funql": "answer(state(loc_1(cityid('austin', _))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_678", "answer": ["texas"]}
{"query": "What state is Austin the capital of ?", "prolog": "answer(A,(state(A),const(B,cityid(austin,_)),capital(B),loc(B,A)))", "funql": "answer(state(loc_1(capital(cityid('austin', _)))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_679", "answer": ["texas"]}
{"query": "What state is Boston in ?", "prolog": "answer(A,(state(A),const(B,cityid(boston,_)),loc(B,A)))", "funql": "answer(state(loc_1(cityid('boston', _))))", "prolog_ans": "[massachusetts]", "funql_ans": "[stateid(massachusetts)]", "funql_answer_parsed": ["massachusetts"], "prolog_answer_parsed": ["massachusetts"], "qid": "geo880_680", "answer": ["massachusetts"]}
{"query": "What state is Columbus the capital of ?", "prolog": "answer(A,(state(A),const(B,cityid(columbus,_)),capital(B),loc(B,A)))", "funql": "answer(state(loc_1(capital(cityid('columbus', _)))))", "prolog_ans": "[ohio]", "funql_ans": "[stateid(ohio)]", "funql_answer_parsed": ["ohio"], "prolog_answer_parsed": ["ohio"], "qid": "geo880_681", "answer": ["ohio"]}
{"query": "What state is Dallas in ?", "prolog": "answer(A,(state(A),const(B,cityid(dallas,_)),loc(B,A)))", "funql": "answer(state(loc_1(cityid('dallas', _))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_682", "answer": ["texas"]}
{"query": "What state is Des Moines located in ?", "prolog": "answer(A,(state(A),const(B,cityid('des moines',_)),loc(B,A)))", "funql": "answer(state(loc_1(cityid('des moines', _))))", "prolog_ans": "[iowa]", "funql_ans": "[stateid(iowa)]", "funql_answer_parsed": ["iowa"], "prolog_answer_parsed": ["iowa"], "qid": "geo880_683", "answer": ["iowa"]}
{"query": "What state is Miami in ?", "prolog": "answer(A,(state(A),const(B,cityid(miami,_)),loc(B,A)))", "funql": "answer(state(loc_1(cityid('miami', _))))", "prolog_ans": "[florida]", "funql_ans": "[stateid(florida)]", "funql_answer_parsed": ["florida"], "prolog_answer_parsed": ["florida"], "qid": "geo880_684", "answer": ["florida"]}
{"query": "What state is Pittsburgh in ?", "prolog": "answer(A,(state(A),const(B,cityid(pittsburgh,_)),loc(B,A)))", "funql": "answer(state(loc_1(cityid('pittsburgh', _))))", "prolog_ans": "[pennsylvania]", "funql_ans": "[stateid(pennsylvania)]", "funql_answer_parsed": ["pennsylvania"], "prolog_answer_parsed": ["pennsylvania"], "qid": "geo880_685", "answer": ["pennsylvania"]}
{"query": "What state is the biggest ?", "prolog": "answer(A,largest(A,state(A)))", "funql": "answer(largest(state(all)))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_686", "answer": ["alaska"]}
{"query": "What state is the largest in population ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_687", "answer": ["california"]}
{"query": "What state is the state with the most rivers ?", "prolog": "answer(A,(state(A),most(A,B,(state(A),loc(B,A),river(B)))))", "funql": "answer(state(most(state(loc_1(river(all))))))", "prolog_ans": "[colorado]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["colorado"], "qid": "geo880_688", "answer": ["colorado"]}
{"query": "What state that borders Texas has the highest population ?", "prolog": "answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(texas)),population(A,B))))", "funql": "answer(largest_one(population_1(state(next_to_2(stateid('texas'))))))", "prolog_ans": "[louisiana]", "funql_ans": "[stateid(louisiana)]", "funql_answer_parsed": ["louisiana"], "prolog_answer_parsed": ["louisiana"], "qid": "geo880_689", "answer": ["louisiana"]}
{"query": "What state that borders Texas is the largest ?", "prolog": "answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))", "funql": "answer(largest(state(next_to_2(stateid('texas')))))", "prolog_ans": "['new mexico']", "funql_ans": "[stateid('new mexico')]", "funql_answer_parsed": ["new mexico"], "prolog_answer_parsed": ["new mexico"], "qid": "geo880_690", "answer": ["new mexico"]}
{"query": "What state which the Mississippi runs through has the largest population ?", "prolog": "answer(A,largest(B,(state(A),const(C,riverid(mississippi)),traverse(C,A),population(A,B))))", "funql": "answer(largest_one(population_1(state(traverse_1(riverid('mississippi'))))))", "prolog_ans": "[illinois]", "funql_ans": "[stateid(illinois)]", "funql_answer_parsed": ["illinois"], "prolog_answer_parsed": ["illinois"], "qid": "geo880_691", "answer": ["illinois"]}
{"query": "What states are next to Arizona ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))", "funql": "answer(state(next_to_2(stateid('arizona'))))", "prolog_ans": "[california,colorado,nevada,'new mexico',utah]", "funql_ans": "[stateid(california),stateid(colorado),stateid(nevada),stateid('new mexico'),stateid(utah)]", "funql_answer_parsed": ["california", "colorado", "nevada", "new mexico", "utah"], "prolog_answer_parsed": ["california", "colorado", "nevada", "new mexico", "utah"], "qid": "geo880_692", "answer": ["california", "colorado", "nevada", "new mexico", "utah"]}
{"query": "What states are next to Texas ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))", "funql": "answer(state(next_to_2(stateid('texas'))))", "prolog_ans": "[arkansas,louisiana,'new mexico',oklahoma]", "funql_ans": "[stateid(arkansas),stateid(louisiana),stateid('new mexico'),stateid(oklahoma)]", "funql_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma"], "prolog_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma"], "qid": "geo880_693", "answer": ["arkansas", "louisiana", "new mexico", "oklahoma"]}
{"query": "What states are next to the Mississippi ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))", "funql": "answer(state(next_to_2(stateid('mississippi'))))", "prolog_ans": "[alabama,arkansas,louisiana,tennessee]", "funql_ans": "[stateid(alabama),stateid(arkansas),stateid(louisiana),stateid(tennessee)]", "funql_answer_parsed": ["alabama", "arkansas", "louisiana", "tennessee"], "prolog_answer_parsed": ["alabama", "arkansas", "louisiana", "tennessee"], "qid": "geo880_694", "answer": ["alabama", "arkansas", "louisiana", "tennessee"]}
{"query": "What states border Alaska ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(alaska))))", "funql": "answer(state(next_to_2(stateid('alaska'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_695", "answer": []}
{"query": "What states border Arkansas ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(arkansas))))", "funql": "answer(state(next_to_2(stateid('arkansas'))))", "prolog_ans": "[louisiana,mississippi,missouri,oklahoma,tennessee,texas]", "funql_ans": "[stateid(louisiana),stateid(mississippi),stateid(missouri),stateid(oklahoma),stateid(tennessee),stateid(texas)]", "funql_answer_parsed": ["louisiana", "mississippi", "missouri", "oklahoma", "tennessee", "texas"], "prolog_answer_parsed": ["louisiana", "mississippi", "missouri", "oklahoma", "tennessee", "texas"], "qid": "geo880_696", "answer": ["louisiana", "mississippi", "missouri", "oklahoma", "tennessee", "texas"]}
{"query": "What states border Delaware ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(delaware))))", "funql": "answer(state(next_to_2(stateid('delaware'))))", "prolog_ans": "[maryland,'new jersey',pennsylvania]", "funql_ans": "[stateid(maryland),stateid('new jersey'),stateid(pennsylvania)]", "funql_answer_parsed": ["maryland", "new jersey", "pennsylvania"], "prolog_answer_parsed": ["maryland", "new jersey", "pennsylvania"], "qid": "geo880_697", "answer": ["maryland", "new jersey", "pennsylvania"]}
{"query": "What states border Florida ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))", "funql": "answer(state(next_to_2(stateid('florida'))))", "prolog_ans": "[alabama,georgia]", "funql_ans": "[stateid(alabama),stateid(georgia)]", "funql_answer_parsed": ["alabama", "georgia"], "prolog_answer_parsed": ["alabama", "georgia"], "qid": "geo880_698", "answer": ["alabama", "georgia"]}
{"query": "What states border Georgia ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(georgia))))", "funql": "answer(state(next_to_2(stateid('georgia'))))", "prolog_ans": "[alabama,florida,'north carolina','south carolina',tennessee]", "funql_ans": "[stateid(alabama),stateid(florida),stateid('north carolina'),stateid('south carolina'),stateid(tennessee)]", "funql_answer_parsed": ["alabama", "florida", "north carolina", "south carolina", "tennessee"], "prolog_answer_parsed": ["alabama", "florida", "north carolina", "south carolina", "tennessee"], "qid": "geo880_699", "answer": ["alabama", "florida", "north carolina", "south carolina", "tennessee"]}
{"query": "What states border Hawaii ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))", "funql": "answer(state(next_to_2(stateid('hawaii'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_700", "answer": []}
{"query": "What states border Indiana ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(indiana))))", "funql": "answer(state(next_to_2(stateid('indiana'))))", "prolog_ans": "[illinois,kentucky,michigan,ohio]", "funql_ans": "[stateid(illinois),stateid(kentucky),stateid(michigan),stateid(ohio)]", "funql_answer_parsed": ["illinois", "kentucky", "michigan", "ohio"], "prolog_answer_parsed": ["illinois", "kentucky", "michigan", "ohio"], "qid": "geo880_701", "answer": ["illinois", "kentucky", "michigan", "ohio"]}
{"query": "What states border Kentucky ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))", "funql": "answer(state(next_to_2(stateid('kentucky'))))", "prolog_ans": "[illinois,indiana,missouri,ohio,tennessee,virginia,'west virginia']", "funql_ans": "[stateid(illinois),stateid(indiana),stateid(missouri),stateid(ohio),stateid(tennessee),stateid(virginia),stateid('west virginia')]", "funql_answer_parsed": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"], "prolog_answer_parsed": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"], "qid": "geo880_702", "answer": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"]}
{"query": "What states border Michigan ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))", "funql": "answer(state(next_to_2(stateid('michigan'))))", "prolog_ans": "[indiana,ohio,wisconsin]", "funql_ans": "[stateid(indiana),stateid(ohio),stateid(wisconsin)]", "funql_answer_parsed": ["indiana", "ohio", "wisconsin"], "prolog_answer_parsed": ["indiana", "ohio", "wisconsin"], "qid": "geo880_703", "answer": ["indiana", "ohio", "wisconsin"]}
{"query": "What states border Missouri ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(missouri))))", "funql": "answer(state(next_to_2(stateid('missouri'))))", "prolog_ans": "[arkansas,illinois,iowa,kansas,kentucky,nebraska,oklahoma,tennessee]", "funql_ans": "[stateid(arkansas),stateid(illinois),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(nebraska),stateid(oklahoma),stateid(tennessee)]", "funql_answer_parsed": ["arkansas", "illinois", "iowa", "kansas", "kentucky", "nebraska", "oklahoma", "tennessee"], "prolog_answer_parsed": ["arkansas", "illinois", "iowa", "kansas", "kentucky", "nebraska", "oklahoma", "tennessee"], "qid": "geo880_704", "answer": ["arkansas", "illinois", "iowa", "kansas", "kentucky", "nebraska", "oklahoma", "tennessee"]}
{"query": "What states border Montana ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(montana))))", "funql": "answer(state(next_to_2(stateid('montana'))))", "prolog_ans": "[idaho,'north dakota','south dakota',wyoming]", "funql_ans": "[stateid(idaho),stateid('north dakota'),stateid('south dakota'),stateid(wyoming)]", "funql_answer_parsed": ["idaho", "north dakota", "south dakota", "wyoming"], "prolog_answer_parsed": ["idaho", "north dakota", "south dakota", "wyoming"], "qid": "geo880_705", "answer": ["idaho", "north dakota", "south dakota", "wyoming"]}
{"query": "What states border New Hampshire ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid('new hampshire'))))", "funql": "answer(state(next_to_2(stateid('new hampshire'))))", "prolog_ans": "[maine,massachusetts,vermont]", "funql_ans": "[stateid(maine),stateid(massachusetts),stateid(vermont)]", "funql_answer_parsed": ["maine", "massachusetts", "vermont"], "prolog_answer_parsed": ["maine", "massachusetts", "vermont"], "qid": "geo880_706", "answer": ["maine", "massachusetts", "vermont"]}
{"query": "What states border New Jersey ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid('new jersey'))))", "funql": "answer(state(next_to_2(stateid('new jersey'))))", "prolog_ans": "[delaware,'new york',pennsylvania]", "funql_ans": "[stateid(delaware),stateid('new york'),stateid(pennsylvania)]", "funql_answer_parsed": ["delaware", "new york", "pennsylvania"], "prolog_answer_parsed": ["delaware", "new york", "pennsylvania"], "qid": "geo880_707", "answer": ["delaware", "new york", "pennsylvania"]}
{"query": "What states border Ohio ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))", "funql": "answer(state(next_to_2(stateid('ohio'))))", "prolog_ans": "[indiana,kentucky,michigan,pennsylvania,'west virginia']", "funql_ans": "[stateid(indiana),stateid(kentucky),stateid(michigan),stateid(pennsylvania),stateid('west virginia')]", "funql_answer_parsed": ["indiana", "kentucky", "michigan", "pennsylvania", "west virginia"], "prolog_answer_parsed": ["indiana", "kentucky", "michigan", "pennsylvania", "west virginia"], "qid": "geo880_708", "answer": ["indiana", "kentucky", "michigan", "pennsylvania", "west virginia"]}
{"query": "What states border Rhode Island ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid('rhode island'))))", "funql": "answer(state(next_to_2(stateid('rhode island'))))", "prolog_ans": "[connecticut,massachusetts]", "funql_ans": "[stateid(connecticut),stateid(massachusetts)]", "funql_answer_parsed": ["connecticut", "massachusetts"], "prolog_answer_parsed": ["connecticut", "massachusetts"], "qid": "geo880_709", "answer": ["connecticut", "massachusetts"]}
{"query": "What states border states that border Colorado ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(colorado))))", "funql": "answer(state(next_to_2(state(next_to_2(stateid('colorado'))))))", "prolog_ans": "[arizona,arkansas,california,colorado,idaho,iowa,kansas,missouri,montana,nebraska,nevada,'new mexico',oklahoma,'south dakota',texas,utah,wyoming]", "funql_ans": "[stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid(idaho),stateid(iowa),stateid(kansas),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new mexico'),stateid(oklahoma),stateid('south dakota'),stateid(texas),stateid(utah),stateid(wyoming)]", "funql_answer_parsed": ["arizona", "arkansas", "california", "colorado", "idaho", "iowa", "kansas", "missouri", "montana", "nebraska", "nevada", "new mexico", "oklahoma", "south dakota", "texas", "utah", "wyoming"], "prolog_answer_parsed": ["arizona", "arkansas", "california", "colorado", "idaho", "iowa", "kansas", "missouri", "montana", "nebraska", "nevada", "new mexico", "oklahoma", "south dakota", "texas", "utah", "wyoming"], "qid": "geo880_710", "answer": ["arizona", "arkansas", "california", "colorado", "idaho", "iowa", "kansas", "missouri", "montana", "nebraska", "nevada", "new mexico", "oklahoma", "south dakota", "texas", "utah", "wyoming"]}
{"query": "What states border states that border Mississippi ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))", "funql": "answer(state(next_to_2(state(next_to_2(stateid('mississippi'))))))", "prolog_ans": "[alabama,arkansas,florida,georgia,kentucky,louisiana,mississippi,missouri,'north carolina',oklahoma,tennessee,texas,virginia]", "funql_ans": "[stateid(alabama),stateid(arkansas),stateid(florida),stateid(georgia),stateid(kentucky),stateid(louisiana),stateid(mississippi),stateid(missouri),stateid('north carolina'),stateid(oklahoma),stateid(tennessee),stateid(texas),stateid(virginia)]", "funql_answer_parsed": ["alabama", "arkansas", "florida", "georgia", "kentucky", "louisiana", "mississippi", "missouri", "north carolina", "oklahoma", "tennessee", "texas", "virginia"], "prolog_answer_parsed": ["alabama", "arkansas", "florida", "georgia", "kentucky", "louisiana", "mississippi", "missouri", "north carolina", "oklahoma", "tennessee", "texas", "virginia"], "qid": "geo880_711", "answer": ["alabama", "arkansas", "florida", "georgia", "kentucky", "louisiana", "mississippi", "missouri", "north carolina", "oklahoma", "tennessee", "texas", "virginia"]}
{"query": "What states border states that border states that border Florida ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(florida))))", "funql": "answer(state(next_to_2(state(next_to_2(state(next_to_2(stateid('florida'))))))))", "prolog_ans": "[alabama,arkansas,florida,georgia,kentucky,louisiana,mississippi,missouri,'north carolina','south carolina',tennessee,virginia]", "funql_ans": "[stateid(alabama),stateid(arkansas),stateid(florida),stateid(georgia),stateid(kentucky),stateid(louisiana),stateid(mississippi),stateid(missouri),stateid('north carolina'),stateid('south carolina'),stateid(tennessee),stateid(virginia)]", "funql_answer_parsed": ["alabama", "arkansas", "florida", "georgia", "kentucky", "louisiana", "mississippi", "missouri", "north carolina", "south carolina", "tennessee", "virginia"], "prolog_answer_parsed": ["alabama", "arkansas", "florida", "georgia", "kentucky", "louisiana", "mississippi", "missouri", "north carolina", "south carolina", "tennessee", "virginia"], "qid": "geo880_712", "answer": ["alabama", "arkansas", "florida", "georgia", "kentucky", "louisiana", "mississippi", "missouri", "north carolina", "south carolina", "tennessee", "virginia"]}
{"query": "What states border states that border states that border states that border Texas ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E),const(E,stateid(texas))))", "funql": "answer(state(next_to_2(state(next_to_2(state(next_to_2(state(next_to_2(stateid('texas'))))))))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,'district of columbia',florida,georgia,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maryland,minnesota,mississippi,missouri,montana,nebraska,nevada,'new mexico','north carolina',ohio,oklahoma,oregon,'south carolina','south dakota',tennessee,texas,utah,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(alabama),stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid('district of columbia'),stateid(florida),stateid(georgia),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(maryland),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new mexico'),stateid('north carolina'),stateid(ohio),stateid(oklahoma),stateid(oregon),stateid('south carolina'),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(virginia),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new mexico", "north carolina", "ohio", "oklahoma", "oregon", "south carolina", "south dakota", "tennessee", "texas", "utah", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new mexico", "north carolina", "ohio", "oklahoma", "oregon", "south carolina", "south dakota", "tennessee", "texas", "utah", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_713", "answer": ["alabama", "arizona", "arkansas", "california", "colorado", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new mexico", "north carolina", "ohio", "oklahoma", "oregon", "south carolina", "south dakota", "tennessee", "texas", "utah", "virginia", "washington", "west virginia", "wisconsin", "wyoming"]}
{"query": "What states border states that border the state with the largest population ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),largest(D,(state(C),population(C,D)))))", "funql": "answer(state(next_to_2(state(next_to_2(largest_one(population_1(state(all))))))))", "prolog_ans": "[arizona,california,colorado,idaho,nevada,'new mexico',oregon,utah,washington]", "funql_ans": "[stateid(arizona),stateid(california),stateid(colorado),stateid(idaho),stateid(nevada),stateid('new mexico'),stateid(oregon),stateid(utah),stateid(washington)]", "funql_answer_parsed": ["arizona", "california", "colorado", "idaho", "nevada", "new mexico", "oregon", "utah", "washington"], "prolog_answer_parsed": ["arizona", "california", "colorado", "idaho", "nevada", "new mexico", "oregon", "utah", "washington"], "qid": "geo880_714", "answer": ["arizona", "california", "colorado", "idaho", "nevada", "new mexico", "oregon", "utah", "washington"]}
{"query": "What states border states that the Mississippi runs through ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))", "funql": "answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))", "prolog_ans": "[alabama,arkansas,georgia,illinois,indiana,iowa,kansas,kentucky,louisiana,michigan,minnesota,mississippi,missouri,nebraska,'north carolina','north dakota',ohio,oklahoma,'south dakota',tennessee,texas,virginia,'west virginia',wisconsin]", "funql_ans": "[stateid(alabama),stateid(arkansas),stateid(georgia),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(nebraska),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(virginia),stateid('west virginia'),stateid(wisconsin)]", "funql_answer_parsed": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"], "prolog_answer_parsed": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"], "qid": "geo880_715", "answer": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"]}
{"query": "What states border states that the Ohio runs through ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(ohio)),traverse(C,B)))", "funql": "answer(state(next_to_2(state(traverse_1(riverid('ohio'))))))", "prolog_ans": "[delaware,illinois,indiana,iowa,kentucky,maryland,michigan,missouri,'new jersey','new york',ohio,pennsylvania,tennessee,virginia,'west virginia',wisconsin]", "funql_ans": "[stateid(delaware),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kentucky),stateid(maryland),stateid(michigan),stateid(missouri),stateid('new jersey'),stateid('new york'),stateid(ohio),stateid(pennsylvania),stateid(tennessee),stateid(virginia),stateid('west virginia'),stateid(wisconsin)]", "funql_answer_parsed": ["delaware", "illinois", "indiana", "iowa", "kentucky", "maryland", "michigan", "missouri", "new jersey", "new york", "ohio", "pennsylvania", "tennessee", "virginia", "west virginia", "wisconsin"], "prolog_answer_parsed": ["delaware", "illinois", "indiana", "iowa", "kentucky", "maryland", "michigan", "missouri", "new jersey", "new york", "ohio", "pennsylvania", "tennessee", "virginia", "west virginia", "wisconsin"], "qid": "geo880_716", "answer": ["delaware", "illinois", "indiana", "iowa", "kentucky", "maryland", "michigan", "missouri", "new jersey", "new york", "ohio", "pennsylvania", "tennessee", "virginia", "west virginia", "wisconsin"]}
{"query": "What states border states which the Mississippi runs through ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))", "funql": "answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))", "prolog_ans": "[alabama,arkansas,georgia,illinois,indiana,iowa,kansas,kentucky,louisiana,michigan,minnesota,mississippi,missouri,nebraska,'north carolina','north dakota',ohio,oklahoma,'south dakota',tennessee,texas,virginia,'west virginia',wisconsin]", "funql_ans": "[stateid(alabama),stateid(arkansas),stateid(georgia),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(nebraska),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(virginia),stateid('west virginia'),stateid(wisconsin)]", "funql_answer_parsed": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"], "prolog_answer_parsed": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"], "qid": "geo880_717", "answer": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"]}
{"query": "What states border Texas ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))", "funql": "answer(state(next_to_2(stateid('texas'))))", "prolog_ans": "[arkansas,louisiana,'new mexico',oklahoma]", "funql_ans": "[stateid(arkansas),stateid(louisiana),stateid('new mexico'),stateid(oklahoma)]", "funql_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma"], "prolog_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma"], "qid": "geo880_718", "answer": ["arkansas", "louisiana", "new mexico", "oklahoma"]}
{"query": "What states border Texas and have a major river ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(texas)),loc(C,A),major(C),river(C)))", "funql": "answer(intersection(state(next_to_2(stateid('texas'))), loc_1(major(river(all)))))", "prolog_ans": "[arkansas,louisiana,'new mexico',oklahoma]", "funql_ans": "[stateid(arkansas),stateid(louisiana),stateid('new mexico'),stateid(oklahoma)]", "funql_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma"], "prolog_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma"], "qid": "geo880_719", "answer": ["arkansas", "louisiana", "new mexico", "oklahoma"]}
{"query": "What states border the Mississippi river ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,riverid(mississippi)),river(B)))", "funql": "answer(state(next_to_2(river(riverid('mississippi')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_720", "answer": []}
{"query": "What states border the most populous state ?", "prolog": "answer(A,(state(A),next_to(A,B),largest(C,(population(B,C),state(B)))))", "funql": "answer(state(next_to_2(largest_one(population_1(state(all))))))", "prolog_ans": "[arizona,nevada,oregon]", "funql_ans": "[stateid(arizona),stateid(nevada),stateid(oregon)]", "funql_answer_parsed": ["arizona", "nevada", "oregon"], "prolog_answer_parsed": ["arizona", "nevada", "oregon"], "qid": "geo880_721", "answer": ["arizona", "nevada", "oregon"]}
{"query": "What states border the state that borders the most states ?", "prolog": "answer(A,(state(A),next_to(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))", "funql": "answer(state(next_to_2(most(state(next_to_2(state(all)))))))", "prolog_ans": "[arkansas,illinois,iowa,kansas,kentucky,nebraska,oklahoma,tennessee]", "funql_ans": "[stateid(arkansas),stateid(illinois),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(nebraska),stateid(oklahoma),stateid(tennessee)]", "funql_answer_parsed": ["arkansas", "illinois", "iowa", "kansas", "kentucky", "nebraska", "oklahoma", "tennessee"], "prolog_answer_parsed": ["arkansas", "illinois", "iowa", "kansas", "kentucky", "nebraska", "oklahoma", "tennessee"], "qid": "geo880_722", "answer": ["arkansas", "illinois", "iowa", "kansas", "kentucky", "nebraska", "oklahoma", "tennessee"]}
{"query": "What states border the state with the most cities ?", "prolog": "answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),city(C)))))", "funql": "answer(state(next_to_2(most(state(loc_1(city(all)))))))", "prolog_ans": "[arizona,nevada,oregon]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["arizona", "nevada", "oregon"], "qid": "geo880_723", "answer": ["arizona", "nevada", "oregon"]}
{"query": "What states border the state with the most major cities ?", "prolog": "answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),major(C),city(C)))))", "funql": "answer(state(next_to_2(most(state(loc_1(major(city(all))))))))", "prolog_ans": "[arizona,nevada,oregon]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["arizona", "nevada", "oregon"], "qid": "geo880_724", "answer": ["arizona", "nevada", "oregon"]}
{"query": "What states border the state with the smallest area ?", "prolog": "answer(A,(state(A),next_to(A,B),smallest(C,(state(B),area(B,C)))))", "funql": "answer(state(next_to_2(smallest_one(area_1(state(all))))))", "prolog_ans": "[maryland,virginia]", "funql_ans": "[stateid(maryland),stateid(virginia)]", "funql_answer_parsed": ["maryland", "virginia"], "prolog_answer_parsed": ["maryland", "virginia"], "qid": "geo880_725", "answer": ["maryland", "virginia"]}
{"query": "What states border the states with the most cities ?", "prolog": "answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),city(C)))))", "funql": "answer(state(next_to_2(most(state(loc_1(city(all)))))))", "prolog_ans": "[arizona,nevada,oregon]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": ["arizona", "nevada", "oregon"], "qid": "geo880_726", "answer": ["arizona", "nevada", "oregon"]}
{"query": "What states border Wisconsin ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(wisconsin))))", "funql": "answer(state(next_to_2(stateid('wisconsin'))))", "prolog_ans": "[illinois,iowa,michigan,minnesota]", "funql_ans": "[stateid(illinois),stateid(iowa),stateid(michigan),stateid(minnesota)]", "funql_answer_parsed": ["illinois", "iowa", "michigan", "minnesota"], "prolog_answer_parsed": ["illinois", "iowa", "michigan", "minnesota"], "qid": "geo880_727", "answer": ["illinois", "iowa", "michigan", "minnesota"]}
{"query": "What state 's capital is Dover ?", "prolog": "answer(A,(state(A),capital(A,B),const(B,cityid(dover,_))))", "funql": "answer(state(capital_2(cityid('dover', _))))", "prolog_ans": "[delaware]", "funql_ans": "[stateid(delaware)]", "funql_answer_parsed": ["delaware"], "prolog_answer_parsed": ["delaware"], "qid": "geo880_728", "answer": ["delaware"]}
{"query": "What states contain at least one major rivers ?", "prolog": "answer(A,(state(A),loc(B,A),major(B),river(B)))", "funql": "answer(state(loc_1(major(river(all)))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new mexico','north dakota',ohio,oklahoma,oregon,pennsylvania,'south dakota',tennessee,texas,utah,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(alabama),stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new mexico'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid(oregon),stateid(pennsylvania),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new mexico", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south dakota", "tennessee", "texas", "utah", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new mexico", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south dakota", "tennessee", "texas", "utah", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_729", "answer": ["alabama", "arizona", "arkansas", "california", "colorado", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new mexico", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south dakota", "tennessee", "texas", "utah", "washington", "west virginia", "wisconsin", "wyoming"]}
{"query": "What states does the Colorado river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(colorado)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('colorado')))))", "prolog_ans": "[arizona,california,colorado,nevada,utah]", "funql_ans": "[stateid(arizona),stateid(california),stateid(colorado),stateid(nevada),stateid(utah)]", "funql_answer_parsed": ["arizona", "california", "colorado", "nevada", "utah"], "prolog_answer_parsed": ["arizona", "california", "colorado", "nevada", "utah"], "qid": "geo880_730", "answer": ["arizona", "california", "colorado", "nevada", "utah"]}
{"query": "What states does the Delaware river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(delaware)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('delaware')))))", "prolog_ans": "[delaware,'new jersey','new york',pennsylvania]", "funql_ans": "[stateid(delaware),stateid('new jersey'),stateid('new york'),stateid(pennsylvania)]", "funql_answer_parsed": ["delaware", "new jersey", "new york", "pennsylvania"], "prolog_answer_parsed": ["delaware", "new jersey", "new york", "pennsylvania"], "qid": "geo880_731", "answer": ["delaware", "new jersey", "new york", "pennsylvania"]}
{"query": "What states does the Mississippi river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('mississippi')))))", "prolog_ans": "[arkansas,illinois,iowa,kentucky,louisiana,minnesota,mississippi,missouri,tennessee,wisconsin]", "funql_ans": "[stateid(arkansas),stateid(illinois),stateid(iowa),stateid(kentucky),stateid(louisiana),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(tennessee),stateid(wisconsin)]", "funql_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "prolog_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "qid": "geo880_732", "answer": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"]}
{"query": "What states does the Mississippi run through ?", "prolog": "answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))", "funql": "answer(state(traverse_1(riverid('mississippi'))))", "prolog_ans": "[arkansas,illinois,iowa,kentucky,louisiana,minnesota,mississippi,missouri,tennessee,wisconsin]", "funql_ans": "[stateid(arkansas),stateid(illinois),stateid(iowa),stateid(kentucky),stateid(louisiana),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(tennessee),stateid(wisconsin)]", "funql_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "prolog_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "qid": "geo880_733", "answer": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"]}
{"query": "What states does the Missouri river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(missouri)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('missouri')))))", "prolog_ans": "[iowa,missouri,montana,nebraska,'north dakota','south dakota']", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "qid": "geo880_734", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "What states does the Missouri run through ?", "prolog": "answer(A,(state(A),const(B,riverid(missouri)),traverse(B,A)))", "funql": "answer(state(traverse_1(riverid('missouri'))))", "prolog_ans": "[iowa,missouri,montana,nebraska,'north dakota','south dakota']", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "qid": "geo880_735", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "What states does the Ohio river go through ?", "prolog": "answer(A,(state(A),const(B,riverid(ohio)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('ohio')))))", "prolog_ans": "[illinois,indiana,kentucky,ohio,pennsylvania,'west virginia']", "funql_ans": "[stateid(illinois),stateid(indiana),stateid(kentucky),stateid(ohio),stateid(pennsylvania),stateid('west virginia')]", "funql_answer_parsed": ["illinois", "indiana", "kentucky", "ohio", "pennsylvania", "west virginia"], "prolog_answer_parsed": ["illinois", "indiana", "kentucky", "ohio", "pennsylvania", "west virginia"], "qid": "geo880_736", "answer": ["illinois", "indiana", "kentucky", "ohio", "pennsylvania", "west virginia"]}
{"query": "What states does the Ohio river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(ohio)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('ohio')))))", "prolog_ans": "[illinois,indiana,kentucky,ohio,pennsylvania,'west virginia']", "funql_ans": "[stateid(illinois),stateid(indiana),stateid(kentucky),stateid(ohio),stateid(pennsylvania),stateid('west virginia')]", "funql_answer_parsed": ["illinois", "indiana", "kentucky", "ohio", "pennsylvania", "west virginia"], "prolog_answer_parsed": ["illinois", "indiana", "kentucky", "ohio", "pennsylvania", "west virginia"], "qid": "geo880_737", "answer": ["illinois", "indiana", "kentucky", "ohio", "pennsylvania", "west virginia"]}
{"query": "What states does the shortest river run through ?", "prolog": "answer(A,(state(A),shortest(B,river(B)),traverse(B,A)))", "funql": "answer(state(traverse_1(shortest(river(all)))))", "prolog_ans": "[delaware,'new jersey','new york',pennsylvania]", "funql_ans": "[stateid(delaware),stateid('new jersey'),stateid('new york'),stateid(pennsylvania)]", "funql_answer_parsed": ["delaware", "new jersey", "new york", "pennsylvania"], "prolog_answer_parsed": ["delaware", "new jersey", "new york", "pennsylvania"], "qid": "geo880_738", "answer": ["delaware", "new jersey", "new york", "pennsylvania"]}
{"query": "What states have a capital that is the highest point in the state ?", "prolog": "answer(A,(state(A),loc(B,A),capital(B),highest(B,(place(B)))))", "funql": "answer(state(loc_1(capital(highest(place(all))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_739", "answer": []}
{"query": "What states have a city named Austin ?", "prolog": "answer(A,(state(A),loc(B,A),const(B,cityid(austin,_))))", "funql": "answer(state(loc_1(city(cityid('austin', _)))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_740", "answer": ["texas"]}
{"query": "What states have cities named Austin ?", "prolog": "answer(A,(state(A),loc(B,A),city(B),const(B,cityid(austin,_))))", "funql": "answer(state(loc_1(city(cityid('austin', _)))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_741", "answer": ["texas"]}
{"query": "What states have cities named Dallas ?", "prolog": "answer(A,(state(A),loc(B,A),city(B),const(B,cityid(dallas,_))))", "funql": "answer(state(loc_1(city(cityid('dallas', _)))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_742", "answer": ["texas"]}
{"query": "What states have cities named Plano ?", "prolog": "answer(A,(state(A),loc(B,A),city(B),const(B,cityid(plano,_))))", "funql": "answer(state(loc_1(city(cityid('plano', _)))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_743", "answer": ["texas"]}
{"query": "What states have cities named Portland ?", "prolog": "answer(A,(state(A),loc(B,A),city(B),const(B,cityid(portland,_))))", "funql": "answer(state(loc_1(city(cityid('portland', _)))))", "prolog_ans": "[maine,oregon]", "funql_ans": "[stateid(maine)]", "funql_answer_parsed": ["maine"], "prolog_answer_parsed": ["maine", "oregon"], "qid": "geo880_744", "answer": ["maine", "oregon"]}
{"query": "What states have cities named Rochester ?", "prolog": "answer(A,(state(A),loc(B,A),city(B),const(B,cityid(rochester,_))))", "funql": "answer(state(loc_1(city(cityid('rochester', _)))))", "prolog_ans": "[minnesota,'new york']", "funql_ans": "[stateid(minnesota)]", "funql_answer_parsed": ["minnesota"], "prolog_answer_parsed": ["minnesota", "new york"], "qid": "geo880_745", "answer": ["minnesota", "new york"]}
{"query": "What states have cities named Salt Lake City ?", "prolog": "answer(A,(state(A),loc(B,A),city(B),const(B,cityid('salt lake city',_))))", "funql": "answer(state(loc_1(city(cityid('salt lake city', _)))))", "prolog_ans": "[utah]", "funql_ans": "[stateid(utah)]", "funql_answer_parsed": ["utah"], "prolog_answer_parsed": ["utah"], "qid": "geo880_746", "answer": ["utah"]}
{"query": "What states have no bordering state ?", "prolog": "answer(A,(state(A),not((next_to(A,B),state(B)))))", "funql": "answer(exclude(state(all), next_to_2(state(all))))", "prolog_ans": "[alaska,hawaii]", "funql_ans": "[stateid(alaska),stateid(hawaii)]", "funql_answer_parsed": ["alaska", "hawaii"], "prolog_answer_parsed": ["alaska", "hawaii"], "qid": "geo880_747", "answer": ["alaska", "hawaii"]}
{"query": "What states have rivers named Colorado ?", "prolog": "answer(A,(state(A),loc(B,A),const(B,riverid(colorado))))", "funql": "answer(state(loc_1(river(riverid('colorado')))))", "prolog_ans": "[arizona,california,colorado,nevada,utah]", "funql_ans": "[stateid(arizona),stateid(california),stateid(colorado),stateid(nevada),stateid(utah)]", "funql_answer_parsed": ["arizona", "california", "colorado", "nevada", "utah"], "prolog_answer_parsed": ["arizona", "california", "colorado", "nevada", "utah"], "qid": "geo880_748", "answer": ["arizona", "california", "colorado", "nevada", "utah"]}
{"query": "What states have rivers running through them ?", "prolog": "answer(A,(state(A),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(all))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(alabama),stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid(connecticut),stateid(delaware),stateid('district of columbia'),stateid(florida),stateid(georgia),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(maryland),stateid(massachusetts),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new hampshire'),stateid('new jersey'),stateid('new mexico'),stateid('new york'),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid(oregon),stateid(pennsylvania),stateid('south carolina'),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(vermont),stateid(virginia),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_749", "answer": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"]}
{"query": "What states have towns named Springfield ?", "prolog": "answer(A,(state(A),loc(B,A),const(B,cityid(springfield,_))))", "funql": "answer(state(loc_1(city(cityid('springfield', _)))))", "prolog_ans": "[illinois,massachusetts,missouri,ohio]", "funql_ans": "[stateid(illinois)]", "funql_answer_parsed": ["illinois"], "prolog_answer_parsed": ["illinois", "massachusetts", "missouri", "ohio"], "qid": "geo880_750", "answer": ["illinois", "massachusetts", "missouri", "ohio"]}
{"query": "What state 's high point is higher than that of Colorado ?", "prolog": "answer(A,(state(A),high_point(A,B),higher(B,C),high_point(D,C),const(D,stateid(colorado))))", "funql": "answer(state(high_point_2(higher_2(high_point_1(stateid('colorado'))))))", "prolog_ans": "[alaska,california]", "funql_ans": "[stateid(alaska),stateid(california)]", "funql_answer_parsed": ["alaska", "california"], "prolog_answer_parsed": ["alaska", "california"], "qid": "geo880_751", "answer": ["alaska", "california"]}
{"query": "What states in the United States have a city of Springfield ?", "prolog": "answer(A,(state(A),loc(A,B),const(B,countryid(usa)),loc(C,A),const(C,cityid(springfield,_))))", "funql": "answer(intersection(state(loc_2(countryid('usa'))), loc_1(city(cityid('springfield', _)))))", "prolog_ans": "[illinois,massachusetts,missouri,ohio]", "funql_ans": "[stateid(illinois)]", "funql_answer_parsed": ["illinois"], "prolog_answer_parsed": ["illinois", "massachusetts", "missouri", "ohio"], "qid": "geo880_752", "answer": ["illinois", "massachusetts", "missouri", "ohio"]}
{"query": "What states neighbor Maine ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(maine))))", "funql": "answer(state(next_to_2(stateid('maine'))))", "prolog_ans": "['new hampshire']", "funql_ans": "[stateid('new hampshire')]", "funql_answer_parsed": ["new hampshire"], "prolog_answer_parsed": ["new hampshire"], "qid": "geo880_753", "answer": ["new hampshire"]}
{"query": "What states surround Kentucky ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))", "funql": "answer(state(next_to_2(stateid('kentucky'))))", "prolog_ans": "[illinois,indiana,missouri,ohio,tennessee,virginia,'west virginia']", "funql_ans": "[stateid(illinois),stateid(indiana),stateid(missouri),stateid(ohio),stateid(tennessee),stateid(virginia),stateid('west virginia')]", "funql_answer_parsed": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"], "prolog_answer_parsed": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"], "qid": "geo880_754", "answer": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"]}
{"query": "What Texas city has the largest population ?", "prolog": "answer(A,largest(B,(const(C,stateid(texas)),city(A),loc(A,C),population(A,B))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('texas'))))))", "prolog_ans": "[houston]", "funql_ans": "[cityid(houston,tx)]", "funql_answer_parsed": ["houston"], "prolog_answer_parsed": ["houston"], "qid": "geo880_755", "answer": ["houston"]}
{"query": "What 's the largest city ?", "prolog": "answer(A,largest(A,city(A)))", "funql": "answer(largest(city(all)))", "prolog_ans": "['new york']", "funql_ans": "[cityid('new york',ny)]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_756", "answer": ["new york"]}
{"query": "Where are mountains ?", "prolog": "answer(A,(loc(B,A),mountain(B)))", "funql": "answer(loc_1(mountain(all)))", "prolog_ans": "[alaska,california,colorado,usa,washington]", "funql_ans": "[countryid(usa),stateid(alabama),stateid(alaska),stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid(connecticut),stateid(delaware),stateid('district of columbia'),stateid(florida),stateid(georgia),stateid(hawaii),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(maine),stateid(maryland),stateid(massachusetts),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new hampshire'),stateid('new jersey'),stateid('new mexico'),stateid('new york'),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid(oregon),stateid(pennsylvania),stateid('rhode island'),stateid('south carolina'),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(vermont),stateid(virginia),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["usa", "alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alaska", "california", "colorado", "usa", "washington"], "qid": "geo880_757", "answer": ["alaska", "california", "colorado", "usa", "washington"]}
{"query": "Where is Austin ?", "prolog": "answer(A,(loc(B,A),const(B,cityid(austin,_))))", "funql": "answer(loc_1(cityid('austin', _)))", "prolog_ans": "[texas,usa]", "funql_ans": "[countryid(usa),stateid(texas)]", "funql_answer_parsed": ["usa", "texas"], "prolog_answer_parsed": ["texas", "usa"], "qid": "geo880_758", "answer": ["texas", "usa"]}
{"query": "Where is Baton Rouge ?", "prolog": "answer(A,(loc(B,A),const(B,cityid('baton rouge',_))))", "funql": "answer(loc_1(cityid('baton rouge', _)))", "prolog_ans": "[louisiana,usa]", "funql_ans": "[countryid(usa),stateid(louisiana)]", "funql_answer_parsed": ["usa", "louisiana"], "prolog_answer_parsed": ["louisiana", "usa"], "qid": "geo880_759", "answer": ["louisiana", "usa"]}
{"query": "Where is Dallas ?", "prolog": "answer(A,(loc(B,A),const(B,cityid(dallas,_))))", "funql": "answer(loc_1(cityid('dallas', _)))", "prolog_ans": "[texas,usa]", "funql_ans": "[countryid(usa),stateid(texas)]", "funql_answer_parsed": ["usa", "texas"], "prolog_answer_parsed": ["texas", "usa"], "qid": "geo880_760", "answer": ["texas", "usa"]}
{"query": "Where is Fort Wayne ?", "prolog": "answer(A,(loc(B,A),const(B,cityid('fort wayne',_))))", "funql": "answer(loc_1(cityid('fort wayne', _)))", "prolog_ans": "[indiana,usa]", "funql_ans": "[countryid(usa),stateid(indiana)]", "funql_answer_parsed": ["usa", "indiana"], "prolog_answer_parsed": ["indiana", "usa"], "qid": "geo880_761", "answer": ["indiana", "usa"]}
{"query": "Where is Houston ?", "prolog": "answer(A,(loc(B,A),const(B,cityid(houston,_))))", "funql": "answer(loc_1(cityid('houston', _)))", "prolog_ans": "[texas,usa]", "funql_ans": "[countryid(usa),stateid(texas)]", "funql_answer_parsed": ["usa", "texas"], "prolog_answer_parsed": ["texas", "usa"], "qid": "geo880_762", "answer": ["texas", "usa"]}
{"query": "Where is Indianapolis ?", "prolog": "answer(A,(loc(B,A),const(B,cityid(indianapolis,_))))", "funql": "answer(loc_1(cityid('indianapolis', _)))", "prolog_ans": "[indiana,usa]", "funql_ans": "[countryid(usa),stateid(indiana)]", "funql_answer_parsed": ["usa", "indiana"], "prolog_answer_parsed": ["indiana", "usa"], "qid": "geo880_763", "answer": ["indiana", "usa"]}
{"query": "Where is Massachusetts ?", "prolog": "answer(A,(loc(B,A),const(B,stateid(massachusetts))))", "funql": "answer(loc_1(stateid('massachusetts')))", "prolog_ans": "[usa]", "funql_ans": "[countryid(usa)]", "funql_answer_parsed": ["usa"], "prolog_answer_parsed": ["usa"], "qid": "geo880_764", "answer": ["usa"]}
{"query": "Where is Mount Whitney ?", "prolog": "answer(A,(loc(B,A),const(B,placeid('mount whitney'))))", "funql": "answer(loc_1(placeid('mount whitney')))", "prolog_ans": "[california,usa]", "funql_ans": "[countryid(usa),stateid(california)]", "funql_answer_parsed": ["usa", "california"], "prolog_answer_parsed": ["california", "usa"], "qid": "geo880_765", "answer": ["california", "usa"]}
{"query": "Where is Mount Whitney located ?", "prolog": "answer(A,(loc(B,A),const(B,placeid('mount whitney'))))", "funql": "answer(loc_1(placeid('mount whitney')))", "prolog_ans": "[california,usa]", "funql_ans": "[countryid(usa),stateid(california)]", "funql_answer_parsed": ["usa", "california"], "prolog_answer_parsed": ["california", "usa"], "qid": "geo880_766", "answer": ["california", "usa"]}
{"query": "Where is New Hampshire ?", "prolog": "answer(A,(loc(B,A),const(B,stateid('new hampshire'))))", "funql": "answer(loc_1(stateid('new hampshire')))", "prolog_ans": "[usa]", "funql_ans": "[countryid(usa)]", "funql_answer_parsed": ["usa"], "prolog_answer_parsed": ["usa"], "qid": "geo880_767", "answer": ["usa"]}
{"query": "Where is New Orleans ?", "prolog": "answer(A,(loc(B,A),const(B,cityid('new orleans',_))))", "funql": "answer(loc_1(cityid('new orleans', _)))", "prolog_ans": "[louisiana,usa]", "funql_ans": "[countryid(usa),stateid(louisiana)]", "funql_answer_parsed": ["usa", "louisiana"], "prolog_answer_parsed": ["louisiana", "usa"], "qid": "geo880_768", "answer": ["louisiana", "usa"]}
{"query": "Where is Portland ?", "prolog": "answer(A,(loc(B,A),const(B,cityid(portland,_))))", "funql": "answer(loc_1(cityid('portland', _)))", "prolog_ans": "[maine,oregon,usa]", "funql_ans": "[countryid(usa),stateid(maine),stateid(oregon)]", "funql_answer_parsed": ["usa", "maine", "oregon"], "prolog_answer_parsed": ["maine", "oregon", "usa"], "qid": "geo880_769", "answer": ["maine", "oregon", "usa"]}
{"query": "Where is San Diego ?", "prolog": "answer(A,(loc(B,A),const(B,cityid('san diego',_))))", "funql": "answer(loc_1(cityid('san diego', _)))", "prolog_ans": "[california,usa]", "funql_ans": "[countryid(usa),stateid(california)]", "funql_answer_parsed": ["usa", "california"], "prolog_answer_parsed": ["california", "usa"], "qid": "geo880_770", "answer": ["california", "usa"]}
{"query": "Where is San Jose ?", "prolog": "answer(A,(loc(B,A),const(B,cityid('san jose',_))))", "funql": "answer(loc_1(cityid('san jose', _)))", "prolog_ans": "[california,usa]", "funql_ans": "[countryid(usa),stateid(california)]", "funql_answer_parsed": ["usa", "california"], "prolog_answer_parsed": ["california", "usa"], "qid": "geo880_771", "answer": ["california", "usa"]}
{"query": "Where is Scotts Valley ?", "prolog": "answer(A,(loc(B,A),const(B,cityid('scotts valley',_))))", "funql": "answer(loc_1(cityid('scotts valley', _)))", "prolog_ans": "[california,usa]", "funql_ans": "[countryid(usa),stateid(california)]", "funql_answer_parsed": ["usa", "california"], "prolog_answer_parsed": ["california", "usa"], "qid": "geo880_772", "answer": ["california", "usa"]}
{"query": "Where is Springfield ?", "prolog": "answer(A,(loc(B,A),const(B,cityid(springfield,_))))", "funql": "answer(loc_1(cityid('springfield', _)))", "prolog_ans": "[illinois,massachusetts,missouri,ohio,usa]", "funql_ans": "[countryid(usa),stateid(illinois),stateid(massachusetts),stateid(missouri),stateid(ohio)]", "funql_answer_parsed": ["usa", "illinois", "massachusetts", "missouri", "ohio"], "prolog_answer_parsed": ["illinois", "massachusetts", "missouri", "ohio", "usa"], "qid": "geo880_773", "answer": ["illinois", "massachusetts", "missouri", "ohio", "usa"]}
{"query": "Where is the Chattahoochee river ?", "prolog": "answer(A,(loc(B,A),const(B,riverid(chattahoochee)),river(B)))", "funql": "answer(loc_1(river(riverid('chattahoochee'))))", "prolog_ans": "[florida,georgia,usa]", "funql_ans": "[countryid(usa),stateid(florida),stateid(georgia)]", "funql_answer_parsed": ["usa", "florida", "georgia"], "prolog_answer_parsed": ["florida", "georgia", "usa"], "qid": "geo880_774", "answer": ["florida", "georgia", "usa"]}
{"query": "Where is the highest mountain of the United States ?", "prolog": "answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(highest(mountain(loc_2(countryid('usa')))))", "prolog_ans": "[mckinley]", "funql_ans": "[placeid('mount mckinley')]", "funql_answer_parsed": ["mount mckinley"], "prolog_answer_parsed": ["mckinley"], "qid": "geo880_775", "answer": ["mckinley"]}
{"query": "Where is the highest point in Hawaii ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii)))))", "funql": "answer(highest(place(loc_2(stateid('hawaii')))))", "prolog_ans": "['mauna kea']", "funql_ans": "[placeid('mauna kea')]", "funql_answer_parsed": ["mauna kea"], "prolog_answer_parsed": ["mauna kea"], "qid": "geo880_776", "answer": ["mauna kea"]}
{"query": "Where is the highest point in Montana ?", "prolog": "answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))", "funql": "answer(highest(place(loc_2(stateid('montana')))))", "prolog_ans": "['granite peak']", "funql_ans": "[placeid('granite peak')]", "funql_answer_parsed": ["granite peak"], "prolog_answer_parsed": ["granite peak"], "qid": "geo880_777", "answer": ["granite peak"]}
{"query": "Where is the lowest point in Maryland ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))", "funql": "answer(lowest(place(loc_2(stateid('maryland')))))", "prolog_ans": "['atlantic ocean']", "funql_ans": "[placeid('atlantic ocean')]", "funql_answer_parsed": ["atlantic ocean"], "prolog_answer_parsed": ["atlantic ocean"], "qid": "geo880_778", "answer": ["atlantic ocean"]}
{"query": "Where is the lowest point in the US ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(lowest(place(loc_2(countryid('usa')))))", "prolog_ans": "['death valley']", "funql_ans": "[placeid('death valley')]", "funql_answer_parsed": ["death valley"], "prolog_answer_parsed": ["death valley"], "qid": "geo880_779", "answer": ["death valley"]}
{"query": "Where is the lowest spot in Iowa ?", "prolog": "answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))", "funql": "answer(lowest(place(loc_2(stateid('iowa')))))", "prolog_ans": "['mississippi river']", "funql_ans": "[placeid('mississippi river')]", "funql_answer_parsed": ["mississippi river"], "prolog_answer_parsed": ["mississippi river"], "qid": "geo880_780", "answer": ["mississippi river"]}
{"query": "Where is the most populated area of New Mexico ?", "prolog": "answer(A,largest(B,(population(A,B),city(A),loc(A,C),const(C,stateid('new mexico')))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('new mexico'))))))", "prolog_ans": "[albuquerque]", "funql_ans": "[cityid(albuquerque,nm)]", "funql_answer_parsed": ["albuquerque"], "prolog_answer_parsed": ["albuquerque"], "qid": "geo880_781", "answer": ["albuquerque"]}
{"query": "Where is the smallest city ?", "prolog": "answer(A,(loc(B,A),smallest(B,city(B))))", "funql": "answer(loc_1(smallest(city(all))))", "prolog_ans": "[california,usa]", "funql_ans": "[countryid(usa),stateid(california)]", "funql_answer_parsed": ["usa", "california"], "prolog_answer_parsed": ["california", "usa"], "qid": "geo880_782", "answer": ["california", "usa"]}
{"query": "Which capitals are in the states that border Texas ?", "prolog": "answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))", "funql": "answer(capital(loc_2(state(next_to_2(stateid('texas'))))))", "prolog_ans": "['baton rouge','little rock','oklahoma city','santa fe']", "funql_ans": "[cityid('baton rouge',la),cityid('little rock',ar),cityid('oklahoma city',ok)]", "funql_answer_parsed": ["baton rouge", "little rock", "oklahoma city"], "prolog_answer_parsed": ["baton rouge", "little rock", "oklahoma city", "santa fe"], "qid": "geo880_783", "answer": ["baton rouge", "little rock", "oklahoma city", "santa fe"]}
{"query": "Which capitals are not major cities ?", "prolog": "answer(A,(capital(A),not((major(A),city(A)))))", "funql": "answer(exclude(capital(all), major(city(all))))", "prolog_ans": "[albany,annapolis,augusta,bismarck,boise,'carson city',charleston,cheyenne,columbia,concord,dover,frankfort,harrisburg,hartford,helena,'jefferson city',juneau,lansing,montpelier,olympia,pierre,raleigh,salem,'santa fe',springfield,tallahassee,topeka,trenton]", "funql_ans": "[cityid(albany,ny),cityid(annapolis,md),cityid(augusta,me),cityid(bismarck,nd),cityid(boise,id),cityid('carson city',nv),cityid(charleston,wv),cityid(cheyenne,wy),cityid(columbia,sc),cityid(concord,nh),cityid(dover,de),cityid(frankfort,ky),cityid(harrisburg,pa),cityid(hartford,ct),cityid(helena,mt),cityid('jefferson city',mo),cityid(juneau,ak),cityid(lansing,mi),cityid(montpelier,vt),cityid(olympia,wa),cityid(pierre,sd),cityid(raleigh,nc),cityid(salem,or),cityid('santa fe',nm),cityid(springfield,il),cityid(tallahassee,fl),cityid(topeka,ks),cityid(trenton,nj)]", "funql_answer_parsed": ["albany", "annapolis", "augusta", "bismarck", "boise", "carson city", "charleston", "cheyenne", "columbia", "concord", "dover", "frankfort", "harrisburg", "hartford", "helena", "jefferson city", "juneau", "lansing", "montpelier", "olympia", "pierre", "raleigh", "salem", "santa fe", "springfield", "tallahassee", "topeka", "trenton"], "prolog_answer_parsed": ["albany", "annapolis", "augusta", "bismarck", "boise", "carson city", "charleston", "cheyenne", "columbia", "concord", "dover", "frankfort", "harrisburg", "hartford", "helena", "jefferson city", "juneau", "lansing", "montpelier", "olympia", "pierre", "raleigh", "salem", "santa fe", "springfield", "tallahassee", "topeka", "trenton"], "qid": "geo880_784", "answer": ["albany", "annapolis", "augusta", "bismarck", "boise", "carson city", "charleston", "cheyenne", "columbia", "concord", "dover", "frankfort", "harrisburg", "hartford", "helena", "jefferson city", "juneau", "lansing", "montpelier", "olympia", "pierre", "raleigh", "salem", "santa fe", "springfield", "tallahassee", "topeka", "trenton"]}
{"query": "Which city in California has the largest population ?", "prolog": "answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(california)),population(A,B))))", "funql": "answer(largest_one(population_1(city(loc_2(stateid('california'))))))", "prolog_ans": "['los angeles']", "funql_ans": "[cityid('los angeles',ca)]", "funql_answer_parsed": ["los angeles"], "prolog_answer_parsed": ["los angeles"], "qid": "geo880_785", "answer": ["los angeles"]}
{"query": "Which is the density of the state that the largest river in the United States runs through ?", "prolog": "answer(A,(density(B,A),state(B),longest(C,(river(C),loc(C,D),const(D,countryid(usa)))),traverse(C,B)))", "funql": "answer(density_1(state(traverse_1(longest(river(loc_2(countryid('usa'))))))))", "prolog_ans": "[5.351700680272109,8.957505576015354,9.231966053748232,20.297542043984475,51.740674955595026,70.53084648493544]", "funql_ans": "[0.0053517006802721095,8.957505576015354,9.231966053748232,20.297542043984475,51.740674955595026,70.53084648493544]", "funql_answer_parsed": [0.0053517007, 8.957505576, 9.2319660537, 20.297542044, 51.7406749556, 70.5308464849], "prolog_answer_parsed": [5.3517006803, 8.957505576, 9.2319660537, 20.297542044, 51.7406749556, 70.5308464849], "qid": "geo880_786", "answer": [5.351700680272109, 8.957505576015354, 9.231966053748232, 20.297542043984475, 51.740674955595026, 70.53084648493544]}
{"query": "Which is the highest peak not in Alaska ?", "prolog": "answer(A,highest(A,(mountain(A),not((loc(A,B),const(B,stateid(alaska)))))))", "funql": "answer(highest(exclude(mountain(all),  loc_2(stateid('alaska')))))", "prolog_ans": "[whitney]", "funql_ans": "[placeid('mount whitney')]", "funql_answer_parsed": ["mount whitney"], "prolog_answer_parsed": ["whitney"], "qid": "geo880_787", "answer": ["whitney"]}
{"query": "Which is the longest river in USA ?", "prolog": "answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))", "funql": "answer(longest(river(loc_2(countryid('usa')))))", "prolog_ans": "[missouri]", "funql_ans": "[riverid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_788", "answer": ["missouri"]}
{"query": "Which is the lowest point of the states that the Mississippi runs through ?", "prolog": "answer(B,lowest(B,(place(B),loc(B,A),state(A),const(C,riverid(mississippi)),traverse(C,A))))", "funql": "answer(lowest(place(loc_2(state(traverse_1(riverid('mississippi')))))))", "prolog_ans": "['new orleans']", "funql_ans": "[placeid('new orleans')]", "funql_answer_parsed": ["new orleans"], "prolog_answer_parsed": ["new orleans"], "qid": "geo880_789", "answer": ["new orleans"]}
{"query": "Which is the shortest river ?", "prolog": "answer(A,shortest(A,river(A)))", "funql": "answer(shortest(river(all)))", "prolog_ans": "[delaware]", "funql_ans": "[riverid(delaware)]", "funql_answer_parsed": ["delaware"], "prolog_answer_parsed": ["delaware"], "qid": "geo880_790", "answer": ["delaware"]}
{"query": "Which is the smallest state ?", "prolog": "answer(A,smallest(A,state(A)))", "funql": "answer(smallest(state(all)))", "prolog_ans": "['district of columbia']", "funql_ans": "[stateid('district of columbia')]", "funql_answer_parsed": ["district of columbia"], "prolog_answer_parsed": ["district of columbia"], "qid": "geo880_791", "answer": ["district of columbia"]}
{"query": "Which of the states bordering Pennsylvania has the largest population ?", "prolog": "answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(pennsylvania)),population(A,B))))", "funql": "answer(largest_one(population_1(state(next_to_2(stateid('pennsylvania'))))))", "prolog_ans": "['new york']", "funql_ans": "[stateid('new york')]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_792", "answer": ["new york"]}
{"query": "Which river goes through the most states ?", "prolog": "answer(A,most(A,B,(river(A),traverse(A,B),state(B))))", "funql": "answer(most(river(traverse_2(state(all)))))", "prolog_ans": "[mississippi]", "funql_ans": "[stateid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_793", "answer": ["mississippi"]}
{"query": "Which river runs through most states ?", "prolog": "answer(A,most(A,B,(river(A),traverse(A,B),state(B))))", "funql": "answer(most(river(traverse_2(state(all)))))", "prolog_ans": "[mississippi]", "funql_ans": "[stateid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_794", "answer": ["mississippi"]}
{"query": "Which river runs through the most states ?", "prolog": "answer(A,most(A,B,(river(A),traverse(A,B),state(B))))", "funql": "answer(most(river(traverse_2(state(all)))))", "prolog_ans": "[mississippi]", "funql_ans": "[stateid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_795", "answer": ["mississippi"]}
{"query": "Which river traverses most states ?", "prolog": "answer(A,most(A,B,(river(A),traverse(A,B),state(B))))", "funql": "answer(most(river(traverse_2(state(all)))))", "prolog_ans": "[mississippi]", "funql_ans": "[stateid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["mississippi"], "qid": "geo880_796", "answer": ["mississippi"]}
{"query": "Which rivers are in Alaska ?", "prolog": "answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))", "funql": "answer(river(loc_2(stateid('alaska'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_797", "answer": []}
{"query": "Which rivers do not run through Texas ?", "prolog": "answer(A,(river(A),not((traverse(A,B),const(B,stateid(texas))))))", "funql": "answer(exclude(river(all), traverse_2(stateid('texas'))))", "prolog_ans": "[allegheny,arkansas,bighorn,chattahoochee,cheyenne,cimarron,'clark fork',colorado,columbia,connecticut,cumberland,dakota,delaware,gila,green,hudson,'little missouri',mississippi,missouri,neosho,niobrara,'north platte',ohio,ouachita,pearl,potomac,powder,republican,roanoke,rock,'san juan','smoky hill',snake,'south platte','st. francis',tennessee,tombigbee,wabash,'wateree catawba',white,yellowstone]", "funql_ans": "[riverid(allegheny),riverid(arkansas),riverid(bighorn),riverid(chattahoochee),riverid(cheyenne),riverid(cimarron),riverid('clark fork'),riverid(colorado),riverid(columbia),riverid(connecticut),riverid(cumberland),riverid(dakota),riverid(delaware),riverid(gila),riverid(green),riverid(hudson),riverid('little missouri'),riverid(mississippi),riverid(missouri),riverid(neosho),riverid(niobrara),riverid('north platte'),riverid(ohio),riverid(ouachita),riverid(pearl),riverid(potomac),riverid(powder),riverid(republican),riverid(roanoke),riverid(rock),riverid('san juan'),riverid('smoky hill'),riverid(snake),riverid('south platte'),riverid('st. francis'),riverid(tennessee),riverid(tombigbee),riverid(wabash),riverid('wateree catawba'),riverid(white),riverid(yellowstone)]", "funql_answer_parsed": ["allegheny", "arkansas", "bighorn", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "cumberland", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "mississippi", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "potomac", "powder", "republican", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tennessee", "tombigbee", "wabash", "wateree catawba", "white", "yellowstone"], "prolog_answer_parsed": ["allegheny", "arkansas", "bighorn", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "cumberland", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "mississippi", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "potomac", "powder", "republican", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tennessee", "tombigbee", "wabash", "wateree catawba", "white", "yellowstone"], "qid": "geo880_798", "answer": ["allegheny", "arkansas", "bighorn", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "cumberland", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "mississippi", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "potomac", "powder", "republican", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tennessee", "tombigbee", "wabash", "wateree catawba", "white", "yellowstone"]}
{"query": "Which rivers do not run through USA ?", "prolog": "answer(A,(river(A),not((traverse(A,B),const(B,countryid(usa))))))", "funql": "answer(exclude(river(all), traverse_2(countryid('usa'))))", "prolog_ans": "[]", "funql_ans": "[riverid(allegheny),riverid(arkansas),riverid(bighorn),riverid(canadian),riverid(chattahoochee),riverid(cheyenne),riverid(cimarron),riverid('clark fork'),riverid(colorado),riverid(columbia),riverid(connecticut),riverid(cumberland),riverid(dakota),riverid(delaware),riverid(gila),riverid(green),riverid(hudson),riverid('little missouri'),riverid(mississippi),riverid(missouri),riverid(neosho),riverid(niobrara),riverid('north platte'),riverid(ohio),riverid(ouachita),riverid(pearl),riverid(pecos),riverid(potomac),riverid(powder),riverid(red),riverid(republican),riverid('rio grande'),riverid(roanoke),riverid(rock),riverid('san juan'),riverid('smoky hill'),riverid(snake),riverid('south platte'),riverid('st. francis'),riverid(tennessee),riverid(tombigbee),riverid(wabash),riverid(washita),riverid('wateree catawba'),riverid(white),riverid(yellowstone)]", "funql_answer_parsed": ["allegheny", "arkansas", "bighorn", "canadian", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "cumberland", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "mississippi", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "pecos", "potomac", "powder", "red", "republican", "rio grande", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tennessee", "tombigbee", "wabash", "washita", "wateree catawba", "white", "yellowstone"], "prolog_answer_parsed": [], "qid": "geo880_799", "answer": []}
{"query": "Which rivers flow through Alaska ?", "prolog": "answer(A,(river(A),traverse(A,B),const(B,stateid(alaska))))", "funql": "answer(river(traverse_2(stateid('alaska'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_800", "answer": []}
{"query": "Which rivers run through states bordering New Mexico ?", "prolog": "answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid('new mexico'))))", "funql": "answer(river(traverse_2(state(next_to_2(stateid('new mexico'))))))", "prolog_ans": "[arkansas,canadian,cimarron,colorado,gila,green,neosho,'north platte',pecos,red,republican,'rio grande','san juan','smoky hill','south platte',washita]", "funql_ans": "[riverid(arkansas),riverid(canadian),riverid(cimarron),riverid(colorado),riverid(gila),riverid(green),riverid(neosho),riverid('north platte'),riverid(pecos),riverid(red),riverid(republican),riverid('rio grande'),riverid('san juan'),riverid('smoky hill'),riverid('south platte'),riverid(washita)]", "funql_answer_parsed": ["arkansas", "canadian", "cimarron", "colorado", "gila", "green", "neosho", "north platte", "pecos", "red", "republican", "rio grande", "san juan", "smoky hill", "south platte", "washita"], "prolog_answer_parsed": ["arkansas", "canadian", "cimarron", "colorado", "gila", "green", "neosho", "north platte", "pecos", "red", "republican", "rio grande", "san juan", "smoky hill", "south platte", "washita"], "qid": "geo880_801", "answer": ["arkansas", "canadian", "cimarron", "colorado", "gila", "green", "neosho", "north platte", "pecos", "red", "republican", "rio grande", "san juan", "smoky hill", "south platte", "washita"]}
{"query": "Which rivers run through states that border the state with the capital Austin ?", "prolog": "answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(austin,_))))", "funql": "answer(river(traverse_2(state(next_to_2(state(loc_1(capital(cityid('austin', _)))))))))", "prolog_ans": "[arkansas,canadian,cimarron,gila,mississippi,neosho,ouachita,pearl,pecos,red,'rio grande','san juan','st. francis',washita,white]", "funql_ans": "[riverid(arkansas),riverid(canadian),riverid(cimarron),riverid(gila),riverid(mississippi),riverid(neosho),riverid(ouachita),riverid(pearl),riverid(pecos),riverid(red),riverid('rio grande'),riverid('san juan'),riverid('st. francis'),riverid(washita),riverid(white)]", "funql_answer_parsed": ["arkansas", "canadian", "cimarron", "gila", "mississippi", "neosho", "ouachita", "pearl", "pecos", "red", "rio grande", "san juan", "st. francis", "washita", "white"], "prolog_answer_parsed": ["arkansas", "canadian", "cimarron", "gila", "mississippi", "neosho", "ouachita", "pearl", "pecos", "red", "rio grande", "san juan", "st. francis", "washita", "white"], "qid": "geo880_802", "answer": ["arkansas", "canadian", "cimarron", "gila", "mississippi", "neosho", "ouachita", "pearl", "pecos", "red", "rio grande", "san juan", "st. francis", "washita", "white"]}
{"query": "Which rivers run through states with fewest cities ?", "prolog": "answer(A,(river(A),traverse(A,B),fewest(B,C,(state(B),loc(C,B),city(C)))))", "funql": "answer(river(traverse_2(fewest(state(loc_1(city(all)))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_803", "answer": []}
{"query": "Which rivers run through the state with the largest city in the US ?", "prolog": "answer(A,(river(A),traverse(A,B),state(B),loc(C,B),largest(C,(city(C),loc(C,D),const(D,countryid(usa))))))", "funql": "answer(river(traverse_2(state(loc_1(largest(city(loc_2(countryid('usa')))))))))", "prolog_ans": "[allegheny,delaware,hudson]", "funql_ans": "[riverid(allegheny),riverid(delaware),riverid(hudson)]", "funql_answer_parsed": ["allegheny", "delaware", "hudson"], "prolog_answer_parsed": ["allegheny", "delaware", "hudson"], "qid": "geo880_804", "answer": ["allegheny", "delaware", "hudson"]}
{"query": "Which rivers run through the state with the lowest elevation in the USA ?", "prolog": "answer(A,(river(A),traverse(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa))))))", "funql": "answer(river(traverse_2(state(loc_1(lowest(place(loc_2(countryid('usa')))))))))", "prolog_ans": "[allegheny,arkansas,bighorn,canadian,chattahoochee,cheyenne,cimarron,'clark fork',colorado,columbia,connecticut,cumberland,dakota,delaware,gila,green,hudson,'little missouri',mississippi,missouri,neosho,niobrara,'north platte',ohio,ouachita,pearl,pecos,potomac,powder,red,republican,'rio grande',roanoke,rock,'san juan','smoky hill',snake,'south platte','st. francis',tennessee,tombigbee,wabash,washita,'wateree catawba',white,yellowstone]", "funql_ans": "[riverid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["allegheny", "arkansas", "bighorn", "canadian", "chattahoochee", "cheyenne", "cimarron", "clark fork", "colorado", "columbia", "connecticut", "cumberland", "dakota", "delaware", "gila", "green", "hudson", "little missouri", "mississippi", "missouri", "neosho", "niobrara", "north platte", "ohio", "ouachita", "pearl", "pecos", "potomac", "powder", "red", "republican", "rio grande", "roanoke", "rock", "san juan", "smoky hill", "snake", "south platte", "st. francis", "tennessee", "tombigbee", "wabash", "washita", "wateree catawba", "white", "yellowstone"], "qid": "geo880_805", "answer": ["colorado"]}
{"query": "Which state border Kentucky ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))", "funql": "answer(state(next_to_2(stateid('kentucky'))))", "prolog_ans": "[illinois,indiana,missouri,ohio,tennessee,virginia,'west virginia']", "funql_ans": "[stateid(illinois),stateid(indiana),stateid(missouri),stateid(ohio),stateid(tennessee),stateid(virginia),stateid('west virginia')]", "funql_answer_parsed": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"], "prolog_answer_parsed": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"], "qid": "geo880_806", "answer": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"]}
{"query": "Which state borders Florida ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))", "funql": "answer(state(next_to_2(stateid('florida'))))", "prolog_ans": "[alabama,georgia]", "funql_ans": "[stateid(alabama),stateid(georgia)]", "funql_answer_parsed": ["alabama", "georgia"], "prolog_answer_parsed": ["alabama", "georgia"], "qid": "geo880_807", "answer": ["alabama", "georgia"]}
{"query": "Which state borders Hawaii ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))", "funql": "answer(state(next_to_2(stateid('hawaii'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_808", "answer": []}
{"query": "Which state borders most states ?", "prolog": "answer(A,most(A,B,(state(A),next_to(A,B),state(B))))", "funql": "answer(most(state(next_to_2(state(all)))))", "prolog_ans": "[missouri]", "funql_ans": "[stateid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_809", "answer": ["missouri"]}
{"query": "Which state borders the most states ?", "prolog": "answer(A,most(A,B,(state(A),next_to(A,B),state(B))))", "funql": "answer(most(state(next_to_2(state(all)))))", "prolog_ans": "[missouri]", "funql_ans": "[stateid(missouri)]", "funql_answer_parsed": ["missouri"], "prolog_answer_parsed": ["missouri"], "qid": "geo880_810", "answer": ["missouri"]}
{"query": "Which state capital has the smallest population ?", "prolog": "answer(A,smallest(B,(capital(A),population(A,B))))", "funql": "answer(smallest_one(population_1(capital(all))))", "prolog_ans": "[charleston]", "funql_ans": "[cityid(charleston,wv)]", "funql_answer_parsed": ["charleston"], "prolog_answer_parsed": ["charleston"], "qid": "geo880_811", "answer": ["charleston"]}
{"query": "Which state contains most rivers ?", "prolog": "answer(A,most(A,B,(state(A),loc(B,A),river(B))))", "funql": "answer(most(state(loc_1(river(all)))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_812", "answer": ["colorado"]}
{"query": "Which state has the biggest population ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_813", "answer": ["california"]}
{"query": "Which state has the greatest density ?", "prolog": "answer(A,largest(B,(state(A),density(A,B))))", "funql": "answer(largest_one(density_1(state(all))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_814", "answer": ["new jersey"]}
{"query": "Which state has the greatest population ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_815", "answer": ["california"]}
{"query": "Which state has the highest elevation ?", "prolog": "answer(A,(state(A), loc(B,A), highest(B,(place(B)))))", "funql": "answer(state(loc_1(highest(place(all)))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_816", "answer": ["alaska"]}
{"query": "Which state has the highest peak in the country ?", "prolog": "answer(A,(state(A),loc(B,A),highest(B,(mountain(B)))))", "funql": "answer(state(loc_1(highest(place(all)))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_817", "answer": ["alaska"]}
{"query": "Which state has the highest point ?", "prolog": "answer(A,(state(A),loc(B,A),highest(B,place(B))))", "funql": "answer(state(loc_1(highest(place(all)))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_818", "answer": ["alaska"]}
{"query": "Which state has the highest population density ?", "prolog": "answer(A,largest(B,(state(A),density(A,B))))", "funql": "answer(largest_one(density_1(state(all))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_819", "answer": ["new jersey"]}
{"query": "Which state has the largest city ?", "prolog": "answer(A,(state(A),loc(B,A),largest(B,(city(B)))))", "funql": "answer(state(loc_1(largest(city(all)))))", "prolog_ans": "['new york']", "funql_ans": "[stateid('new york')]", "funql_answer_parsed": ["new york"], "prolog_answer_parsed": ["new york"], "qid": "geo880_820", "answer": ["new york"]}
{"query": "Which state has the largest density ?", "prolog": "answer(A,largest(B,(state(A),density(A,B))))", "funql": "answer(largest_one(density_1(state(all))))", "prolog_ans": "['new jersey']", "funql_ans": "[stateid('new jersey')]", "funql_answer_parsed": ["new jersey"], "prolog_answer_parsed": ["new jersey"], "qid": "geo880_821", "answer": ["new jersey"]}
{"query": "Which state has the least population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_822", "answer": ["alaska"]}
{"query": "Which state has the longest river ?", "prolog": "answer(A,(state(A),loc(B,A),longest(B,(river(B)))))", "funql": "answer(state(loc_1(longest(river(all)))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_823", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "Which state has the lowest elevation ?", "prolog": "answer(A,(state(A),loc(B,A),lowest(B,place(B))))", "funql": "answer(state(loc_1(lowest(place(all)))))", "prolog_ans": "[alabama,alaska,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,hawaii,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maine,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'rhode island','south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["alabama", "alaska", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_824", "answer": ["california"]}
{"query": "Which state has the lowest point that borders Idaho ?", "prolog": "answer(D,(state(D),loc(B,D),lowest(B,(place(B), state(A), loc(B,A), next_to(A,C),const(C,stateid(idaho))))))", "funql": "answer(state(loc_1(lowest(place(loc_2(next_to_2(stateid('idaho'))))))))", "prolog_ans": "[alaska,arizona,hawaii,montana,nevada,oregon,utah,washington,wyoming]", "funql_ans": "[stateid(alaska),stateid(hawaii),stateid(oregon),stateid(washington)]", "funql_answer_parsed": ["alaska", "hawaii", "oregon", "washington"], "prolog_answer_parsed": ["alaska", "arizona", "hawaii", "montana", "nevada", "oregon", "utah", "washington", "wyoming"], "qid": "geo880_825", "answer": ["alaska", "arizona", "hawaii", "montana", "nevada", "oregon", "utah", "washington", "wyoming"], "python_impossible": true}
{"query": "Which state has the lowest population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_826", "answer": ["alaska"]}
{"query": "Which state has the most major cities ?", "prolog": "answer(A,most(A,B,(state(A),loc(B,A),major(B),city(B))))", "funql": "answer(most(state(loc_1(major(city(all))))))", "prolog_ans": "[california]", "funql_ans": "[cityid(birmingham,al)]", "funql_answer_parsed": ["birmingham"], "prolog_answer_parsed": ["california"], "qid": "geo880_827", "answer": ["california"]}
{"query": "Which state has the most major rivers ?", "prolog": "answer(A,most(A,B,(state(A),loc(B,A),major(B),river(B))))", "funql": "answer(most(state(loc_1(major(river(all))))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_828", "answer": ["colorado"]}
{"query": "Which state has the most major rivers running through it ?", "prolog": "answer(A,most(A,B,(state(A),major(B),river(B),traverse(B,A))))", "funql": "answer(most(state(traverse_1(major(river(all))))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_829", "answer": ["colorado"]}
{"query": "Which state has the most people ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_830", "answer": ["california"]}
{"query": "Which state has the most population ?", "prolog": "answer(A,largest(B,(state(A),population(A,B))))", "funql": "answer(largest_one(population_1(state(all))))", "prolog_ans": "[california]", "funql_ans": "[stateid(california)]", "funql_answer_parsed": ["california"], "prolog_answer_parsed": ["california"], "qid": "geo880_831", "answer": ["california"]}
{"query": "Which state has the most rivers ?", "prolog": "answer(A,most(A,B,(state(A),loc(B,A),river(B))))", "funql": "answer(most(state(loc_1(river(all)))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_832", "answer": ["colorado"]}
{"query": "Which state has the most rivers running through it ?", "prolog": "answer(A,most(A,B,(state(A),river(B),traverse(B,A))))", "funql": "answer(most(state(traverse_1(river(all)))))", "prolog_ans": "[colorado]", "funql_ans": "[riverid(mississippi)]", "funql_answer_parsed": ["mississippi"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_833", "answer": ["colorado"]}
{"query": "Which state has the Red river ?", "prolog": "answer(A,(state(A),loc(B,A),const(B,riverid(red)),river(B)))", "funql": "answer(state(loc_1(river(riverid('red')))))", "prolog_ans": "[arkansas,louisiana,'new mexico',oklahoma,texas]", "funql_ans": "[stateid(arkansas),stateid(louisiana),stateid('new mexico'),stateid(oklahoma),stateid(texas)]", "funql_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma", "texas"], "prolog_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma", "texas"], "qid": "geo880_834", "answer": ["arkansas", "louisiana", "new mexico", "oklahoma", "texas"]}
{"query": "Which state has the smallest area that borders Texas ?", "prolog": "answer(A,smallest(B,(state(A),area(A,B),next_to(A,C),const(C,stateid(texas)))))", "funql": "answer(smallest_one(area_1(state(next_to_2(stateid('texas'))))))", "prolog_ans": "[louisiana]", "funql_ans": "[stateid(louisiana)]", "funql_answer_parsed": ["louisiana"], "prolog_answer_parsed": ["louisiana"], "qid": "geo880_835", "answer": ["louisiana"]}
{"query": "Which state has the smallest average urban population ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_836", "answer": ["alaska"]}
{"query": "Which state has the smallest population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_837", "answer": ["alaska"]}
{"query": "Which state has the sparsest population density ?", "prolog": "answer(A,smallest(B,(state(A),density(A,B))))", "funql": "answer(smallest_one(density_1(state(all))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_838", "answer": ["alaska"]}
{"query": "Which state is Kalamazoo in ?", "prolog": "answer(A,(state(A),const(B,cityid(kalamazoo,_)),loc(B,A)))", "funql": "answer(state(loc_1(cityid('kalamazoo', _))))", "prolog_ans": "[michigan]", "funql_ans": "[stateid(michigan)]", "funql_answer_parsed": ["michigan"], "prolog_answer_parsed": ["michigan"], "qid": "geo880_839", "answer": ["michigan"]}
{"query": "Which state is Mount McKinley in ?", "prolog": "answer(A,(state(A),const(B,placeid('mount mckinley')),loc(B,A)))", "funql": "answer(state(loc_1(placeid('mount mckinley'))))", "prolog_ans": "[alaska]", "funql_ans": "[stateid(alaska)]", "funql_answer_parsed": ["alaska"], "prolog_answer_parsed": ["alaska"], "qid": "geo880_840", "answer": ["alaska"]}
{"query": "Which state is the city Denver located in ?", "prolog": "answer(A,(state(A),city(B),const(B,cityid(denver,_)),loc(B,A)))", "funql": "answer(state(loc_1(city(cityid('denver', _)))))", "prolog_ans": "[colorado]", "funql_ans": "[stateid(colorado)]", "funql_answer_parsed": ["colorado"], "prolog_answer_parsed": ["colorado"], "qid": "geo880_841", "answer": ["colorado"]}
{"query": "Which state is the largest city in Montana in ?", "prolog": "answer(A,(state(A),largest(B,(city(B),loc(B,C),const(C,stateid(montana)))),loc(B,A)))", "funql": "answer(state(loc_1(largest(city(loc_2(stateid('montana')))))))", "prolog_ans": "[montana]", "funql_ans": "[stateid(montana)]", "funql_answer_parsed": ["montana"], "prolog_answer_parsed": ["montana"], "qid": "geo880_842", "answer": ["montana"]}
{"query": "Which state is the smallest ?", "prolog": "answer(A,smallest(A,state(A)))", "funql": "answer(smallest(state(all)))", "prolog_ans": "['district of columbia']", "funql_ans": "[stateid('district of columbia')]", "funql_answer_parsed": ["district of columbia"], "prolog_answer_parsed": ["district of columbia"], "qid": "geo880_843", "answer": ["district of columbia"]}
{"query": "Which states adjoin Alabama ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))", "funql": "answer(state(next_to_2(stateid('alabama'))))", "prolog_ans": "[florida,georgia,mississippi,tennessee]", "funql_ans": "[stateid(florida),stateid(georgia),stateid(mississippi),stateid(tennessee)]", "funql_answer_parsed": ["florida", "georgia", "mississippi", "tennessee"], "prolog_answer_parsed": ["florida", "georgia", "mississippi", "tennessee"], "qid": "geo880_844", "answer": ["florida", "georgia", "mississippi", "tennessee"]}
{"query": "Which states border Alabama ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))", "funql": "answer(state(next_to_2(stateid('alabama'))))", "prolog_ans": "[florida,georgia,mississippi,tennessee]", "funql_ans": "[stateid(florida),stateid(georgia),stateid(mississippi),stateid(tennessee)]", "funql_answer_parsed": ["florida", "georgia", "mississippi", "tennessee"], "prolog_answer_parsed": ["florida", "georgia", "mississippi", "tennessee"], "qid": "geo880_845", "answer": ["florida", "georgia", "mississippi", "tennessee"]}
{"query": "Which states border Alaska ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(alaska))))", "funql": "answer(state(next_to_2(stateid('alaska'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_846", "answer": []}
{"query": "Which states border Arizona ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))", "funql": "answer(state(next_to_2(stateid('arizona'))))", "prolog_ans": "[california,colorado,nevada,'new mexico',utah]", "funql_ans": "[stateid(california),stateid(colorado),stateid(nevada),stateid('new mexico'),stateid(utah)]", "funql_answer_parsed": ["california", "colorado", "nevada", "new mexico", "utah"], "prolog_answer_parsed": ["california", "colorado", "nevada", "new mexico", "utah"], "qid": "geo880_847", "answer": ["california", "colorado", "nevada", "new mexico", "utah"]}
{"query": "Which states border Colorado ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(colorado))))", "funql": "answer(state(next_to_2(stateid('colorado'))))", "prolog_ans": "[arizona,kansas,nebraska,'new mexico',oklahoma,utah,wyoming]", "funql_ans": "[stateid(arizona),stateid(kansas),stateid(nebraska),stateid('new mexico'),stateid(oklahoma),stateid(utah),stateid(wyoming)]", "funql_answer_parsed": ["arizona", "kansas", "nebraska", "new mexico", "oklahoma", "utah", "wyoming"], "prolog_answer_parsed": ["arizona", "kansas", "nebraska", "new mexico", "oklahoma", "utah", "wyoming"], "qid": "geo880_848", "answer": ["arizona", "kansas", "nebraska", "new mexico", "oklahoma", "utah", "wyoming"]}
{"query": "Which states border Hawaii ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))", "funql": "answer(state(next_to_2(stateid('hawaii'))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_849", "answer": []}
{"query": "Which states border Illinois ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(illinois))))", "funql": "answer(state(next_to_2(stateid('illinois'))))", "prolog_ans": "[indiana,iowa,kentucky,missouri,wisconsin]", "funql_ans": "[stateid(indiana),stateid(iowa),stateid(kentucky),stateid(missouri),stateid(wisconsin)]", "funql_answer_parsed": ["indiana", "iowa", "kentucky", "missouri", "wisconsin"], "prolog_answer_parsed": ["indiana", "iowa", "kentucky", "missouri", "wisconsin"], "qid": "geo880_850", "answer": ["indiana", "iowa", "kentucky", "missouri", "wisconsin"]}
{"query": "Which states border Iowa ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))", "funql": "answer(state(next_to_2(stateid('iowa'))))", "prolog_ans": "[illinois,minnesota,missouri,nebraska,'south dakota',wisconsin]", "funql_ans": "[stateid(illinois),stateid(minnesota),stateid(missouri),stateid(nebraska),stateid('south dakota'),stateid(wisconsin)]", "funql_answer_parsed": ["illinois", "minnesota", "missouri", "nebraska", "south dakota", "wisconsin"], "prolog_answer_parsed": ["illinois", "minnesota", "missouri", "nebraska", "south dakota", "wisconsin"], "qid": "geo880_851", "answer": ["illinois", "minnesota", "missouri", "nebraska", "south dakota", "wisconsin"]}
{"query": "Which states border Kentucky ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))", "funql": "answer(state(next_to_2(stateid('kentucky'))))", "prolog_ans": "[illinois,indiana,missouri,ohio,tennessee,virginia,'west virginia']", "funql_ans": "[stateid(illinois),stateid(indiana),stateid(missouri),stateid(ohio),stateid(tennessee),stateid(virginia),stateid('west virginia')]", "funql_answer_parsed": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"], "prolog_answer_parsed": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"], "qid": "geo880_852", "answer": ["illinois", "indiana", "missouri", "ohio", "tennessee", "virginia", "west virginia"]}
{"query": "Which states border Michigan ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))", "funql": "answer(state(next_to_2(stateid('michigan'))))", "prolog_ans": "[indiana,ohio,wisconsin]", "funql_ans": "[stateid(indiana),stateid(ohio),stateid(wisconsin)]", "funql_answer_parsed": ["indiana", "ohio", "wisconsin"], "prolog_answer_parsed": ["indiana", "ohio", "wisconsin"], "qid": "geo880_853", "answer": ["indiana", "ohio", "wisconsin"]}
{"query": "Which states border New York ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid('new york'))))", "funql": "answer(state(next_to_2(stateid('new york'))))", "prolog_ans": "[connecticut,massachusetts,'new jersey',pennsylvania,vermont]", "funql_ans": "[stateid(connecticut),stateid(massachusetts),stateid('new jersey'),stateid(pennsylvania),stateid(vermont)]", "funql_answer_parsed": ["connecticut", "massachusetts", "new jersey", "pennsylvania", "vermont"], "prolog_answer_parsed": ["connecticut", "massachusetts", "new jersey", "pennsylvania", "vermont"], "qid": "geo880_854", "answer": ["connecticut", "massachusetts", "new jersey", "pennsylvania", "vermont"]}
{"query": "Which states border no other states ?", "prolog": "answer(A,(state(A),not((next_to(A,B),state(B)))))", "funql": "answer(exclude(state(all), next_to_2(state(all))))", "prolog_ans": "[alaska,hawaii]", "funql_ans": "[stateid(alaska),stateid(hawaii)]", "funql_answer_parsed": ["alaska", "hawaii"], "prolog_answer_parsed": ["alaska", "hawaii"], "qid": "geo880_855", "answer": ["alaska", "hawaii"]}
{"query": "Which states border South Dakota ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid('south dakota'))))", "funql": "answer(state(next_to_2(stateid('south dakota'))))", "prolog_ans": "[iowa,minnesota,montana,nebraska,'north dakota',wyoming]", "funql_ans": "[stateid(iowa),stateid(minnesota),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid(wyoming)]", "funql_answer_parsed": ["iowa", "minnesota", "montana", "nebraska", "north dakota", "wyoming"], "prolog_answer_parsed": ["iowa", "minnesota", "montana", "nebraska", "north dakota", "wyoming"], "qid": "geo880_856", "answer": ["iowa", "minnesota", "montana", "nebraska", "north dakota", "wyoming"]}
{"query": "Which states border states through which the Mississippi traverses ?", "prolog": "answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))", "funql": "answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))", "prolog_ans": "[alabama,arkansas,georgia,illinois,indiana,iowa,kansas,kentucky,louisiana,michigan,minnesota,mississippi,missouri,nebraska,'north carolina','north dakota',ohio,oklahoma,'south dakota',tennessee,texas,virginia,'west virginia',wisconsin]", "funql_ans": "[stateid(alabama),stateid(arkansas),stateid(georgia),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(nebraska),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(virginia),stateid('west virginia'),stateid(wisconsin)]", "funql_answer_parsed": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"], "prolog_answer_parsed": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"], "qid": "geo880_857", "answer": ["alabama", "arkansas", "georgia", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "michigan", "minnesota", "mississippi", "missouri", "nebraska", "north carolina", "north dakota", "ohio", "oklahoma", "south dakota", "tennessee", "texas", "virginia", "west virginia", "wisconsin"]}
{"query": "Which states border Texas ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))", "funql": "answer(state(next_to_2(stateid('texas'))))", "prolog_ans": "[arkansas,louisiana,'new mexico',oklahoma]", "funql_ans": "[stateid(arkansas),stateid(louisiana),stateid('new mexico'),stateid(oklahoma)]", "funql_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma"], "prolog_answer_parsed": ["arkansas", "louisiana", "new mexico", "oklahoma"], "qid": "geo880_858", "answer": ["arkansas", "louisiana", "new mexico", "oklahoma"]}
{"query": "Which states border the longest river in the USA ?", "prolog": "answer(A,(state(A),next_to(A,B),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(state(next_to_2(longest(river(loc_2(countryid('usa')))))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_859", "answer": []}
{"query": "Which states border the Missouri river ?", "prolog": "answer(A,(state(A),next_to(A,B),const(B,riverid(missouri)),river(B)))", "funql": "answer(state(next_to_2(river(riverid('missouri')))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_860", "answer": []}
{"query": "Which states border the state with the smallest area ?", "prolog": "answer(A,(state(A),next_to(A,B),smallest(C,(state(B),area(B,C)))))", "funql": "answer(state(next_to_2(smallest_one(area_1(state(all))))))", "prolog_ans": "[maryland,virginia]", "funql_ans": "[stateid(maryland),stateid(virginia)]", "funql_answer_parsed": ["maryland", "virginia"], "prolog_answer_parsed": ["maryland", "virginia"], "qid": "geo880_861", "answer": ["maryland", "virginia"]}
{"query": "Which state 's capital city is the largest ?", "prolog": "answer(C,(state(C),loc(B,C), largest(B,(capital(A,B),city(B),state(A)))))", "funql": "answer(state(loc_1(largest(city(capital_1(state(all)))))))", "prolog_ans": "[arizona]", "funql_ans": "[stateid(arizona)]", "funql_answer_parsed": ["arizona"], "prolog_answer_parsed": ["arizona"], "qid": "geo880_862", "answer": ["arizona"]}
{"query": "Which states do Colorado river flow through ?", "prolog": "answer(A,(state(A),const(B,riverid(colorado)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('colorado')))))", "prolog_ans": "[arizona,california,colorado,nevada,utah]", "funql_ans": "[stateid(arizona),stateid(california),stateid(colorado),stateid(nevada),stateid(utah)]", "funql_answer_parsed": ["arizona", "california", "colorado", "nevada", "utah"], "prolog_answer_parsed": ["arizona", "california", "colorado", "nevada", "utah"], "qid": "geo880_863", "answer": ["arizona", "california", "colorado", "nevada", "utah"]}
{"query": "Which states does not border Texas ?", "prolog": "answer(A,(state(A),not((next_to(A,B),const(B,stateid(texas))))))", "funql": "answer(exclude(state(all), next_to_2(stateid('texas'))))", "prolog_ans": "[alabama,alaska,arizona,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,hawaii,idaho,illinois,indiana,iowa,kansas,kentucky,maine,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new york','north carolina','north dakota',ohio,oregon,pennsylvania,'rhode island','south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(alabama),stateid(alaska),stateid(arizona),stateid(california),stateid(colorado),stateid(connecticut),stateid(delaware),stateid('district of columbia'),stateid(florida),stateid(georgia),stateid(hawaii),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(maine),stateid(maryland),stateid(massachusetts),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new hampshire'),stateid('new jersey'),stateid('new york'),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oregon),stateid(pennsylvania),stateid('rhode island'),stateid('south carolina'),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(vermont),stateid(virginia),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["alabama", "alaska", "arizona", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new york", "north carolina", "north dakota", "ohio", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alabama", "alaska", "arizona", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new york", "north carolina", "north dakota", "ohio", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_864", "answer": ["alabama", "alaska", "arizona", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "hawaii", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "maine", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new york", "north carolina", "north dakota", "ohio", "oregon", "pennsylvania", "rhode island", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"]}
{"query": "Which states does the Chattahoochee river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(chattahoochee)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('chattahoochee')))))", "prolog_ans": "[florida,georgia]", "funql_ans": "[stateid(florida),stateid(georgia)]", "funql_answer_parsed": ["florida", "georgia"], "prolog_answer_parsed": ["florida", "georgia"], "qid": "geo880_865", "answer": ["florida", "georgia"]}
{"query": "Which states does the Colorado river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(colorado)),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('colorado')))))", "prolog_ans": "[arizona,california,colorado,nevada,utah]", "funql_ans": "[stateid(arizona),stateid(california),stateid(colorado),stateid(nevada),stateid(utah)]", "funql_answer_parsed": ["arizona", "california", "colorado", "nevada", "utah"], "prolog_answer_parsed": ["arizona", "california", "colorado", "nevada", "utah"], "qid": "geo880_866", "answer": ["arizona", "california", "colorado", "nevada", "utah"]}
{"query": "Which states does the longest river cross ?", "prolog": "answer(A,(state(A),longest(B,river(B)),traverse(B,A)))", "funql": "answer(state(traverse_1(longest(river(all)))))", "prolog_ans": "[iowa,missouri,montana,nebraska,'north dakota','south dakota']", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "qid": "geo880_867", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "Which states does the longest river run through ?", "prolog": "answer(A,(state(A),longest(B,river(B)),traverse(B,A)))", "funql": "answer(state(traverse_1(longest(river(all)))))", "prolog_ans": "[iowa,missouri,montana,nebraska,'north dakota','south dakota']", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "qid": "geo880_868", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "Which states does the Mississippi river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('mississippi')))))", "prolog_ans": "[arkansas,illinois,iowa,kentucky,louisiana,minnesota,mississippi,missouri,tennessee,wisconsin]", "funql_ans": "[stateid(arkansas),stateid(illinois),stateid(iowa),stateid(kentucky),stateid(louisiana),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(tennessee),stateid(wisconsin)]", "funql_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "prolog_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "qid": "geo880_869", "answer": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"]}
{"query": "Which states does the Mississippi run through ?", "prolog": "answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))", "funql": "answer(state(traverse_1(riverid('mississippi'))))", "prolog_ans": "[arkansas,illinois,iowa,kentucky,louisiana,minnesota,mississippi,missouri,tennessee,wisconsin]", "funql_ans": "[stateid(arkansas),stateid(illinois),stateid(iowa),stateid(kentucky),stateid(louisiana),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(tennessee),stateid(wisconsin)]", "funql_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "prolog_answer_parsed": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"], "qid": "geo880_870", "answer": ["arkansas", "illinois", "iowa", "kentucky", "louisiana", "minnesota", "mississippi", "missouri", "tennessee", "wisconsin"]}
{"query": "Which states does the Missouri river pass through ?", "prolog": "answer(A,(state(A),const(B,riverid(missouri)),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('missouri')))))", "prolog_ans": "[iowa,missouri,montana,nebraska,'north dakota','south dakota']", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "qid": "geo880_871", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "Which states does the Missouri river run through ?", "prolog": "answer(A,(state(A),const(B,riverid(missouri)),river(B),traverse(B,A)))", "funql": "answer(state(traverse_1(river(riverid('missouri')))))", "prolog_ans": "[iowa,missouri,montana,nebraska,'north dakota','south dakota']", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "qid": "geo880_872", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "Which states have a major city named Austin ?", "prolog": "answer(A,(state(A),loc(B,A),major(B),city(B),const(B,cityid(austin,_))))", "funql": "answer(state(loc_1(major(city(cityid('austin', _))))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_873", "answer": ["texas"]}
{"query": "Which states have a river ?", "prolog": "answer(A,(state(A),loc(B,A),river(B)))", "funql": "answer(state(loc_1(river(all))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(alabama),stateid(arizona),stateid(arkansas),stateid(california),stateid(colorado),stateid(connecticut),stateid(delaware),stateid('district of columbia'),stateid(florida),stateid(georgia),stateid(idaho),stateid(illinois),stateid(indiana),stateid(iowa),stateid(kansas),stateid(kentucky),stateid(louisiana),stateid(maryland),stateid(massachusetts),stateid(michigan),stateid(minnesota),stateid(mississippi),stateid(missouri),stateid(montana),stateid(nebraska),stateid(nevada),stateid('new hampshire'),stateid('new jersey'),stateid('new mexico'),stateid('new york'),stateid('north carolina'),stateid('north dakota'),stateid(ohio),stateid(oklahoma),stateid(oregon),stateid(pennsylvania),stateid('south carolina'),stateid('south dakota'),stateid(tennessee),stateid(texas),stateid(utah),stateid(vermont),stateid(virginia),stateid(washington),stateid('west virginia'),stateid(wisconsin),stateid(wyoming)]", "funql_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_874", "answer": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"]}
{"query": "Which states have cities named Austin ?", "prolog": "answer(A,(state(A),loc(B,A),city(B),const(B,cityid(austin,_))))", "funql": "answer(state(loc_1(city(cityid('austin', _)))))", "prolog_ans": "[texas]", "funql_ans": "[stateid(texas)]", "funql_answer_parsed": ["texas"], "prolog_answer_parsed": ["texas"], "qid": "geo880_875", "answer": ["texas"]}
{"query": "Which states have points higher than the highest point in Colorado ?", "prolog": "answer(A,(state(A),loc(B,A),place(B),higher(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(colorado))))))", "funql": "answer(state(loc_1(place(higher_2(highest(place(loc_2(stateid('colorado')))))))))", "prolog_ans": "[alaska,california]", "funql_ans": "[stateid(alaska),stateid(california)]", "funql_answer_parsed": ["alaska", "california"], "prolog_answer_parsed": ["alaska", "california"], "qid": "geo880_876", "answer": ["alaska", "california"]}
{"query": "Which states have points that are higher than the highest point in Texas ?", "prolog": "answer(A,(state(A),loc(B,A),higher(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(texas))))))", "funql": "answer(state(loc_1(place(higher_2(highest(place(loc_2(stateid('texas')))))))))", "prolog_ans": "[alaska,arizona,california,colorado,hawaii,idaho,montana,nevada,'new mexico',oregon,utah,washington,wyoming]", "funql_ans": "[stateid(alaska),stateid(arizona),stateid(california),stateid(colorado),stateid(hawaii),stateid(idaho),stateid(montana),stateid(nevada),stateid('new mexico'),stateid(oregon),stateid(utah),stateid(washington),stateid(wyoming)]", "funql_answer_parsed": ["alaska", "arizona", "california", "colorado", "hawaii", "idaho", "montana", "nevada", "new mexico", "oregon", "utah", "washington", "wyoming"], "prolog_answer_parsed": ["alaska", "arizona", "california", "colorado", "hawaii", "idaho", "montana", "nevada", "new mexico", "oregon", "utah", "washington", "wyoming"], "qid": "geo880_877", "answer": ["alaska", "arizona", "california", "colorado", "hawaii", "idaho", "montana", "nevada", "new mexico", "oregon", "utah", "washington", "wyoming"]}
{"query": "Which states lie on the largest river in the United States ?", "prolog": "answer(A,(state(A),traverse(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))", "funql": "answer(state(traverse_1(longest(river(loc_2(countryid('usa')))))))", "prolog_ans": "[alabama,arizona,arkansas,california,colorado,connecticut,delaware,'district of columbia',florida,georgia,idaho,illinois,indiana,iowa,kansas,kentucky,louisiana,maryland,massachusetts,michigan,minnesota,mississippi,missouri,montana,nebraska,nevada,'new hampshire','new jersey','new mexico','new york','north carolina','north dakota',ohio,oklahoma,oregon,pennsylvania,'south carolina','south dakota',tennessee,texas,utah,vermont,virginia,washington,'west virginia',wisconsin,wyoming]", "funql_ans": "[stateid(iowa),stateid(missouri),stateid(montana),stateid(nebraska),stateid('north dakota'),stateid('south dakota')]", "funql_answer_parsed": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"], "prolog_answer_parsed": ["alabama", "arizona", "arkansas", "california", "colorado", "connecticut", "delaware", "district of columbia", "florida", "georgia", "idaho", "illinois", "indiana", "iowa", "kansas", "kentucky", "louisiana", "maryland", "massachusetts", "michigan", "minnesota", "mississippi", "missouri", "montana", "nebraska", "nevada", "new hampshire", "new jersey", "new mexico", "new york", "north carolina", "north dakota", "ohio", "oklahoma", "oregon", "pennsylvania", "south carolina", "south dakota", "tennessee", "texas", "utah", "vermont", "virginia", "washington", "west virginia", "wisconsin", "wyoming"], "qid": "geo880_878", "answer": ["iowa", "missouri", "montana", "nebraska", "north dakota", "south dakota"]}
{"query": "Which US city has the highest population density ?", "prolog": "answer(A,largest(B,(city(A),density(A,B))))", "funql": "answer(largest_one(density_1(city(all))))", "prolog_ans": "[]", "funql_ans": "[]", "funql_answer_parsed": [], "prolog_answer_parsed": [], "qid": "geo880_879", "answer": []}
