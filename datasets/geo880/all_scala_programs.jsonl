{"qid": "geo880_0", "query": "Give me the cities in Virginia .", "scala": "def answer(): Option[List[City]] = {\n    val virginiaState = geoModel.findState(\"virginia\")\n    virginiaState.map(_.cities)\n}"}
{"qid": "geo880_1", "query": "What are the high points of states surrounding Mississippi ?", "scala": "def answer(): Option[List[Option[String]]] = {\n    val statesSurroundingMississippi = geoModel.find_state(\"mississippi\").map(_.next_to.flatMap(geoModel.find_state))\n    val highPoints = statesSurroundingMississippi.map(_.map(_.high_point))\n    highPoints\n}"}
{"qid": "geo880_2", "query": "Name the rivers in Arkansas .", "scala": "def answer(): Option[List[River]] = {\n    val arkansasState = geoModel.findState(\"arkansas\")\n    arkansasState.map(_.rivers)\n}"}
{"qid": "geo880_3", "query": "Name all the rivers in Colorado .", "scala": "def answer(): Option[List[River]] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.rivers)\n}"}
{"qid": "geo880_4", "query": "Can you tell me the capital of Texas ?", "scala": "def answer(): Option[City] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.flatMap(_.capital)\n}"}
{"qid": "geo880_5", "query": "Could you tell me what is the highest point in the state of Oregon ?", "scala": "def answer(): Option[Place] = {\n    val oregonState = geoModel.findState(\"oregon\")\n    oregonState.map(_.highPoint)\n}"}
{"qid": "geo880_6", "query": "Count the states which have elevations lower than what Alabama has .", "scala": "def answer(): Option[Int] = {\n    val alabamaState = geoModel.findState(\"alabama\")\n    val statesWithLowerElevation = geoModel.states.filter(_.lowPoint.elevation < alabamaState.lowPoint.elevation)\n    Some(statesWithLowerElevation.length)\n}"}
{"qid": "geo880_7", "query": "Give me all the states of USA .", "scala": "def answer(): Option[List[State]] = {\n    geoModel.states\n}"}
{"qid": "geo880_8", "query": "Give me the cities in Texas .", "scala": "def answer(): Option[List[City]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.cities)\n}"}
{"qid": "geo880_10", "query": "Give me the cities in Virginia .", "scala": "def answer(): Option[List[City]] = {\n    geoModel.findState(\"virginia\").map(_.cities)\n}"}
{"qid": "geo880_11", "query": "Give me the cities which are in Texas .", "scala": "def answer(): Option[List[City]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.cities)\n}"}
{"qid": "geo880_12", "query": "Give me the lakes in California .", "scala": "def answer(): Option[List[Lake]] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.lakes)\n}"}
{"qid": "geo880_13", "query": "Give me the largest state .", "scala": "scala\ndef answer(): Option[State] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    largestState\n}"}
{"qid": "geo880_14", "query": "Give me the longest river that passes through the US .", "scala": "def answer(): Option[River] = {\n    val riversInUSA = geoModel.findCountry(\"usa\").map(_.rivers)\n    riversInUSA.map(_.maxBy(_.length))\n}"}
{"qid": "geo880_15", "query": "Give me the number of rivers in California .", "scala": "def answer(): Option[Int] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.rivers.length)\n}"}
{"qid": "geo880_16", "query": "Give me the states that border Utah .", "scala": "def answer(): Option[List[State]] = {\n    val utahState = geoModel.findState(\"utah\")\n    utahState.map(_.nextTo)\n}"}
{"qid": "geo880_17", "query": "How big is Alaska ?", "scala": "def answer(): Option[Int] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.size)\n}"}
{"qid": "geo880_18", "query": "How big is Massachusetts ?", "scala": "def answer(): Option[Int] = {\n    val massachusettsState = geoModel.findState(\"massachusetts\")\n    massachusettsState.map(_.area)\n}"}
{"qid": "geo880_19", "query": "How big is New Mexico ?", "scala": "def answer(): Option[Int] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    newMexicoState.map(_.size)\n}"}
{"qid": "geo880_20", "query": "How big is North Dakota ?", "scala": "def answer(): Option[Int] = {\n    val northDakotaState = geoModel.findState(\"north dakota\")\n    northDakotaState.map(_.size)\n}"}
{"qid": "geo880_21", "query": "How big is Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.size)\n}"}
{"qid": "geo880_22", "query": "How big is the city of New York ?", "scala": "def answer(): Option[Int] = {\n    val newYorkCity = geoModel.findCity(\"new york\")\n    newYorkCity.map(_.size)\n}"}
{"qid": "geo880_25", "query": "How high is Mount McKinley ?", "scala": "def answer(): Option[Int] = {\n    val mountMcKinley = geoModel.findMountain(\"mckinley\")\n    mountMcKinley.map(_.elevation)\n}"}
{"qid": "geo880_26", "query": "How high is the highest point in America ?", "scala": "def answer(): Option[Int] = {\n    val highestPoint = geoModel.places.maxBy(_.elevation)\n    highestPoint.map(_.elevation)\n}"}
{"qid": "geo880_27", "query": "How high is the highest point in Montana ?", "scala": "def answer(): Option[Int] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.highPoint.elevation)\n}"}
{"qid": "geo880_28", "query": "How high is the highest point in the largest state ?", "scala": "def answer(): Option[Int] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    largestState.map(_.highPoint.elevation)\n}"}
{"qid": "geo880_29", "query": "How high is the highest point of Alabama ?", "scala": "def answer(): Option[Int] = {\n    val alabamaState = geoModel.findState(\"alabama\")\n    alabamaState.map(_.highPoint.elevation)\n}"}
{"qid": "geo880_30", "query": "How high is the highest point of Delaware ?", "scala": "def answer(): Option[Int] = {\n    val delawareState = geoModel.findState(\"delaware\")\n    delawareState.map(_.highPoint.elevation)\n}"}
{"qid": "geo880_31", "query": "How high is the highest point of Florida ?", "scala": "def answer(): Option[Int] = {\n    val floridaState = geoModel.findState(\"florida\")\n    floridaState.map(_.highPoint.elevation)\n}"}
{"qid": "geo880_32", "query": "How high is the highest point of Louisiana ?", "scala": "def answer(): Option[Int] = {\n    val louisianaState = geoModel.findState(\"louisiana\")\n    louisianaState.map(_.highPoint.elevation)\n}"}
{"qid": "geo880_33", "query": "How large is Alaska ?", "scala": "def answer(): Option[Int] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.size)\n}"}
{"qid": "geo880_34", "query": "How large is Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.size)\n}"}
{"qid": "geo880_35", "query": "How large is the largest city in Alaska ?", "scala": "def answer(): Option[Int] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    val largestCitySize = alaskaState.map(_.cities.maxBy(_.size).size)\n    largestCitySize\n}"}
{"qid": "geo880_36", "query": "How long is Rio Grande ?", "scala": "def answer(): Option[Int] = {\n    val rioGrandeRiver = geoModel.findRiver(\"rio grande\")\n    rioGrandeRiver.map(_.length)\n}"}
{"qid": "geo880_37", "query": "How long is the Colorado river ?", "scala": "def answer(): Option[Int] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    coloradoRiver.map(_.length)\n}"}
{"qid": "geo880_38", "query": "How long is the Delaware river ?", "scala": "def answer(): Option[Int] = {\n    val delawareRiver = geoModel.findRiver(\"delaware\")\n    delawareRiver.map(_.length)\n}"}
{"qid": "geo880_39", "query": "How long is the longest river in California ?", "scala": "def answer(): Option[Int] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.rivers.maxBy(_.length).length)\n}"}
{"qid": "geo880_40", "query": "How long is the longest river in the USA ?", "scala": "def answer(): Option[Int] = {\n    val longestRiver = geoModel.rivers.maxBy(_.length)\n    longestRiver.map(_.length)\n}"}
{"qid": "geo880_41", "query": "How long is the Mississippi ?", "scala": "def answer(): Option[Int] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.length)\n}"}
{"qid": "geo880_42", "query": "How long is the Mississippi river ?", "scala": "def answer(): Option[Int] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.length)\n}"}
{"qid": "geo880_43", "query": "How long is the Mississippi river in miles ?", "scala": "def answer(): Option[Int] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.length)\n}"}
{"qid": "geo880_44", "query": "How long is the Missouri river ?", "scala": "def answer(): Option[Int] = {\n    val missouriRiver = geoModel.findRiver(\"missouri\")\n    missouriRiver.map(_.length)\n}"}
{"qid": "geo880_45", "query": "How long is the North Platte river ?", "scala": "def answer(): Option[Int] = {\n    val northPlatteRiver = geoModel.findRiver(\"north platte\")\n    northPlatteRiver.map(_.length)\n}"}
{"qid": "geo880_46", "query": "How long is the Ohio river ?", "scala": "def answer(): Option[Int] = {\n    val ohioRiver = geoModel.findRiver(\"ohio\")\n    ohioRiver.map(_.length)\n}"}
{"qid": "geo880_47", "query": "How long is the Rio Grande river ?", "scala": "def answer(): Option[Int] = {\n    val rioGrandeRiver = geoModel.findRiver(\"rio grande\")\n    rioGrandeRiver.map(_.length)\n}"}
{"qid": "geo880_48", "query": "How long is the shortest river in the USA ?", "scala": "def answer(): Option[Int] = {\n    val shortestRiver = geoModel.rivers.minBy(_.length)\n    shortestRiver.map(_.length)\n}"}
{"qid": "geo880_49", "query": "How many big cities are in Pennsylvania ?", "scala": "def answer(): Option[Int] = {\n    val citiesInPennsylvania = geoModel.findState(\"pennsylvania\").map(_.cities)\n    val bigCities = citiesInPennsylvania.map(_.count(_.isMajor))\n    bigCities\n}"}
{"qid": "geo880_50", "query": "How many capitals does Rhode Island have ?", "scala": "def answer(): Option[Int] = {\n    val rhodeIslandState = geoModel.findState(\"rhode island\")\n    val numCapitals = rhodeIslandState.map(_.cities.count(_.isCapital))\n    numCapitals\n}"}
{"qid": "geo880_51", "query": "How many cities are in Louisiana ?", "scala": "def answer(): Option[Int] = {\n    val louisianaState = geoModel.findState(\"louisiana\")\n    val numCities = louisianaState.map(_.cities.length)\n    numCities\n}"}
{"qid": "geo880_52", "query": "How many cities are in Montana ?", "scala": "def answer(): Option[Int] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.cities.length)\n}"}
{"qid": "geo880_53", "query": "How many cities are there in the United States ?", "scala": "def answer(): Option[Int] = {\n    val citiesInUS = geoModel.states.flatMap(_.cities)\n    Some(citiesInUS.length)\n}"}
{"qid": "geo880_54", "query": "How many cities are there in the US ?", "scala": "def answer(): Option[Int] = {\n    val cities = geoModel.states.flatMap(_.cities)\n    Some(cities.length)\n}"}
{"qid": "geo880_55", "query": "How many cities are there in US ?", "scala": "def answer(): Option[Int] = {\n    val citiesInUSA = geoModel.findCountry(\"usa\").map(_.cities)\n    citiesInUSA.map(_.length)\n}"}
{"qid": "geo880_56", "query": "How many cities are there in USA ?", "scala": "def answer(): Option[Int] = {\n    val citiesInUSA = geoModel.findCountry(\"usa\").map(_.cities)\n    citiesInUSA.map(_.length)\n}"}
{"qid": "geo880_57", "query": "How many cities does Texas have ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.cities.length)\n}"}
{"qid": "geo880_58", "query": "How many cities does the USA have ?", "scala": "def answer(): Option[Int] = {\n    val citiesInUSA = geoModel.findCountry(\"usa\").map(_.cities)\n    citiesInUSA.map(_.length)\n}"}
{"qid": "geo880_59", "query": "How many cities named Austin are there in the USA ?", "scala": "def answer(): Option[Int] = {\n    val austinCities = geoModel.cities.filter(_.name == \"austin\")\n    austinCities.map(_.length)\n}"}
{"qid": "geo880_60", "query": "How many citizens does the biggest city have in the USA ?", "scala": "def answer(): Option[Int] = {\n    val biggestCity = geoModel.cities.maxBy(_.population)\n    biggestCity.map(_.population)\n}"}
{"qid": "geo880_61", "query": "How many citizens in Alabama ?", "scala": "def answer(): Option[Int] = {\n    val alabamaState = geoModel.findState(\"alabama\")\n    alabamaState.map(_.population)\n}"}
{"qid": "geo880_62", "query": "How many citizens in Boulder ?", "scala": "def answer(): Option[Int] = {\n    val boulderCity = geoModel.findCity(\"boulder\")\n    boulderCity.map(_.population)\n}"}
{"qid": "geo880_63", "query": "How many citizens live in California ?", "scala": "def answer(): Option[Int] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.population)\n}"}
{"qid": "geo880_64", "query": "How many Colorado rivers are there ?", "scala": "def answer(): Option[Int] = {\n    val coloradoRivers = geoModel.rivers.filter(_.name == \"colorado\")\n    Some(coloradoRivers.length)\n}"}
{"qid": "geo880_65", "query": "How many inhabitants does Montgomery have ?", "scala": "def answer(): Option[Int] = {\n    val montgomeryCity = geoModel.findCity(\"montgomery\")\n    montgomeryCity.map(_.population)\n}"}
{"qid": "geo880_66", "query": "How many major cities are in Arizona ?", "scala": "def answer(): Option[Int] = {\n    val arizonaState = geoModel.findState(\"arizona\")\n    val majorCities = arizonaState.map(_.cities.filter(_.isMajor))\n    majorCities.map(_.length)\n}"}
{"qid": "geo880_67", "query": "How many major cities are in Florida ?", "scala": "def answer(): Option[Int] = {\n    val floridaState = geoModel.findState(\"florida\")\n    val majorCities = floridaState.map(_.cities.filter(_.isMajor))\n    majorCities.map(_.length)\n}"}
{"qid": "geo880_68", "query": "How many major cities are in states bordering Nebraska ?", "scala": "def answer(): Option[Int] = {\n    val nebraskaState = geoModel.findState(\"nebraska\")\n    val majorCities = nebraskaState.map(_.nextTo.flatMap(_.cities.filter(_.isMajor)))\n    majorCities.map(_.length)\n}"}
{"qid": "geo880_69", "query": "How many major cities are in states bordering Utah ?", "scala": "def answer(): Option[Int] = {\n    val utahState = geoModel.findState(\"utah\")\n    val statesBorderingUtah = utahState.map(_.nextTo)\n    val citiesInStatesBorderingUtah = statesBorderingUtah.map(_.flatMap(_.cities))\n    val majorCities = citiesInStatesBorderingUtah.map(_.count(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_70", "query": "How many major cities are in Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    val majorCities = texasState.map(_.cities.filter(_.isMajor))\n    majorCities.map(_.length)\n}"}
{"qid": "geo880_71", "query": "How many major cities are there ?", "scala": "def answer(): Option[Int] = {\n    val majorCities = geoModel.cities.filter(_.isMajor)\n    Some(majorCities.length)\n}"}
{"qid": "geo880_72", "query": "How many major cities are there in Oregon ?", "scala": "def answer(): Option[Int] = {\n    val oregonState = geoModel.findState(\"oregon\")\n    val majorCities = oregonState.map(_.cities.filter(_.isMajor))\n    majorCities.map(_.length)\n}"}
{"qid": "geo880_73", "query": "How many major rivers cross Ohio ?", "scala": "def answer(): Option[Int] = {\n    val ohioState = geoModel.findState(\"ohio\")\n    ohioState.map(_.rivers.count(_.isMajor))\n}"}
{"qid": "geo880_74", "query": "How many people are in the state of Nevada ?", "scala": "def answer(): Option[Int] = {\n    val nevadaState = geoModel.findState(\"nevada\")\n    nevadaState.map(_.population)\n}"}
{"qid": "geo880_75", "query": "How many people are there in Iowa ?", "scala": "def answer(): Option[Int] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    iowaState.map(_.population)\n}"}
{"qid": "geo880_76", "query": "How many people are there in New York ?", "scala": "def answer(): Option[Int] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.population)\n}"}
{"qid": "geo880_77", "query": "How many people in Boulder ?", "scala": "def answer(): Option[Int] = {\n    val boulderCity = geoModel.findCity(\"boulder\")\n    boulderCity.map(_.population)\n}"}
{"qid": "geo880_78", "query": "How many people live in Austin ?", "scala": "def answer(): Option[Int] = {\n    val austinCity = geoModel.findCity(\"austin\")\n    austinCity.map(_.population)\n}"}
{"qid": "geo880_79", "query": "How many people live in Austin Texas ?", "scala": "def answer(): Option[Int] = {\n    val austinCity = geoModel.findCity(\"austin\", Some(\"tx\"))\n    austinCity.map(_.population)\n}"}
{"qid": "geo880_80", "query": "How many people live in California ?", "scala": "def answer(): Option[Int] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.population)\n}"}
{"qid": "geo880_81", "query": "How many people live in Chicago ?", "scala": "def answer(): Option[Int] = {\n    val chicagoCity = geoModel.findCity(\"chicago\")\n    chicagoCity.map(_.population)\n}"}
{"qid": "geo880_82", "query": "How many people live in Detroit ?", "scala": "def answer(): Option[Int] = {\n    val detroitCity = geoModel.findCity(\"detroit\")\n    detroitCity.map(_.population)\n}"}
{"qid": "geo880_83", "query": "How many people live in Hawaii ?", "scala": "def answer(): Option[Int] = {\n    val hawaiiState = geoModel.findState(\"hawaii\")\n    hawaiiState.map(_.population)\n}"}
{"qid": "geo880_84", "query": "How many people live in Houston ?", "scala": "def answer(): Option[Int] = {\n    val houstonCity = geoModel.findCity(\"houston\")\n    houstonCity.map(_.population)\n}"}
{"qid": "geo880_85", "query": "How many people live in Kalamazoo ?", "scala": "def answer(): Option[Int] = {\n    val kalamazooCity = geoModel.findCity(\"kalamazoo\")\n    kalamazooCity.map(_.population)\n}"}
{"qid": "geo880_86", "query": "How many people live in Kansas ?", "scala": "def answer(): Option[Int] = {\n    val kansasState = geoModel.findState(\"kansas\")\n    kansasState.map(_.population)\n}"}
{"qid": "geo880_87", "query": "How many people live in Minneapolis Minnesota ?", "scala": "def answer(): Option[Int] = {\n    val minneapolisCity = geoModel.findCity(\"minneapolis\", Some(\"mn\"))\n    minneapolisCity.map(_.population)\n}"}
{"qid": "geo880_88", "query": "How many people live in Mississippi ?", "scala": "def answer(): Option[Int] = {\n    val mississippiState = geoModel.findState(\"mississippi\")\n    mississippiState.map(_.population)\n}"}
{"qid": "geo880_89", "query": "How many people live in Montana ?", "scala": "def answer(): Option[Int] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.population)\n}"}
{"qid": "geo880_90", "query": "How many people live in New Hampshire ?", "scala": "def answer(): Option[Int] = {\n    val newHampshireState = geoModel.findState(\"new hampshire\")\n    newHampshireState.map(_.population)\n}"}
{"qid": "geo880_91", "query": "How many people live in New Mexico ?", "scala": "def answer(): Option[Int] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    newMexicoState.map(_.population)\n}"}
{"qid": "geo880_92", "query": "How many people live in New York ?", "scala": "def answer(): Option[Int] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.population)\n}"}
{"qid": "geo880_93", "query": "How many people live in Rhode Island ?", "scala": "def answer(): Option[Int] = {\n    val rhodeIslandState = geoModel.findState(\"rhode island\")\n    rhodeIslandState.map(_.population)\n}"}
{"qid": "geo880_94", "query": "How many people live in Riverside ?", "scala": "def answer(): Option[Int] = {\n    val riversideCity = geoModel.findCity(\"riverside\")\n    riversideCity.map(_.population)\n}"}
{"qid": "geo880_95", "query": "How many people live in San Francisco ?", "scala": "def answer(): Option[Int] = {\n    val sanFranciscoCity = geoModel.findCity(\"san francisco\")\n    sanFranciscoCity.map(_.population)\n}"}
{"qid": "geo880_96", "query": "How many people live in South Dakota ?", "scala": "def answer(): Option[Int] = {\n    val southDakotaState = geoModel.findState(\"south dakota\")\n    southDakotaState.map(_.population)\n}"}
{"qid": "geo880_97", "query": "How many people live in Spokane Washington ?", "scala": "def answer(): Option[Int] = {\n    val spokaneCity = geoModel.findCity(\"spokane\", Some(\"wa\"))\n    spokaneCity.map(_.population)\n}"}
{"qid": "geo880_98", "query": "How many people live in Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.population)\n}"}
{"qid": "geo880_99", "query": "How many people live in the biggest city in New York state ?", "scala": "def answer(): Option[Int] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    val biggestCity = newYorkState.map(_.cities.maxBy(_.population))\n    biggestCity.map(_.population)\n}"}
{"qid": "geo880_100", "query": "How many people live in the capital of Georgia ?", "scala": "def answer(): Option[Int] = {\n    val georgiaState = geoModel.findState(\"georgia\")\n    georgiaState.flatMap(_.capital.map(_.population))\n}"}
{"qid": "geo880_101", "query": "How many people live in the capital of Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    val capitalPopulation = texasState.flatMap(_.capital.map(_.population))\n    capitalPopulation\n}"}
{"qid": "geo880_102", "query": "How many people live in the smallest state bordering Wyoming ?", "scala": "def answer(): Option[Int] = {\n    val wyomingState = geoModel.findState(\"wyoming\")\n    val smallestState = wyomingState.map(_.nextTo.minBy(_.size))\n    smallestState.map(_.population)\n}"}
{"qid": "geo880_103", "query": "How many people live in the state with the largest population density ?", "scala": "def answer(): Option[Int] = {\n    val stateWithLargestDensity = geoModel.states.maxBy(_.density)\n    stateWithLargestDensity.map(_.population)\n}"}
{"qid": "geo880_104", "query": "How many people live in the United States ?", "scala": "def answer(): Option[Int] = {\n    val usaPopulation = geoModel.findCountry(\"usa\").map(_.population)\n    usaPopulation\n}"}
{"qid": "geo880_105", "query": "How many people live in Washington ?", "scala": "def answer(): Option[Int] = {\n    val washingtonState = geoModel.findState(\"washington\")\n    washingtonState.map(_.population)\n}"}
{"qid": "geo880_107", "query": "How many people lived in Austin ?", "scala": "def answer(): Option[Int] = {\n    val austinCity = geoModel.findCity(\"austin\")\n    austinCity.map(_.population)\n}"}
{"qid": "geo880_108", "query": "How many people reside in Utah ?", "scala": "def answer(): Option[Int] = {\n    val utahState = geoModel.findState(\"utah\")\n    utahState.map(_.population)\n}"}
{"qid": "geo880_109", "query": "How many people stay in Utah ?", "scala": "def answer(): Option[Int] = {\n    val utahState = geoModel.findState(\"utah\")\n    utahState.map(_.population)\n}"}
{"qid": "geo880_110", "query": "How many residents live in Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.population)\n}"}
{"qid": "geo880_111", "query": "How many rivers are called Colorado ?", "scala": "def answer(): Option[Int] = {\n    val coloradoRivers = geoModel.rivers.filter(_.name == \"colorado\")\n    Some(coloradoRivers.length)\n}"}
{"qid": "geo880_112", "query": "How many rivers are found in Colorado ?", "scala": "def answer(): Option[Int] = {\n    val riversInColorado = geoModel.findState(\"colorado\").map(_.rivers)\n    riversInColorado.map(_.length)\n}"}
{"qid": "geo880_113", "query": "How many rivers are in Colorado ?", "scala": "def answer(): Option[Int] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.rivers.length)\n}"}
{"qid": "geo880_114", "query": "How many rivers are in Iowa ?", "scala": "def answer(): Option[Int] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    iowaState.map(_.rivers.length)\n}"}
{"qid": "geo880_115", "query": "How many rivers are in Missouri ?", "scala": "def answer(): Option[Int] = {\n    val riversInMissouri = geoModel.findState(\"missouri\").map(_.rivers.length)\n    riversInMissouri\n}"}
{"qid": "geo880_116", "query": "How many rivers are in New York ?", "scala": "def answer(): Option[Int] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.rivers.length)\n}"}
{"qid": "geo880_117", "query": "How many rivers are in the state that has the most rivers ?", "scala": "def answer(): Option[Int] = {\n    val statesWithMostRivers = geoModel.states.maxBy(_.rivers.length)\n    statesWithMostRivers.map(_.rivers.length)\n}"}
{"qid": "geo880_118", "query": "How many rivers are in the state with the highest point ?", "scala": "def answer(): Option[Int] = {\n    val highestState = geoModel.states.maxBy(_.highPoint.elevation)\n    highestState.map(_.rivers.length)\n}"}
{"qid": "geo880_119", "query": "How many rivers are in the state with the largest population ?", "scala": "def answer(): Option[Int] = {\n    val stateWithLargestPopulation = geoModel.states.maxBy(_.population)\n    stateWithLargestPopulation.map(_.rivers.length)\n}"}
{"qid": "geo880_120", "query": "How many rivers are there in Idaho ?", "scala": "def answer(): Option[Int] = {\n    val idahoState = geoModel.findState(\"idaho\")\n    idahoState.map(_.rivers.length)\n}"}
{"qid": "geo880_121", "query": "How many rivers are there in Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.rivers.length)\n}"}
{"qid": "geo880_122", "query": "How many rivers are there in US ?", "scala": "def answer(): Option[Int] = {\n    val riversInUSA = geoModel.findCountry(\"usa\").map(_.rivers)\n    riversInUSA.map(_.length)\n}"}
{"qid": "geo880_123", "query": "How many rivers do not traverse the state with the capital Albany ?", "scala": "def answer(): Option[Int] = {\n    val albanyState = geoModel.states.find(s => s.capital.exists(_.name == \"albany\"))\n    val riversNotTraversingAlbany = albanyState.map(albany => geoModel.rivers.filter(!_.traverses.contains(albany)))\n    riversNotTraversingAlbany.map(_.length)\n}"}
{"qid": "geo880_124", "query": "How many rivers does Alaska have ?", "scala": "def answer(): Option[Int] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.rivers.length)\n}"}
{"qid": "geo880_125", "query": "How many rivers does Colorado have ?", "scala": "def answer(): Option[Int] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.rivers.length)\n}"}
{"qid": "geo880_126", "query": "How many rivers in Texas are longer than the Red ?", "scala": "def answer(): Option[Int] = {\n    val redRiver = geoModel.findRiver(\"red\")\n    val texasState = geoModel.findState(\"texas\")\n    val riversLongerThanRed = texasState.map(_.rivers.filter(_.length > redRiver.length))\n    riversLongerThanRed.map(_.length)\n}"}
{"qid": "geo880_127", "query": "How many rivers in Washington ?", "scala": "def answer(): Option[Int] = {\n    val washingtonState = geoModel.findState(\"washington\")\n    washingtonState.map(_.rivers.length)\n}"}
{"qid": "geo880_128", "query": "How many rivers run through Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.rivers.length)\n}"}
{"qid": "geo880_130", "query": "How many square kilometers in the US ?", "scala": "def answer(): Option[Int] = {\n    val usaCountry = geoModel.findCountry(\"usa\")\n    usaCountry.map(_.area)\n}"}
{"qid": "geo880_131", "query": "How many states are in the United States ?", "scala": "def answer(): Option[Int] = {\n    val usa = geoModel.findCountry(\"usa\")\n    usa.map(_.states.length)\n}"}
{"qid": "geo880_132", "query": "How many states are in the USA ?", "scala": "def answer(): Option[Int] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    statesInUSA.map(_.length)\n}"}
{"qid": "geo880_134", "query": "How many states are there ?", "scala": "def answer(): Option[Int] = {\n    Some(geoModel.states.length)\n}"}
{"qid": "geo880_135", "query": "How many states are there in the USA ?", "scala": "def answer(): Option[Int] = {\n    val numStates = geoModel.states.length\n    Some(numStates)\n}"}
{"qid": "geo880_136", "query": "How many states are there in United States ?", "scala": "def answer(): Option[Int] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    statesInUSA.map(_.length)\n}"}
{"qid": "geo880_137", "query": "How many states border Alaska ?", "scala": "def answer(): Option[Int] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    val numBorderingStates = alaskaState.map(_.nextTo.length)\n    numBorderingStates\n}"}
{"qid": "geo880_138", "query": "How many states border at least one other state ?", "scala": "def answer(): Option[Int] = {\n    val statesWithBorders = geoModel.states.filter(_.nextTo.nonEmpty)\n    Some(statesWithBorders.length)\n}"}
{"qid": "geo880_139", "query": "How many states border Colorado and border New Mexico ?", "scala": "def answer(): Option[Int] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    val statesBorderingColorado = coloradoState.map(_.nextTo)\n    val statesBorderingNewMexico = newMexicoState.map(_.nextTo)\n    val intersection = for {\n        borderingColorado <- statesBorderingColorado\n        borderingNewMexico <- statesBorderingNewMexico\n    } yield borderingColorado.intersect(borderingNewMexico)\n    intersection.map(_.length)\n}"}
{"qid": "geo880_140", "query": "How many states border Hawaii ?", "scala": "def answer(): Option[Int] = {\n    val hawaiiState = geoModel.findState(\"hawaii\")\n    hawaiiState.map(_.nextTo.length)\n}"}
{"qid": "geo880_141", "query": "How many states border Iowa ?", "scala": "def answer(): Option[Int] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    val numBorderingStates = iowaState.map(_.nextTo.length)\n    numBorderingStates\n}"}
{"qid": "geo880_142", "query": "How many states border on the state whose capital is Boston ?", "scala": "def answer(): Option[Int] = {\n    val bostonCity = geoModel.findCity(\"boston\")\n    val statesBorderingBoston = bostonCity.flatMap(_.state).map(_.nextTo.length)\n    statesBorderingBoston\n}"}
{"qid": "geo880_143", "query": "How many states border Tennessee ?", "scala": "def answer(): Option[Int] = {\n    val statesBorderingTennessee = geoModel.findState(\"tennessee\").map(_.nextTo.length)\n    statesBorderingTennessee\n}"}
{"qid": "geo880_144", "query": "How many states border Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.nextTo.length)\n}"}
{"qid": "geo880_145", "query": "How many states border the largest state ?", "scala": "def answer(): Option[Int] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    largestState.map(_.nextTo.length)\n}"}
{"qid": "geo880_147", "query": "How many states border the state that borders the most states ?", "scala": "def answer(): Option[Int] = {\n    val stateWithMostBorders = geoModel.states.maxBy(_.nextTo.length)\n    stateWithMostBorders.map(_.nextTo.length)\n}"}
{"qid": "geo880_148", "query": "How many states border the state with the largest population ?", "scala": "def answer(): Option[Int] = {\n    val largestState = geoModel.states.maxBy(_.population)\n    val numBorderingStates = largestState.nextTo.length\n    Some(numBorderingStates)\n}"}
{"qid": "geo880_149", "query": "How many states do not have rivers ?", "scala": "def answer(): Option[Int] = {\n    val statesWithoutRivers = geoModel.states.filter(_.rivers.isEmpty)\n    Some(statesWithoutRivers.length)\n}"}
{"qid": "geo880_150", "query": "How many states does Iowa border ?", "scala": "def answer(): Option[Int] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    val numBorderingStates = iowaState.map(_.nextTo.length)\n    numBorderingStates\n}"}
{"qid": "geo880_151", "query": "How many states does Missouri border ?", "scala": "def answer(): Option[Int] = {\n    val missouriState = geoModel.findState(\"missouri\")\n    missouriState.map(_.nextTo.length)\n}"}
{"qid": "geo880_152", "query": "How many states does Tennessee border ?", "scala": "def answer(): Option[Int] = {\n    val tennesseeState = geoModel.findState(\"tennessee\")\n    tennesseeState.map(_.nextTo.length)\n}"}
{"qid": "geo880_153", "query": "How many states does the Colorado river flow through ?", "scala": "def answer(): Option[Int] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    coloradoRiver.map(_.traverses.length)\n}"}
{"qid": "geo880_154", "query": "How many states does the Colorado river run through ?", "scala": "def answer(): Option[Int] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    val numStates = coloradoRiver.map(_.traverses.length)\n    numStates\n}"}
{"qid": "geo880_155", "query": "How many states does the Mississippi river run through ?", "scala": "def answer(): Option[Int] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.traverses.length)\n}"}
{"qid": "geo880_156", "query": "How many states does the Mississippi run through ?", "scala": "def answer(): Option[Int] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val numStates = mississippiRiver.map(_.traverses.length)\n    numStates\n}"}
{"qid": "geo880_157", "query": "How many states does the Missouri river run through ?", "scala": "def answer(): Option[Int] = {\n    val missouriRiver = geoModel.findRiver(\"missouri\")\n    missouriRiver.map(_.traverses.length)\n}"}
{"qid": "geo880_158", "query": "How many states does USA have ?", "scala": "def answer(): Option[Int] = {\n    val usaCountry = geoModel.findCountry(\"usa\")\n    usaCountry.map(_.states.length)\n}"}
{"qid": "geo880_159", "query": "How many states have a city called Rochester ?", "scala": "def answer(): Option[Int] = {\n    val rochesterCities = geoModel.cities.filter(_.name == \"Rochester\")\n    val uniqueStates = rochesterCities.map(_.state).distinct\n    uniqueStates.length\n}"}
{"qid": "geo880_160", "query": "How many states have a city named Springfield ?", "scala": "def answer(): Option[Int] = {\n    val count = geoModel.states.flatMap(_.cities).count(_.name == \"springfield\")\n    Some(count)\n}"}
{"qid": "geo880_161", "query": "How many states have a higher point than the highest point of the state with the largest capital city in the US ?", "scala": "def answer(): Option[Int] = {\n    val largestCapitalCity = geoModel.cities.maxBy(city => if (city.isCapital) city.size else 0)\n    val largestCapitalState = largestCapitalCity.state\n    val highestPointInLargestCapitalState = largestCapitalState.highPoint\n    val statesWithHigherHighPoint = geoModel.states.filter(_.highPoint.elevation > highestPointInLargestCapitalState.elevation)\n    Some(statesWithHigherHighPoint.length)\n}"}
{"qid": "geo880_162", "query": "How many states have cities named Austin ?", "scala": "def answer(): Option[Int] = {\n    val count = geoModel.states.flatMap(_.cities).count(_.name == \"austin\")\n    Some(count)\n}"}
{"qid": "geo880_163", "query": "How many states have cities or towns named Springfield ?", "scala": "def answer(): Option[Int] = {\n    val statesWithSpringfield = geoModel.states.filter(_.cities.exists(_.name == \"springfield\"))\n    Some(statesWithSpringfield.length)\n}"}
{"qid": "geo880_164", "query": "How many states have major rivers ?", "scala": "def answer(): Option[Int] = {\n    val statesWithMajorRivers = geoModel.states.filter(_.rivers.exists(_.isMajor))\n    Some(statesWithMajorRivers.length)\n}"}
{"qid": "geo880_165", "query": "How many states in the US does the shortest river run through ?", "scala": "def answer(): Option[Int] = {\n    val shortestRiver = geoModel.rivers.minBy(_.length)\n    val statesTraversedByShortestRiver = shortestRiver.map(_.traverses.length)\n    statesTraversedByShortestRiver\n}"}
{"qid": "geo880_166", "query": "How much population does Texas have ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.population)\n}"}
{"qid": "geo880_168", "query": "How tall is the highest point in Montana ?", "scala": "def answer(): Option[Int] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.highPoint.elevation)\n}"}
{"qid": "geo880_169", "query": "In what state is Mount McKinley ?", "scala": "def answer(): Option[State] = {\n    val mountMcKinley = geoModel.findMountain(\"mckinley\")\n    mountMcKinley.map(_.state)\n}"}
{"qid": "geo880_170", "query": "In which state does the highest point in USA exist ?", "scala": "def answer(): Option[State] = {\n    val highestPoint = geoModel.places.maxBy(_.elevation)\n    highestPoint.state\n}"}
{"qid": "geo880_172", "query": "Iowa borders how many states ?", "scala": "def answer(): Option[Int] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    iowaState.map(_.nextTo.length)\n}"}
{"qid": "geo880_173", "query": "List the states .", "scala": "def answer(): Option[List[State]] = {\n    Some(geoModel.states)\n}"}
{"qid": "geo880_174", "query": "Name all the lakes of US .", "scala": "def answer(): Option[List[Lake]] = {\n    geoModel.findCountry(\"usa\").map(_.lakes)\n}"}
{"qid": "geo880_175", "query": "Name all the rivers in Colorado .", "scala": "def answer(): Option[List[River]] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.rivers)\n}"}
{"qid": "geo880_176", "query": "Name the 50 capitals in the USA .", "scala": "def answer(): Option[List[City]] = {\n    val capitalsInUSA = geoModel.states.flatMap(_.cities.filter(city => city.isCapital && city.country.name == \"USA\"))\n    Some(capitalsInUSA.take(50))\n}"}
{"qid": "geo880_177", "query": "Name the longest river in US .", "scala": "def answer(): Option[River] = {\n    val longestRiver = geoModel.rivers.maxBy(_.length)\n    longestRiver\n}"}
{"qid": "geo880_178", "query": "Name the major lakes in Michigan .", "scala": "def answer(): Option[List[Lake]] = {\n    val michiganState = geoModel.findState(\"michigan\")\n    val majorLakes = michiganState.map(_.lakes.filter(_.isMajor))\n    majorLakes\n}"}
{"qid": "geo880_179", "query": "Name the major rivers in Florida .", "scala": "def answer(): Option[List[River]] = {\n    val riversInFlorida = geoModel.findState(\"florida\").map(_.rivers)\n    val majorRivers = riversInFlorida.map(_.filter(_.isMajor))\n    majorRivers\n}"}
{"qid": "geo880_180", "query": "Name the rivers in Arkansas .", "scala": "def answer(): Option[List[River]] = {\n    val arkansasRivers = geoModel.findState(\"arkansas\").map(_.rivers)\n    arkansasRivers\n}"}
{"qid": "geo880_181", "query": "Name the states which have no surrounding states .", "scala": "def answer(): Option[List[State]] = {\n    val statesWithNoNeighbors = geoModel.states.filter(_.nextTo.isEmpty)\n    Some(statesWithNoNeighbors)\n}"}
{"qid": "geo880_182", "query": "Number of citizens in Boulder ?", "scala": "def answer(): Option[Int] = {\n    val boulderCity = geoModel.findCity(\"boulder\")\n    boulderCity.map(_.population)\n}"}
{"qid": "geo880_183", "query": "Number of people in Boulder ?", "scala": "def answer(): Option[Int] = {\n    val boulderCity = geoModel.findCity(\"boulder\")\n    boulderCity.map(_.population)\n}"}
{"qid": "geo880_184", "query": "Number of states bordering Iowa ?", "scala": "def answer(): Option[Int] = {\n    val statesBorderingIowa = geoModel.findState(\"iowa\").map(_.nextTo)\n    statesBorderingIowa.map(_.length)\n}"}
{"qid": "geo880_185", "query": "Of the states washed by the Mississippi river which has the lowest point ?", "scala": "def answer(): Option[State] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val statesWashedByMississippi = mississippiRiver.map(_.traverses)\n    val stateWithLowestPoint = statesWashedByMississippi.map(_.minBy(_.lowPoint.elevation))\n    stateWithLowestPoint\n}"}
{"qid": "geo880_186", "query": "People in Boulder ?", "scala": "def answer(): Option[Int] = {\n    val boulderCity = geoModel.findCity(\"boulder\")\n    boulderCity.map(_.population)\n}"}
{"qid": "geo880_187", "query": "Population of Boulder ?", "scala": "def answer(): Option[Int] = {\n    val boulderCity = geoModel.findCity(\"boulder\")\n    boulderCity.map(_.population)\n}"}
{"qid": "geo880_188", "query": "Rivers in New York ?", "scala": "def answer(): Option[List[River]] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.rivers)\n}"}
{"qid": "geo880_189", "query": "Sacramento is the capital of which state ?", "scala": "def answer(): Option[State] = {\n    val sacramentoCity = geoModel.findCity(\"sacramento\")\n    sacramentoCity.map(_.state)\n}"}
{"qid": "geo880_190", "query": "San Antonio is in what state ?", "scala": "def answer(): Option[State] = {\n    val sanAntonioCity = geoModel.findCity(\"san antonio\")\n    sanAntonioCity.map(_.state)\n}"}
{"qid": "geo880_191", "query": "Show major cities in Colorado .", "scala": "def answer(): Option[List[City]] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.cities.filter(_.isMajor))\n}"}
{"qid": "geo880_193", "query": "State the state with the largest area .", "scala": "def answer(): Option[State] = {\n    val stateWithLargestArea = geoModel.states.maxBy(_.area)\n    stateWithLargestArea\n}"}
{"qid": "geo880_194", "query": "States bordering Iowa ?", "scala": "def answer(): Option[List[State]] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    iowaState.map(_.nextTo)\n}"}
{"qid": "geo880_195", "query": "Tell me what cities are in Texas .", "scala": "def answer(): Option[List[City]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.cities)\n}"}
{"qid": "geo880_196", "query": "Through which states does the longest river in Texas run ?", "scala": "def answer(): Option[List[State]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val longestRiverInTexas = texasState.flatMap(_.rivers.maxByOption(_.length))\n    longestRiverInTexas.map(_.traverses)\n}"}
{"qid": "geo880_197", "query": "Through which states does the Mississippi flow ?", "scala": "def answer(): Option[List[State]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.traverses)\n}"}
{"qid": "geo880_198", "query": "Through which states does the Mississippi run ?", "scala": "def answer(): Option[List[State]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.traverses)\n}"}
{"qid": "geo880_199", "query": "What are all the rivers in Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.rivers)\n}"}
{"qid": "geo880_200", "query": "What are major rivers in Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val majorRivers = texasState.map(_.rivers.filter(_.isMajor))\n    majorRivers\n}"}
{"qid": "geo880_202", "query": "What are the capital cities of the states which border Texas ?", "scala": "def answer(): Option[List[City]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val borderingStates = texasState.map(_.nextTo)\n    val capitalCities = borderingStates.map(_.flatMap(_.capital))\n    capitalCities\n}"}
{"qid": "geo880_203", "query": "What is the capital city in Texas ?", "scala": "def answer(): Option[City] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.flatMap(_.capital)\n}"}
{"qid": "geo880_204", "query": "What are the capitals of states that border Missouri ?", "scala": "def answer(): Option[List[City]] = {\n    val missouriState = geoModel.findState(\"missouri\")\n    val statesBorderingMissouri = missouriState.map(_.nextTo)\n    val capitals = statesBorderingMissouri.map(_.flatMap(_.capital))\n    capitals\n}"}
{"qid": "geo880_205", "query": "What are the capitals of the states that border Texas ?", "scala": "def answer(): Option[List[City]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val borderingStates = texasState.map(_.nextTo)\n    val capitals = borderingStates.map(_.flatMap(_.capital))\n    capitals\n}"}
{"qid": "geo880_206", "query": "What are the cities in California ?", "scala": "def answer(): Option[List[City]] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.cities)\n}"}
{"qid": "geo880_207", "query": "What are the cities in states through which the Mississippi runs ?", "scala": "def answer(): Option[List[City]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val statesTraversed = mississippiRiver.map(_.traverses)\n    val citiesInStates = statesTraversed.map(_.flatMap(_.cities))\n    citiesInStates\n}"}
{"qid": "geo880_208", "query": "What are the cities of the state with the highest point ?", "scala": "def answer(): Option[List[City]] = {\n    val stateWithHighestPoint = geoModel.states.maxBy(_.highPoint.elevation)\n    stateWithHighestPoint.map(_.cities)\n}"}
{"qid": "geo880_211", "query": "What are the lakes in states bordering Texas ?", "scala": "def answer(): Option[List[Lake]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val lakesInBorderingStates = texasState.map(_.nextTo.flatMap(_.lakes))\n    lakesInBorderingStates\n}"}
{"qid": "geo880_212", "query": "What are the largest cities in the states that border the largest state ?", "scala": "def answer(): Option[List[City]] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    val borderingStates = largestState.nextTo\n    val largestCities = borderingStates.map(_.cities.maxBy(_.size))\n    largestCities\n}"}
{"qid": "geo880_213", "query": "What are the major cities in Alabama ?", "scala": "def answer(): Option[List[City]] = {\n    val citiesInAlabama = geoModel.findState(\"alabama\").map(_.cities)\n    citiesInAlabama.map(_.filter(_.isMajor))\n}"}
{"qid": "geo880_214", "query": "What are the major cities in Alaska ?", "scala": "def answer(): Option[List[City]] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.cities.filter(_.isMajor))\n}"}
{"qid": "geo880_215", "query": "What are the major cities in California ?", "scala": "def answer(): Option[List[City]] = {\n    val californiaState = geoModel.findState(\"california\")\n    val majorCities = californiaState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_216", "query": "What are the major cities in Delaware ?", "scala": "def answer(): Option[List[City]] = {\n    val delawareState = geoModel.findState(\"delaware\")\n    val majorCities = delawareState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_217", "query": "What are the major cities in Kansas ?", "scala": "def answer(): Option[List[City]] = {\n    val kansasState = geoModel.findState(\"kansas\")\n    val majorCities = kansasState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_218", "query": "What are the major cities in Missouri ?", "scala": "def answer(): Option[List[City]] = {\n    val missouriState = geoModel.findState(\"missouri\")\n    missouriState.map(_.cities.filter(_.isMajor))\n}"}
{"qid": "geo880_219", "query": "What are the major cities in New Mexico ?", "scala": "def answer(): Option[List[City]] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    val majorCities = newMexicoState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_220", "query": "What are the major cities in New York ?", "scala": "def answer(): Option[List[City]] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.cities.filter(_.isMajor))\n}"}
{"qid": "geo880_221", "query": "What are the major cities in North Carolina ?", "scala": "def answer(): Option[List[City]] = {\n    val northCarolinaState = geoModel.findState(\"north carolina\")\n    val majorCities = northCarolinaState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_222", "query": "What are the major cities in Ohio ?", "scala": "def answer(): Option[List[City]] = {\n    val citiesInOhio = geoModel.findState(\"ohio\").map(_.cities)\n    val majorCities = citiesInOhio.map(_.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_223", "query": "What are the major cities in Oklahoma ?", "scala": "def answer(): Option[List[City]] = {\n    val oklahomaState = geoModel.findState(\"oklahoma\")\n    val majorCities = oklahomaState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_224", "query": "What are the major cities in Rhode Island ?", "scala": "def answer(): Option[List[City]] = {\n    val rhodeIslandState = geoModel.findState(\"rhode island\")\n    val majorCities = rhodeIslandState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_225", "query": "What are the major cities in states through which the Mississippi runs ?", "scala": "def answer(): Option[List[City]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val statesThroughMississippi = mississippiRiver.map(_.traverses)\n    val majorCities = statesThroughMississippi.flatMap(_.flatMap(_.cities.filter(_.isMajor)))\n    Some(majorCities)\n}"}
{"qid": "geo880_226", "query": "What are the major cities in Texas ?", "scala": "def answer(): Option[List[City]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val majorCities = texasState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_227", "query": "What are the major cities in the largest state ?", "scala": "def answer(): Option[List[City]] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    val majorCities = largestState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_228", "query": "What are the major cities in the smallest state in the US ?", "scala": "def answer(): Option[List[City]] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val smallestState = statesInUSA.map(_.minBy(_.size))\n    val majorCities = smallestState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_229", "query": "What are the major cities in the state of California ?", "scala": "def answer(): Option[List[City]] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.cities.filter(_.isMajor))\n}"}
{"qid": "geo880_230", "query": "What are the major cities in the states through which the major river in Virginia runs ?", "scala": "def answer(): Option[List[City]] = {\n    val virginiaState = geoModel.findState(\"virginia\")\n    val majorRiversInVirginia = virginiaState.map(_.rivers.filter(_.isMajor))\n    val statesTraversedByMajorRivers = majorRiversInVirginia.map(_.flatMap(_.traverses))\n    val majorCitiesInStates = statesTraversedByMajorRivers.map(_.flatMap(_.cities.filter(_.isMajor)))\n    majorCitiesInStates\n}"}
{"qid": "geo880_231", "query": "What are the major cities in the USA ?", "scala": "def answer(): Option[List[City]] = {\n    val cities = geoModel.findCountry(\"usa\").map(_.cities)\n    cities.map(_.filter(_.isMajor))\n}"}
{"qid": "geo880_232", "query": "What are the major cities in Vermont ?", "scala": "def answer(): Option[List[City]] = {\n    val vermontState = geoModel.findState(\"vermont\")\n    vermontState.map(_.cities.filter(_.isMajor))\n}"}
{"qid": "geo880_233", "query": "What are the major cities in Wyoming ?", "scala": "def answer(): Option[List[City]] = {\n    val wyomingState = geoModel.findState(\"wyoming\")\n    val majorCities = wyomingState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_234", "query": "What are the major cities of Texas ?", "scala": "def answer(): Option[List[City]] = {\n    val citiesInTexas = geoModel.findState(\"texas\").map(_.cities)\n    val majorCities = citiesInTexas.map(_.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_235", "query": "What are the major cities of the United States ?", "scala": "def answer(): Option[List[City]] = {\n    val majorCities = geoModel.cities.filter(_.isMajor)\n    Some(majorCities)\n}"}
{"qid": "geo880_236", "query": "What are the major cities of the US ?", "scala": "def answer(): Option[List[City]] = {\n    val citiesInUSA = geoModel.findCountry(\"usa\").map(_.cities)\n    val majorCities = citiesInUSA.map(_.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_237", "query": "What are the major lakes in United States ?", "scala": "def answer(): Option[List[Lake]] = {\n    val usaCountry = geoModel.findCountry(\"usa\")\n    val statesInUSA = usaCountry.map(_.states)\n    val majorLakesInUSA = statesInUSA.map(_.flatMap(_.lakes.filter(_.isMajor)))\n    majorLakesInUSA\n}"}
{"qid": "geo880_238", "query": "What are the major rivers in Ohio ?", "scala": "def answer(): Option[List[River]] = {\n    val ohioState = geoModel.findState(\"ohio\")\n    val majorRivers = ohioState.map(_.rivers.filter(_.isMajor))\n    majorRivers\n}"}
{"qid": "geo880_239", "query": "What are the major rivers in the US ?", "scala": "def answer(): Option[List[River]] = {\n    val majorRivers = geoModel.rivers.filter(_.isMajor)\n    Some(majorRivers)\n}"}
{"qid": "geo880_240", "query": "What are the names of the major cities in Illinois ?", "scala": "def answer(): Option[List[String]] = {\n    val illinoisState = geoModel.findState(\"illinois\")\n    val majorCities = illinoisState.map(_.cities.filter(_.isMajor))\n    val cityNames = majorCities.map(_.map(_.name))\n    cityNames\n}"}
{"qid": "geo880_241", "query": "What are the neighboring states for Michigan ?", "scala": "def answer(): Option[List[State]] = {\n    val michiganState = geoModel.findState(\"michigan\")\n    michiganState.map(_.nextTo)\n}"}
{"qid": "geo880_242", "query": "What are the population densities of each US state ?", "scala": "def answer(): Option[List[Float]] = {\n    val usStates = geoModel.states.filter(_.country.name == \"usa\")\n    val populationDensities = usStates.map(_.density)\n    Some(populationDensities)\n}"}
{"qid": "geo880_243", "query": "What is the population of Mississippi ?", "scala": "def answer(): Option[Int] = {\n    val mississippiState = geoModel.findState(\"mississippi\")\n    mississippiState.map(_.population)\n}"}
{"qid": "geo880_244", "query": "What are the populations of all the major cities in Montana ?", "scala": "def answer(): Option[List[Int]] = {\n    val majorCitiesInMontana = geoModel.findState(\"montana\").map(_.cities.filter(_.isMajor))\n    val populations = majorCitiesInMontana.map(_.map(_.population))\n    populations\n}"}
{"qid": "geo880_245", "query": "What are the populations of states through which the Mississippi river runs ?", "scala": "def answer(): Option[List[Int]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val populations = mississippiRiver.map(_.traverses.map(_.population))\n    populations\n}"}
{"qid": "geo880_246", "query": "What are the populations of states through which the Mississippi river runs ?", "scala": "def answer(): Option[List[Int]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val populations = mississippiRiver.map(_.traverses.flatMap(_.population))\n    populations\n}"}
{"qid": "geo880_247", "query": "What are the populations of states through which the Mississippi runs ?", "scala": "def answer(): Option[List[Int]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val populations = mississippiRiver.map(_.traverses.map(_.population))\n    populations\n}"}
{"qid": "geo880_248", "query": "What are the populations of states through which the Mississippi runs ?", "scala": "def answer(): Option[List[Int]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val populations = mississippiRiver.map(_.traverses.map(_.population))\n    populations\n}"}
{"qid": "geo880_249", "query": "What are the populations of states which border Texas ?", "scala": "def answer(): Option[List[Int]] = {\n    val statesBorderingTexas = geoModel.findState(\"texas\").map(_.nextTo)\n    val populations = statesBorderingTexas.map(_.map(_.population))\n    populations\n}"}
{"qid": "geo880_250", "query": "What are the populations of the major cities of Texas ?", "scala": "def answer(): Option[List[Int]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val majorCitiesInTexas = texasState.map(_.cities.filter(_.isMajor))\n    val populations = majorCitiesInTexas.map(_.map(_.population))\n    populations\n}"}
{"qid": "geo880_251", "query": "What are the populations of the states through which the Mississippi river runs ?", "scala": "def answer(): Option[List[Int]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val populations = mississippiRiver.map(_.traverses.map(_.population))\n    populations\n}"}
{"qid": "geo880_252", "query": "What are the populations of the states through which the Mississippi river runs ?", "scala": "def answer(): Option[List[Int]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val statePopulations = mississippiRiver.map(_.traverses.map(_.population))\n    statePopulations\n}"}
{"qid": "geo880_253", "query": "What are the populations of the states through which the Mississippi runs ?", "scala": "def answer(): Option[List[Int]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val populations = mississippiRiver.map(_.traverses.map(_.population))\n    populations\n}"}
{"qid": "geo880_254", "query": "What are the populations of the states through which the Mississippi runs ?", "scala": "def answer(): Option[List[Int]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val statePopulations = mississippiRiver.map(_.traverses.map(_.population))\n    statePopulations\n}"}
{"qid": "geo880_255", "query": "What are the rivers in Alaska ?", "scala": "def answer(): Option[List[River]] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.rivers)\n}"}
{"qid": "geo880_256", "query": "What are the rivers in the state of Indiana ?", "scala": "def answer(): Option[List[River]] = {\n    val indianaState = geoModel.findState(\"indiana\")\n    indianaState.map(_.rivers)\n}"}
{"qid": "geo880_257", "query": "What are the rivers in the state of Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.rivers)\n}"}
{"qid": "geo880_258", "query": "What are the rivers of Montana ?", "scala": "def answer(): Option[List[River]] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.rivers)\n}"}
{"qid": "geo880_259", "query": "What are the states ?", "scala": "def answer(): Option[List[State]] = {\n    Some(geoModel.states)\n}"}
{"qid": "geo880_260", "query": "What are the states that border the state with the greatest population ?", "scala": "def answer(): Option[List[State]] = {\n    val stateWithGreatestPopulation = geoModel.states.maxBy(_.population)\n    stateWithGreatestPopulation.map(_.nextTo)\n}"}
{"qid": "geo880_261", "query": "What are the states that the Potomac runs through ?", "scala": "def answer(): Option[List[State]] = {\n    val potomacRiver = geoModel.findRiver(\"potomac\")\n    potomacRiver.map(_.traverses)\n}"}
{"qid": "geo880_262", "query": "What are the states through which the longest river runs ?", "scala": "def answer(): Option[List[State]] = {\n    val longestRiver = geoModel.rivers.maxBy(_.length)\n    longestRiver.map(_.traverses)\n}"}
{"qid": "geo880_263", "query": "What can you tell me about the population of Missouri ?", "scala": "def answer(): Option[Int] = {\n    val missouriState = geoModel.findState(\"missouri\")\n    missouriState.map(_.population)\n}"}
{"qid": "geo880_264", "query": "What capital has the largest population ?", "scala": "scala\ndef answer(): Option[City] = {\n    val capitals = geoModel.cities.filter(_.isCapital)\n    val mostPopulatedCapital = capitals.maxBy(_.population)\n    mostPopulatedCapital\n}"}
{"qid": "geo880_265", "query": "What capital is the largest in the US ?", "scala": "def answer(): Option[City] = {\n    val usa = geoModel.findCountry(\"usa\")\n    val capitals = usa.map(_.states.flatMap(_.capital))\n    val largestCapital = capitals.map(_.maxBy(_.size))\n    largestCapital\n}"}
{"qid": "geo880_266", "query": "What cities are located in Pennsylvania ?", "scala": "def answer(): Option[List[City]] = {\n    val pennsylvaniaState = geoModel.findState(\"pennsylvania\")\n    pennsylvaniaState.map(_.cities)\n}"}
{"qid": "geo880_267", "query": "What cities in California ?", "scala": "def answer(): Option[List[City]] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.cities)\n}"}
{"qid": "geo880_268", "query": "What cities in Texas have the highest number of citizens ?", "scala": "def answer(): Option[List[City]] = {\n    val citiesInTexas = geoModel.findState(\"texas\").map(_.cities)\n    citiesInTexas.map(_.maxBy(_.population))\n}"}
{"qid": "geo880_269", "query": "What cities in Texas have the highest populations ?", "scala": "def answer(): Option[List[City]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val citiesWithHighestPopulation = texasState.map(_.cities.filter(_.population == texasState.cities.map(_.population).max))\n    citiesWithHighestPopulation\n}"}
{"qid": "geo880_270", "query": "What city has the largest population ?", "scala": "def answer(): Option[City] = {\n    val cityWithLargestPopulation = geoModel.cities.maxBy(_.population)\n    cityWithLargestPopulation\n}"}
{"qid": "geo880_271", "query": "What city has the least population ?", "scala": "def answer(): Option[City] = {\n    geoModel.cities.minByOption(_.population)\n}"}
{"qid": "geo880_272", "query": "What city has the most people ?", "scala": "def answer(): Option[City] = {\n    val biggestCity = geoModel.cities.maxBy(_.population)\n    biggestCity\n}"}
{"qid": "geo880_273", "query": "What city in the United States has the highest population density ?", "scala": "def answer(): Option[City] = {\n    val citiesInUSA = geoModel.states.flatMap(_.cities)\n    citiesInUSA.maxByOption(_.density)\n}"}
{"qid": "geo880_274", "query": "What is capital of Iowa ?", "scala": "def answer(): Option[City] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    val capital = iowaState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_275", "query": "What is capital of the state with the lowest point ?", "scala": "def answer(): Option[City] = {\n    val lowestState = geoModel.states.minBy(_.lowPoint.elevation)\n    lowestState.capital\n}"}
{"qid": "geo880_276", "query": "What is largest capital ?", "scala": "def answer(): Option[City] = {\n    val capitals = geoModel.cities.filter(_.isCapital)\n    capitals.maxBy(_.size)\n}"}
{"qid": "geo880_277", "query": "What is the adjacent state of California ?", "scala": "def answer(): Option[List[State]] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.nextTo)\n}"}
{"qid": "geo880_278", "query": "What is the area of Alaska ?", "scala": "def answer(): Option[Int] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.area)\n}"}
{"qid": "geo880_279", "query": "What is the area of all the states combined ?", "scala": "def answer(): Option[Int] = {\n    val totalArea = geoModel.states.map(_.area).sum\n    Some(totalArea)\n}"}
{"qid": "geo880_280", "query": "What is the area of California ?", "scala": "def answer(): Option[Int] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.area)\n}"}
{"qid": "geo880_281", "query": "What is the area of Florida ?", "scala": "def answer(): Option[Int] = {\n    val floridaState = geoModel.findState(\"florida\")\n    floridaState.map(_.area)\n}"}
{"qid": "geo880_282", "query": "What is the area of Idaho ?", "scala": "def answer(): Option[Int] = {\n    val idahoState = geoModel.findState(\"idaho\")\n    idahoState.map(_.area)\n}"}
{"qid": "geo880_283", "query": "What is the area of Maine ?", "scala": "def answer(): Option[Int] = {\n    val maineState = geoModel.findState(\"maine\")\n    maineState.map(_.area)\n}"}
{"qid": "geo880_285", "query": "What is the area of New Mexico ?", "scala": "def answer(): Option[Int] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    newMexicoState.map(_.area)\n}"}
{"qid": "geo880_286", "query": "What is the area of Ohio ?", "scala": "def answer(): Option[Int] = {\n    val ohioState = geoModel.findState(\"ohio\")\n    ohioState.map(_.area)\n}"}
{"qid": "geo880_288", "query": "What is the area of South Carolina ?", "scala": "def answer(): Option[Int] = {\n    val southCarolinaState = geoModel.findState(\"south carolina\")\n    southCarolinaState.map(_.area)\n}"}
{"qid": "geo880_289", "query": "What is the area of Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.area)\n}"}
{"qid": "geo880_290", "query": "What is the area of the largest state ?", "scala": "def answer(): Option[Int] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    largestState.map(_.area)\n}"}
{"qid": "geo880_291", "query": "What is the area of the smallest state ?", "scala": "def answer(): Option[Int] = {\n    val smallestState = geoModel.states.minBy(_.size)\n    smallestState.map(_.area)\n}"}
{"qid": "geo880_292", "query": "What is the area of the state with the capital Albany ?", "scala": "def answer(): Option[Int] = {\n    val state = geoModel.states.find(s => s.capital.exists(_.name == \"albany\"))\n    state.map(_.area)\n}"}
{"qid": "geo880_293", "query": "What is the area of the state with the smallest population density ?", "scala": "def answer(): Option[Int] = {\n    val states = geoModel.states\n    val smallestDensityState = states.minBy(_.density)\n    smallestDensityState.map(_.area)\n}"}
{"qid": "geo880_294", "query": "What is the area of the states ?", "scala": "def answer(): Option[List[Int]] = {\n    val areas = geoModel.states.map(_.area)\n    areas\n}"}
{"qid": "geo880_295", "query": "What is the area of the Texas state ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.area)\n}"}
{"qid": "geo880_296", "query": "What is the area of Wisconsin ?", "scala": "def answer(): Option[Int] = {\n    val wisconsinState = geoModel.findState(\"wisconsin\")\n    wisconsinState.map(_.area)\n}"}
{"qid": "geo880_298", "query": "What is the average population per square km in Pennsylvania ?", "scala": "def answer(): Option[Float] = {\n    val pennsylvaniaState = geoModel.findState(\"pennsylvania\")\n    pennsylvaniaState.map(_.density)\n}"}
{"qid": "geo880_299", "query": "What is the average population per square km in the US ?", "scala": "def answer(): Option[Float] = {\n    geoModel.findCountry(\"usa\").map(_.density)\n}"}
{"qid": "geo880_300", "query": "What is the biggest American city in a state with a river ?", "scala": "def answer(): Option[City] = {\n    val statesWithRivers = geoModel.states.filter(_.rivers.nonEmpty)\n    val citiesInStatesWithRivers = statesWithRivers.flatMap(_.cities)\n    citiesInStatesWithRivers.maxBy(_.size)\n}"}
{"qid": "geo880_301", "query": "What is the biggest capital city in the US ?", "scala": "def answer(): Option[City] = {\n    val capitalsInUSA = geoModel.states.flatMap(_.capital).filter(_.isCapital)\n    capitalsInUSA.maxByOption(_.size)\n}"}
{"qid": "geo880_302", "query": "What is the biggest city in Arizona ?", "scala": "def answer(): Option[City] = {\n    val arizonaState = geoModel.findState(\"arizona\")\n    val biggestCity = arizonaState.map(_.cities.maxBy(_.size))\n    biggestCity\n}"}
{"qid": "geo880_303", "query": "What is the biggest city in Georgia ?", "scala": "def answer(): Option[City] = {\n    val citiesInGeorgia = geoModel.findState(\"georgia\").map(_.cities)\n    val biggestCity = citiesInGeorgia.map(_.maxBy(_.size))\n    biggestCity\n}"}
{"qid": "geo880_304", "query": "What is the biggest city in Kansas ?", "scala": "def answer(): Option[City] = {\n    val kansasState = geoModel.findState(\"kansas\")\n    kansasState.map(_.cities.maxBy(_.size))\n}"}
{"qid": "geo880_305", "query": "What is the biggest city in Louisiana ?", "scala": "def answer(): Option[City] = {\n    val louisianaState = geoModel.findState(\"louisiana\")\n    louisianaState.map(_.cities.maxBy(_.size))\n}"}
{"qid": "geo880_306", "query": "What is the biggest city in Nebraska ?", "scala": "def answer(): Option[City] = {\n    val nebraskaState = geoModel.findState(\"nebraska\")\n    val biggestCity = nebraskaState.map(_.cities.maxBy(_.size))\n    biggestCity\n}"}
{"qid": "geo880_307", "query": "What is the biggest city in Oregon ?", "scala": "def answer(): Option[City] = {\n    val citiesInOregon = geoModel.findState(\"oregon\").map(_.cities)\n    val biggestCity = citiesInOregon.map(_.maxBy(_.size))\n    biggestCity\n}"}
{"qid": "geo880_308", "query": "What is the biggest city in Texas ?", "scala": "def answer(): Option[City] = {\n    val texasState = geoModel.findState(\"texas\")\n    val biggestCity = texasState.map(_.cities.maxBy(_.size))\n    biggestCity\n}"}
{"qid": "geo880_309", "query": "What is the biggest city in the smallest state ?", "scala": "def answer(): Option[City] = {\n    val smallestState = geoModel.states.minBy(_.size)\n    val biggestCity = smallestState.cities.maxBy(_.size)\n    biggestCity\n}"}
{"qid": "geo880_310", "query": "What is the biggest city in the US ?", "scala": "def answer(): Option[City] = {\n    val cities = geoModel.findCountry(\"usa\").map(_.cities)\n    cities.map(_.maxBy(_.size))\n}"}
{"qid": "geo880_311", "query": "What is the biggest city in the USA ?", "scala": "def answer(): Option[City] = {\n    val citiesInUSA = geoModel.findCountry(\"usa\").map(_.states.flatMap(_.cities))\n    citiesInUSA.map(_.maxBy(_.size))\n}"}
{"qid": "geo880_312", "query": "What is the biggest city in USA ?", "scala": "def answer(): Option[City] = {\n    val citiesInUSA = geoModel.findCountry(\"usa\").map(_.cities)\n    val biggestCity = citiesInUSA.map(_.maxBy(_.size))\n    biggestCity\n}"}
{"qid": "geo880_313", "query": "What is the biggest city in Wyoming ?", "scala": "def answer(): Option[City] = {\n    val citiesInWyoming = geoModel.findState(\"wyoming\").map(_.cities)\n    citiesInWyoming.flatMap(_.maxByOption(_.size))\n}"}
{"qid": "geo880_314", "query": "What is the biggest river in Illinois ?", "scala": "def answer(): Option[River] = {\n    val riversInIllinois = geoModel.findState(\"illinois\").map(_.rivers)\n    riversInIllinois.map(_.maxBy(_.length))\n}"}
{"qid": "geo880_315", "query": "What is the biggest state ?", "scala": "def answer(): Option[State] = {\n    val biggestState = geoModel.states.maxBy(_.area)\n    biggestState\n}"}
{"qid": "geo880_317", "query": "What is the biggest state in the USA ?", "scala": "def answer(): Option[State] = {\n    val biggestState = geoModel.states.maxBy(_.size)\n    biggestState\n}"}
{"qid": "geo880_319", "query": "What is the capital of California ?", "scala": "def answer(): Option[City] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.flatMap(_.capital)\n}"}
{"qid": "geo880_320", "query": "What is the capital of Colorado ?", "scala": "def answer(): Option[City] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.flatMap(_.capital)\n}"}
{"qid": "geo880_321", "query": "What is the capital of Georgia ?", "scala": "def answer(): Option[City] = {\n    val georgiaState = geoModel.findState(\"georgia\")\n    val capital = georgiaState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_322", "query": "What is the capital of Hawaii ?", "scala": "def answer(): Option[City] = {\n    val hawaiiState = geoModel.findState(\"hawaii\")\n    hawaiiState.flatMap(_.capital)\n}"}
{"qid": "geo880_323", "query": "What is the capital of Illinois ?", "scala": "def answer(): Option[City] = {\n    val illinoisState = geoModel.findState(\"illinois\")\n    illinoisState.flatMap(_.capital)\n}"}
{"qid": "geo880_324", "query": "What is the capital of Indiana ?", "scala": "def answer(): Option[City] = {\n    val indianaState = geoModel.findState(\"indiana\")\n    val capital = indianaState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_325", "query": "What is the capital of Iowa ?", "scala": "def answer(): Option[City] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    val capital = iowaState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_326", "query": "What is the capital of Maine ?", "scala": "def answer(): Option[City] = {\n    val maineState = geoModel.findState(\"maine\")\n    maineState.flatMap(_.capital)\n}"}
{"qid": "geo880_327", "query": "What is the capital of Maryland ?", "scala": "def answer(): Option[City] = {\n    val marylandState = geoModel.findState(\"maryland\")\n    val capital = marylandState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_328", "query": "What is the capital of Massachusetts ?", "scala": "def answer(): Option[City] = {\n    val massachusettsState = geoModel.findState(\"massachusetts\")\n    massachusettsState.flatMap(_.capital)\n}"}
{"qid": "geo880_329", "query": "What is the capital of Michigan ?", "scala": "def answer(): Option[City] = {\n    val michiganState = geoModel.findState(\"michigan\")\n    michiganState.flatMap(_.capital)\n}"}
{"qid": "geo880_330", "query": "What is the capital of New Hampshire ?", "scala": "def answer(): Option[City] = {\n    val newHampshireState = geoModel.findState(\"new hampshire\")\n    newHampshireState.flatMap(_.capital)\n}"}
{"qid": "geo880_331", "query": "What is the capital of New Jersey ?", "scala": "def answer(): Option[City] = {\n    val newJerseyState = geoModel.findState(\"new jersey\")\n    newJerseyState.flatMap(_.capital)\n}"}
{"qid": "geo880_332", "query": "What is the capital of New York ?", "scala": "def answer(): Option[City] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.flatMap(_.capital)\n}"}
{"qid": "geo880_333", "query": "What is the capital of North Dakota ?", "scala": "def answer(): Option[City] = {\n    val northDakotaState = geoModel.findState(\"north dakota\")\n    northDakotaState.flatMap(_.capital)\n}"}
{"qid": "geo880_334", "query": "What is the capital of Ohio ?", "scala": "def answer(): Option[City] = {\n    geoModel.findState(\"ohio\").flatMap(_.capital)\n}"}
{"qid": "geo880_335", "query": "What is the capital of Pennsylvania ?", "scala": "def answer(): Option[City] = {\n    val pennsylvaniaState = geoModel.findState(\"pennsylvania\")\n    pennsylvaniaState.flatMap(_.capital)\n}"}
{"qid": "geo880_336", "query": "What is the capital of states that have cities named Durham ?", "scala": "def answer(): Option[List[City]] = {\n    val durhamCities = geoModel.cities.filter(_.name == \"durham\")\n    val capitals = durhamCities.map(_.state.capital)\n    capitals\n}"}
{"qid": "geo880_337", "query": "What is the capital of Texas ?", "scala": "scala\ndef answer(): Option[City] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.flatMap(_.capital)\n}"}
{"qid": "geo880_338", "query": "What is the capital of the Alabama state ?", "scala": "def answer(): Option[City] = {\n    val alabamaState = geoModel.findState(\"alabama\")\n    val capital = alabamaState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_339", "query": "What is the capital of the Florida state ?", "scala": "def answer(): Option[City] = {\n    val floridaState = geoModel.findState(\"florida\")\n    floridaState.flatMap(_.capital)\n}"}
{"qid": "geo880_340", "query": "What is the capital of the largest state ?", "scala": "def answer(): Option[City] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    largestState.capital\n}"}
{"qid": "geo880_341", "query": "What is the capital of the smallest state ?", "scala": "def answer(): Option[City] = {\n    val smallestState = geoModel.states.minBy(_.size)\n    smallestState.capital\n}"}
{"qid": "geo880_342", "query": "What is the capital of the state Texas ?", "scala": "def answer(): Option[City] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.flatMap(_.capital)\n}"}
{"qid": "geo880_343", "query": "What is the capital of the state that borders the most states ?", "scala": "def answer(): Option[City] = {\n    val stateWithMostNeighbors = geoModel.states.maxBy(_.nextTo.length)\n    stateWithMostNeighbors.capital\n}"}
{"qid": "geo880_345", "query": "What is the capital of the state with the highest elevation ?", "scala": "def answer(): Option[City] = {\n    val stateWithHighestElevation = geoModel.states.maxBy(_.highPoint.elevation)\n    stateWithHighestElevation.capital\n}"}
{"qid": "geo880_346", "query": "What is the capital of the state with the highest point ?", "scala": "def answer(): Option[City] = {\n    val highestState = geoModel.states.maxBy(_.highPoint.elevation)\n    val capital = highestState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_347", "query": "What is the capital of the state with the largest population ?", "scala": "def answer(): Option[City] = {\n    val stateWithLargestPopulation = geoModel.states.maxBy(_.population)\n    stateWithLargestPopulation.capital\n}"}
{"qid": "geo880_348", "query": "What is the capital of the state with the largest population density ?", "scala": "def answer(): Option[City] = {\n    val stateWithLargestDensity = geoModel.states.maxBy(_.density)\n    stateWithLargestDensity.capital\n}"}
{"qid": "geo880_350", "query": "What is the capital of the state with the most inhabitants ?", "scala": "def answer(): Option[City] = {\n    val stateWithMostInhabitants = geoModel.states.maxBy(_.population)\n    stateWithMostInhabitants.capital\n}"}
{"qid": "geo880_351", "query": "What is the capital of Utah ?", "scala": "def answer(): Option[City] = {\n    val utahState = geoModel.findState(\"utah\")\n    val capital = utahState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_352", "query": "What is the capital of Vermont ?", "scala": "def answer(): Option[City] = {\n    val vermontState = geoModel.findState(\"vermont\")\n    val capital = vermontState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_353", "query": "What is the capital of Washington ?", "scala": "def answer(): Option[City] = {\n    val washingtonState = geoModel.findState(\"washington\")\n    val capital = washingtonState.flatMap(_.capital)\n    capital\n}"}
{"qid": "geo880_354", "query": "What is the city in Texas with the largest population ?", "scala": "def answer(): Option[City] = {\n    val citiesInTexas = geoModel.findState(\"texas\").map(_.cities)\n    val cityWithLargestPopulation = citiesInTexas.map(_.maxBy(_.population))\n    cityWithLargestPopulation\n}"}
{"qid": "geo880_355", "query": "What is the city with the smallest population ?", "scala": "def answer(): Option[City] = {\n    geoModel.cities.minByOption(_.population)\n}"}
{"qid": "geo880_356", "query": "What is the combined area of all 50 states ?", "scala": "def answer(): Option[Int] = {\n    val totalArea = geoModel.states.map(_.area).sum\n    Some(totalArea)\n}"}
{"qid": "geo880_357", "query": "What is the combined population of all 50 states ?", "scala": "def answer(): Option[Int] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val combinedPopulation = statesInUSA.map(_.map(_.population).sum)\n    combinedPopulation\n}"}
{"qid": "geo880_358", "query": "What is the density of Texas ?", "scala": "def answer(): Option[Float] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.density)\n}"}
{"qid": "geo880_359", "query": "What is the density of the New York ?", "scala": "def answer(): Option[Float] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.density)\n}"}
{"qid": "geo880_360", "query": "What is the elevation of Death Valley ?", "scala": "def answer(): Option[Int] = {\n    val deathValley = geoModel.findPlace(\"death valley\")\n    deathValley.map(_.elevation)\n}"}
{"qid": "geo880_361", "query": "What is the elevation of the highest point in the USA ?", "scala": "def answer(): Option[Int] = {\n    val highestState = geoModel.states.maxBy(_.highPoint.elevation)\n    highestState.map(_.highPoint.elevation)\n}"}
{"qid": "geo880_362", "query": "What is the height of Mount McKinley ?", "scala": "def answer(): Option[Int] = {\n    val mountMcKinley = geoModel.findMountain(\"mckinley\")\n    mountMcKinley.map(_.elevation)\n}"}
{"qid": "geo880_364", "query": "What is the height of the highest point in the USA ?", "scala": "def answer(): Option[Int] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val highestPoint = statesInUSA.flatMap(_.maxByOption(_.highPoint.elevation)).map(_.highPoint.elevation)\n    highestPoint\n}"}
{"qid": "geo880_365", "query": "What is the high point of Wyoming ?", "scala": "def answer(): Option[Place] = {\n    val wyomingState = geoModel.findState(\"wyoming\")\n    wyomingState.map(_.highPoint)\n}"}
{"qid": "geo880_366", "query": "What is the highest elevation in New Mexico ?", "scala": "def answer(): Option[Place] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    val highestElevation = newMexicoState.map(_.places.maxBy(_.elevation))\n    highestElevation\n}"}
{"qid": "geo880_367", "query": "What is the highest elevation in South Carolina ?", "scala": "def answer(): Option[Place] = {\n    val southCarolinaState = geoModel.findState(\"south carolina\")\n    val highestElevation = southCarolinaState.map(_.places.maxBy(_.elevation))\n    highestElevation\n}"}
{"qid": "geo880_368", "query": "What is the highest elevation in Texas ?", "scala": "def answer(): Option[Place] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.places.maxBy(_.elevation))\n}"}
{"qid": "geo880_369", "query": "What is the highest elevation in the United States ?", "scala": "def answer(): Option[Place] = {\n    val places = geoModel.findCountry(\"usa\").map(_.places)\n    places.flatMap(_.maxByOption(_.elevation))\n}"}
{"qid": "geo880_373", "query": "What is the highest mountain in US ?", "scala": "def answer(): Option[Mountain] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val highestMountain = statesInUSA.flatMap(_.maxBy(_.highPoint.elevation).highPoint)\n    highestMountain\n}"}
{"qid": "geo880_374", "query": "What is the highest point in Colorado ?", "scala": "def answer(): Option[Place] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.highPoint)\n}"}
{"qid": "geo880_375", "query": "What is the highest point in Delaware ?", "scala": "def answer(): Option[Place] = {\n    val delawareState = geoModel.findState(\"delaware\")\n    delawareState.map(_.highPoint)\n}"}
{"qid": "geo880_377", "query": "What is the highest point in Florida ?", "scala": "def answer(): Option[Place] = {\n    val floridaState = geoModel.findState(\"florida\")\n    floridaState.map(_.highPoint)\n}"}
{"qid": "geo880_378", "query": "What is the highest point in Iowa ?", "scala": "def answer(): Option[Place] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    iowaState.map(_.highPoint)\n}"}
{"qid": "geo880_379", "query": "What is the highest point in Kansas ?", "scala": "def answer(): Option[Place] = {\n    val kansasState = geoModel.findState(\"kansas\")\n    kansasState.map(_.highPoint)\n}"}
{"qid": "geo880_380", "query": "What is the highest point in Maine ?", "scala": "def answer(): Option[Place] = {\n    val maineState = geoModel.findState(\"maine\")\n    maineState.map(_.places.maxBy(_.elevation))\n}"}
{"qid": "geo880_381", "query": "What is the highest point in Montana ?", "scala": "def answer(): Option[Place] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.highPoint)\n}"}
{"qid": "geo880_383", "query": "What is the highest point in New Mexico ?", "scala": "def answer(): Option[Place] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    newMexicoState.map(_.highPoint)\n}"}
{"qid": "geo880_384", "query": "What is the highest point in Ohio ?", "scala": "def answer(): Option[Place] = {\n    val ohioState = geoModel.findState(\"ohio\")\n    ohioState.map(_.places.maxBy(_.elevation))\n}"}
{"qid": "geo880_385", "query": "What is the highest point in Rhode Island ?", "scala": "def answer(): Option[Place] = {\n    val rhodeIslandState = geoModel.findState(\"rhode island\")\n    rhodeIslandState.map(_.highPoint)\n}"}
{"qid": "geo880_386", "query": "What is the highest point in states bordering Georgia ?", "scala": "def answer(): Option[Place] = {\n    val georgiaState = geoModel.findState(\"georgia\")\n    val highestPoints = georgiaState.map(_.nextTo.map(_.highPoint))\n    highestPoints.map(_.maxBy(_.elevation))\n}"}
{"qid": "geo880_387", "query": "What is the highest point in Texas ?", "scala": "def answer(): Option[Place] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.highPoint)\n}"}
{"qid": "geo880_388", "query": "What is the highest point in the country ?", "scala": "def answer(): Option[Place] = {\n    val highestPoint = geoModel.places.maxBy(_.elevation)\n    highestPoint\n}"}
{"qid": "geo880_389", "query": "What is the highest point in the smallest state ?", "scala": "def answer(): Option[Place] = {\n    val smallestState = geoModel.states.minBy(_.size)\n    smallestState.map(_.highPoint)\n}"}
{"qid": "geo880_390", "query": "What is the highest point in the state with capital Austin ?", "scala": "def answer(): Option[Place] = {\n    val austinState = geoModel.states.find(s => s.capital.exists(_.name == \"Austin\"))\n    austinState.map(_.highPoint)\n}"}
{"qid": "geo880_391", "query": "What is the highest point in the state with capital Des Moines ?", "scala": "def answer(): Option[Place] = {\n    val desMoinesCity = geoModel.findCity(\"des moines\")\n    val desMoinesState = desMoinesCity.map(_.state)\n    desMoinesState.map(_.highPoint)\n}"}
{"qid": "geo880_392", "query": "What is the highest point in the state with the capital Des Moines ?", "scala": "def answer(): Option[Place] = {\n    val state = geoModel.states.find(s => s.capital.exists(_.name == \"des moines\"))\n    state.map(_.highPoint)\n}"}
{"qid": "geo880_393", "query": "What is the highest point in the state with the most rivers ?", "scala": "def answer(): Option[Place] = {\n    val stateWithMostRivers = geoModel.states.maxBy(_.rivers.length)\n    stateWithMostRivers.map(_.highPoint)\n}"}
{"qid": "geo880_394", "query": "What is the highest point in the state with the smallest population ?", "scala": "def answer(): Option[Place] = {\n    val smallestState = geoModel.states.minBy(_.population)\n    smallestState.highPoint\n}"}
{"qid": "geo880_395", "query": "What is the highest point in the states bordering Colorado ?", "scala": "def answer(): Option[Place] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    val statesBorderingColorado = coloradoState.map(_.nextTo)\n    statesBorderingColorado.flatMap(states => states.maxBy(_.highPoint.elevation).map(_.highPoint))\n}"}
{"qid": "geo880_396", "query": "What is the highest point in the United States ?", "scala": "def answer(): Option[Place] = {\n    val highestPoint = geoModel.places.maxByOption(_.elevation)\n    highestPoint\n}"}
{"qid": "geo880_397", "query": "What is the highest point in the US ?", "scala": "def answer(): Option[Place] = {\n    val highestPoint = geoModel.places.maxBy(_.elevation)\n    highestPoint\n}"}
{"qid": "geo880_398", "query": "What is the highest point in the USA ?", "scala": "def answer(): Option[Place] = {\n    val highestPointInUSA = geoModel.states.maxBy(_.highPoint.elevation).highPoint\n    highestPointInUSA\n}"}
{"qid": "geo880_399", "query": "What is the highest point in Virginia ?", "scala": "def answer(): Option[Place] = {\n    val virginiaState = geoModel.findState(\"virginia\")\n    virginiaState.map(_.highPoint)\n}"}
{"qid": "geo880_400", "query": "What is the highest point in Wyoming ?", "scala": "def answer(): Option[Place] = {\n    val wyomingState = geoModel.findState(\"wyoming\")\n    wyomingState.map(_.highPoint)\n}"}
{"qid": "geo880_401", "query": "What is the highest point of the state with the largest area ?", "scala": "def answer(): Option[Place] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    largestState.highPoint\n}"}
{"qid": "geo880_402", "query": "What is the highest point of the state with the smallest population density ?", "scala": "def answer(): Option[Place] = {\n    val stateWithLowestDensity = geoModel.states.minBy(_.density)\n    val highestPoint = stateWithLowestDensity.places.maxBy(_.elevation)\n    highestPoint\n}"}
{"qid": "geo880_403", "query": "What is the highest point of the USA ?", "scala": "def answer(): Option[Place] = {\n    val highestPoint = geoModel.places.maxBy(_.elevation)\n    Some(highestPoint)\n}"}
{"qid": "geo880_404", "query": "What is the largest capital ?", "scala": "def answer(): Option[City] = {\n    val capitals = geoModel.states.flatMap(_.cities.filter(_.isCapital))\n    val largestCapital = capitals.maxBy(_.size)\n    largestCapital\n}"}
{"qid": "geo880_405", "query": "What is the largest capital city in the USA ?", "scala": "def answer(): Option[City] = {\n    val capitalsInUSA = geoModel.states.flatMap(_.cities.filter(_.isCapital))\n    capitalsInUSA.maxBy(_.size)\n}"}
{"qid": "geo880_406", "query": "What is the largest city in a state that borders Texas ?", "scala": "def answer(): Option[City] = {\n    val statesBorderingTexas = geoModel.findState(\"texas\").map(_.nextTo)\n    val citiesInBorderingStates = statesBorderingTexas.flatMap(_.flatMap(_.cities))\n    citiesInBorderingStates.map(_.maxBy(_.population))\n}"}
{"qid": "geo880_407", "query": "What is the largest city in Alabama ?", "scala": "def answer(): Option[City] = {\n    val alabamaState = geoModel.findState(\"alabama\")\n    val largestCity = alabamaState.map(_.cities.maxBy(_.population))\n    largestCity\n}"}
{"qid": "geo880_408", "query": "What is the largest city in California ?", "scala": "def answer(): Option[City] = {\n    val citiesInCalifornia = geoModel.findState(\"california\").map(_.cities)\n    citiesInCalifornia.flatMap(_.maxByOption(_.size))\n}"}
{"qid": "geo880_409", "query": "What is the largest city in Michigan ?", "scala": "def answer(): Option[City] = {\n    val citiesInMichigan = geoModel.findState(\"michigan\").map(_.cities)\n    citiesInMichigan.flatMap(_.maxByOption(_.size))\n}"}
{"qid": "geo880_410", "query": "What is the largest city in Minnesota by population ?", "scala": "def answer(): Option[City] = {\n    val minnesotaState = geoModel.findState(\"minnesota\")\n    val largestCity = minnesotaState.map(_.cities.maxBy(_.population))\n    largestCity\n}"}
{"qid": "geo880_411", "query": "What is the largest city in Missouri ?", "scala": "def answer(): Option[City] = {\n    val missouriState = geoModel.findState(\"missouri\")\n    val largestCity = missouriState.map(_.cities.maxBy(_.population))\n    largestCity\n}"}
{"qid": "geo880_412", "query": "What is the largest city in Rhode Island ?", "scala": "def answer(): Option[City] = {\n    val rhodeIslandState = geoModel.findState(\"rhode island\")\n    rhodeIslandState.map(_.cities.maxBy(_.population))\n}"}
{"qid": "geo880_413", "query": "What is the largest city in smallest state through which the Mississippi runs ?", "scala": "def answer(): Option[City] = {\n    val statesTraversedByMississippi = geoModel.states.filter(_.rivers.contains(geoModel.findRiver(\"mississippi\")))\n    val smallestState = statesTraversedByMississippi.minBy(_.area)\n    smallestState.cities.maxByOption(_.population)\n}"}
{"qid": "geo880_414", "query": "What is the largest city in states that border California ?", "scala": "def answer(): Option[City] = {\n    val statesBorderingCalifornia = geoModel.findState(\"california\").map(_.nextTo).getOrElse(List())\n    val citiesBordering = statesBorderingCalifornia.flatMap(_.cities)\n    val largestCity = citiesBordering.maxBy(_.size)\n    largestCity\n}"}
{"qid": "geo880_415", "query": "What is the largest city in Texas ?", "scala": "def answer(): Option[City] = {\n    val texasState = geoModel.findState(\"texas\")\n    val largestCity = texasState.map(_.cities.maxBy(_.population))\n    largestCity\n}"}
{"qid": "geo880_416", "query": "What is the largest city in the smallest state in the USA ?", "scala": "def answer(): Option[City] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val smallestState = statesInUSA.map(_.minBy(_.size))\n    smallestState.map(_.cities.maxBy(_.size))\n}"}
{"qid": "geo880_417", "query": "What is the largest city in Wisconsin ?", "scala": "def answer(): Option[City] = {\n    val wisconsinState = geoModel.findState(\"wisconsin\")\n    val largestCity = wisconsinState.map(_.cities.maxBy(_.size))\n    largestCity\n}"}
{"qid": "geo880_418", "query": "What is the largest city of Kansas ?", "scala": "def answer(): Option[City] = {\n    val kansasState = geoModel.findState(\"kansas\")\n    val largestCity = kansasState.map(_.cities.maxBy(_.size))\n    largestCity\n}"}
{"qid": "geo880_419", "query": "What is the largest of the states that the Rio Grande runs through ?", "scala": "def answer(): Option[State] = {\n    val rioGrandeRiver = geoModel.findRiver(\"rio grande\")\n    val statesTraversed = rioGrandeRiver.map(_.traverses)\n    statesTraversed.map(_.maxBy(_.size))\n}"}
{"qid": "geo880_420", "query": "What is the largest river in Washington state ?", "scala": "def answer(): Option[River] = {\n    val riversInWashington = geoModel.findState(\"washington\").map(_.rivers)\n    riversInWashington.map(_.maxBy(_.length))\n}"}
{"qid": "geo880_421", "query": "What is the largest state ?", "scala": "def answer(): Option[State] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    largestState\n}"}
{"qid": "geo880_422", "query": "What is the largest state bordering Arkansas ?", "scala": "def answer(): Option[State] = {\n    val arkansasState = geoModel.findState(\"arkansas\")\n    val largestState = arkansasState.map(_.nextTo.maxBy(_.area))\n    largestState\n}"}
{"qid": "geo880_423", "query": "What is the largest state bordering Texas ?", "scala": "def answer(): Option[State] = {\n    val texasState = geoModel.findState(\"texas\")\n    val largestState = texasState.map(_.nextTo.maxBy(_.area))\n    largestState\n}"}
{"qid": "geo880_424", "query": "What is the largest state capital in population ?", "scala": "def answer(): Option[City] = {\n    val capitals = geoModel.states.flatMap(_.capital)\n    val largestCapital = capitals.maxBy(_.population)\n    largestCapital\n}"}
{"qid": "geo880_425", "query": "What is the largest state in the US ?", "scala": "def answer(): Option[State] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val largestState = statesInUSA.map(_.maxBy(_.size))\n    largestState\n}"}
{"qid": "geo880_426", "query": "What is the largest state in USA ?", "scala": "def answer(): Option[State] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val largestState = statesInUSA.map(_.maxBy(_.size))\n    largestState\n}"}
{"qid": "geo880_427", "query": "What is the largest state that borders California ?", "scala": "def answer(): Option[State] = {\n    val californiaState = geoModel.findState(\"california\")\n    val statesBorderingCalifornia = californiaState.map(_.nextTo)\n    val largestState = statesBorderingCalifornia.map(_.maxBy(_.size))\n    largestState\n}"}
{"qid": "geo880_428", "query": "What is the largest state that borders Texas ?", "scala": "def answer(): Option[State] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.flatMap(_.nextTo.maxByOption(_.area))\n}"}
{"qid": "geo880_429", "query": "What is the largest state that borders the state with the highest population ?", "scala": "def answer(): Option[State] = {\n    val stateWithHighestPopulation = geoModel.states.maxBy(_.population)\n    val statesThatBorderHighestPopulation = stateWithHighestPopulation.nextTo\n    val largestState = statesThatBorderHighestPopulation.maxBy(_.area)\n    largestState\n}"}
{"qid": "geo880_430", "query": "What is the largest state that borders the state with the lowest point in the USA ?", "scala": "def answer(): Option[State] = {\n    val stateWithLowestPoint = geoModel.states.minBy(_.lowPoint.elevation)\n    val largestState = stateWithLowestPoint.nextTo.maxBy(_.population)\n    largestState\n}"}
{"qid": "geo880_431", "query": "What is the largest state traversed by the Mississippi river ?", "scala": "def answer(): Option[State] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val statesTraversedByMississippi = mississippiRiver.map(_.traverses)\n    val largestState = statesTraversedByMississippi.map(_.maxBy(_.size))\n    largestState\n}"}
{"qid": "geo880_432", "query": "What is the least populous state ?", "scala": "def answer(): Option[State] = {\n    val leastPopulousState = geoModel.states.minBy(_.population)\n    leastPopulousState\n}"}
{"qid": "geo880_433", "query": "What is the length of the Colorado river ?", "scala": "def answer(): Option[Int] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    coloradoRiver.map(_.length)\n}"}
{"qid": "geo880_434", "query": "What is the length of the Colorado river in Texas ?", "scala": "def answer(): Option[Int] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    val texasState = geoModel.findState(\"texas\")\n    val riverLength = coloradoRiver.flatMap(_.traverses.find(_ == texasState)).map(_.length)\n    riverLength\n}"}
{"qid": "geo880_435", "query": "What is the length of the longest river in the USA ?", "scala": "def answer(): Option[Int] = {\n    val riversInUSA = geoModel.rivers.filter(r => r.traverses.exists(s => geoModel.findCountry(\"usa\").exists(_.states.contains(s))))\n    val longestRiverLength = riversInUSA.map(_.maxBy(_.length).length)\n    longestRiverLength\n}"}
{"qid": "geo880_436", "query": "What is the length of the longest river that runs through Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    val longestRiverInTexas = texasState.map(_.rivers.maxBy(_.length))\n    longestRiverInTexas.map(_.length)\n}"}
{"qid": "geo880_437", "query": "What is the length of the Mississippi river ?", "scala": "def answer(): Option[Int] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.length)\n}"}
{"qid": "geo880_438", "query": "What is the length of the river that flows through the most states ?", "scala": "def answer(): Option[Int] = {\n    val riverWithMostStates = geoModel.rivers.maxBy(_.traverses.length)\n    riverWithMostStates.map(_.length)\n}"}
{"qid": "geo880_439", "query": "What is the length of the river that runs through the most number of states ?", "scala": "def answer(): Option[Int] = {\n    val longestRiver = geoModel.rivers.maxByOption(_.traverses.length)\n    longestRiver.map(_.length)\n}"}
{"qid": "geo880_440", "query": "What is the length of the river that runs through the most states ?", "scala": "def answer(): Option[Int] = {\n    val longestRiver = geoModel.rivers.maxBy(_.traverses.length)\n    longestRiver.map(_.length)\n}"}
{"qid": "geo880_441", "query": "What is the length of the river that traverses the most states ?", "scala": "def answer(): Option[Int] = {\n    val longestRiver = geoModel.rivers.maxBy(_.traverses.length)\n    longestRiver.map(_.length)\n}"}
{"qid": "geo880_442", "query": "What is the longest river ?", "scala": "def answer(): Option[River] = {\n    val longestRiver = geoModel.rivers.maxBy(_.length)\n    longestRiver\n}"}
{"qid": "geo880_443", "query": "What is the longest river flowing through New York ?", "scala": "def answer(): Option[River] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    val riversInNewYork = newYorkState.map(_.rivers)\n    riversInNewYork.map(_.maxBy(_.length))\n}"}
{"qid": "geo880_444", "query": "What is the longest river in America ?", "scala": "def answer(): Option[River] = {\n    val riversInAmerica = geoModel.findCountry(\"usa\").map(_.rivers)\n    riversInAmerica.map(_.maxBy(_.length))\n}"}
{"qid": "geo880_445", "query": "What is the longest river in California ?", "scala": "def answer(): Option[River] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.flatMap(state => Some(state.rivers.maxBy(_.length)))\n}"}
{"qid": "geo880_446", "query": "What is the longest river in Florida ?", "scala": "def answer(): Option[River] = {\n    val riversInFlorida = geoModel.findState(\"florida\").map(_.rivers)\n    riversInFlorida.flatMap(_.maxByOption(_.length))\n}"}
{"qid": "geo880_447", "query": "What is the longest river in Mississippi ?", "scala": "def answer(): Option[River] = {\n    val mississippiState = geoModel.findState(\"mississippi\")\n    mississippiState.map(_.rivers.maxBy(_.length))\n}"}
{"qid": "geo880_448", "query": "What is the longest river in New York ?", "scala": "def answer(): Option[River] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.rivers.maxBy(_.length))\n}"}
{"qid": "geo880_449", "query": "What is the longest river in Pennsylvania ?", "scala": "def answer(): Option[River] = {\n    val pennsylvaniaState = geoModel.findState(\"pennsylvania\")\n    pennsylvaniaState.map(_.rivers.maxBy(_.length))\n}"}
{"qid": "geo880_450", "query": "What is the longest river in Texas ?", "scala": "def answer(): Option[River] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.flatMap(state => Some(state.rivers.maxBy(_.length)))\n}"}
{"qid": "geo880_451", "query": "What is the longest river in the largest state ?", "scala": "def answer(): Option[River] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    val longestRiver = largestState.rivers.maxBy(_.length)\n    longestRiver\n}"}
{"qid": "geo880_452", "query": "What is the longest river in the smallest state in the USA ?", "scala": "def answer(): Option[River] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val smallestState = statesInUSA.map(_.minBy(_.size))\n    val longestRiver = smallestState.map(_.rivers.maxBy(_.length))\n    longestRiver\n}"}
{"qid": "geo880_453", "query": "What is the longest river in the state with the highest point ?", "scala": "def answer(): Option[River] = {\n    val highestPointState = geoModel.states.maxBy(_.highPoint.elevation)\n    val longestRiver = highestPointState.rivers.maxBy(_.length)\n    longestRiver\n}"}
{"qid": "geo880_454", "query": "What is the longest river in the state with the most major cities ?", "scala": "def answer(): Option[River] = {\n    val statesWithMajorCities = geoModel.states.filter(_.cities.exists(_.isMajor))\n    val stateWithMostMajorCities = statesWithMajorCities.maxBy(_.cities.length)\n    stateWithMostMajorCities.rivers.maxByOption(_.length)\n}"}
{"qid": "geo880_455", "query": "What is the longest river in the states that border Nebraska ?", "scala": "def answer(): Option[River] = {\n    val nebraskaState = geoModel.findState(\"nebraska\")\n    val borderingStates = nebraskaState.map(_.nextTo)\n    val riversInBorderingStates = borderingStates.flatMap(_.flatMap(_.rivers))\n    riversInBorderingStates.map(_.maxBy(_.length))\n}"}
{"qid": "geo880_456", "query": "What is the longest river in the United States ?", "scala": "def answer(): Option[River] = {\n    val riversInUSA = geoModel.findCountry(\"usa\").map(_.rivers)\n    riversInUSA.map(_.maxBy(_.length))\n}"}
{"qid": "geo880_457", "query": "What is the longest river in the US ?", "scala": "def answer(): Option[River] = {\n    val riversInUSA = geoModel.findCountry(\"usa\").map(_.rivers)\n    val longestRiver = riversInUSA.map(_.maxBy(_.length))\n    longestRiver\n}"}
{"qid": "geo880_458", "query": "What is the longest river that does not run through Texas ?", "scala": "def answer(): Option[River] = {\n    val riversNotInTexas = geoModel.rivers.filter(!_.traverses.contains(geoModel.findState(\"texas\")))\n    riversNotInTexas.maxByOption(_.length)\n}"}
{"qid": "geo880_459", "query": "What is the longest river that flows through a state that borders Indiana ?", "scala": "def answer(): Option[River] = {\n    val indianaState = geoModel.findState(\"indiana\")\n    val borderingStates = indianaState.map(_.nextTo)\n    val riversInBorderingStates = borderingStates.flatMap(_.flatMap(_.rivers))\n    riversInBorderingStates.maxBy(_.length)\n}"}
{"qid": "geo880_460", "query": "What is the longest river that flows through Colorado ?", "scala": "def answer(): Option[River] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    val longestRiver = coloradoState.map(_.rivers.maxBy(_.length))\n    longestRiver\n}"}
{"qid": "geo880_461", "query": "What is the longest river that passes the states that border the state that borders the most states ?", "scala": "def answer(): Option[River] = {\n    val statesWithMostNeighbors = geoModel.states.maxBy(_.nextTo.length)\n    val statesThatBorderMostStates = statesWithMostNeighbors.nextTo\n    val riversInStatesThatBorderMostStates = statesThatBorderMostStates.flatMap(_.rivers)\n    riversInStatesThatBorderMostStates.maxBy(_.length)\n}"}
{"qid": "geo880_462", "query": "What is the longest river that runs through a state that borders Tennessee ?", "scala": "def answer(): Option[River] = {\n    val tennesseeState = geoModel.findState(\"tennessee\")\n    val statesBorderingTennessee = tennesseeState.map(_.nextTo)\n    val riversInBorderingStates = statesBorderingTennessee.map(_.flatMap(_.rivers))\n    val longestRiver = riversInBorderingStates.map(_.maxBy(_.length))\n    longestRiver\n}"}
{"qid": "geo880_463", "query": "What is the lowest elevation in Pennsylvania ?", "scala": "def answer(): Option[Place] = {\n    val pennsylvaniaState = geoModel.findState(\"pennsylvania\")\n    pennsylvaniaState.map(_.places.minBy(_.elevation))\n}"}
{"qid": "geo880_464", "query": "What is the lowest point in Arkansas ?", "scala": "def answer(): Option[Place] = {\n    val arkansasState = geoModel.findState(\"arkansas\")\n    arkansasState.map(_.lowPoint)\n}"}
{"qid": "geo880_465", "query": "What is the lowest point in California ?", "scala": "def answer(): Option[Place] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.lowPoint)\n}"}
{"qid": "geo880_466", "query": "What is the lowest point in Louisiana ?", "scala": "def answer(): Option[Place] = {\n    val louisianaState = geoModel.findState(\"louisiana\")\n    louisianaState.map(_.lowPoint)\n}"}
{"qid": "geo880_467", "query": "What is the lowest point in Massachusetts ?", "scala": "def answer(): Option[Place] = {\n    val massachusettsState = geoModel.findState(\"massachusetts\")\n    massachusettsState.map(_.places.minBy(_.elevation))\n}"}
{"qid": "geo880_468", "query": "What is the lowest point in Mississippi ?", "scala": "def answer(): Option[Place] = {\n    val mississippiState = geoModel.findState(\"mississippi\")\n    mississippiState.map(_.lowPoint)\n}"}
{"qid": "geo880_470", "query": "What is the lowest point in Oregon ?", "scala": "def answer(): Option[Place] = {\n    val oregonState = geoModel.findState(\"oregon\")\n    oregonState.map(_.lowPoint)\n}"}
{"qid": "geo880_471", "query": "What is the lowest point in Texas ?", "scala": "def answer(): Option[Place] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.lowPoint)\n}"}
{"qid": "geo880_472", "query": "What is the lowest point in the state of California ?", "scala": "def answer(): Option[Place] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.lowPoint)\n}"}
{"qid": "geo880_473", "query": "What is the lowest point in the state of Texas ?", "scala": "def answer(): Option[Place] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.lowPoint)\n}"}
{"qid": "geo880_474", "query": "What is the lowest point in the United States ?", "scala": "def answer(): Option[Place] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val lowestPoint = statesInUSA.map(_.minBy(_.lowPoint.elevation).lowPoint)\n    lowestPoint\n}"}
{"qid": "geo880_475", "query": "What is the lowest point in USA ?", "scala": "def answer(): Option[Place] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val lowestPoint = statesInUSA.flatMap(_.minByOption(_.lowPoint.elevation)).map(_.lowPoint)\n    lowestPoint\n}"}
{"qid": "geo880_476", "query": "What is the lowest point in Wisconsin ?", "scala": "def answer(): Option[Place] = {\n    val wisconsinState = geoModel.findState(\"wisconsin\")\n    wisconsinState.map(_.lowPoint)\n}"}
{"qid": "geo880_477", "query": "What is the lowest point of all states through which the Colorado river runs through ?", "scala": "def answer(): Option[Place] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    val lowestPoint = coloradoRiver.flatMap(_.traverses.minBy(_.lowPoint.elevation).lowPoint)\n    lowestPoint\n}"}
{"qid": "geo880_478", "query": "What is the lowest point of Colorado ?", "scala": "def answer(): Option[Place] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.lowPoint)\n}"}
{"qid": "geo880_479", "query": "What is the lowest point of the state with the largest area ?", "scala": "def answer(): Option[Place] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    largestState.lowPoint\n}"}
{"qid": "geo880_480", "query": "What is the lowest point of the US ?", "scala": "def answer(): Option[Place] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val lowestPoint = statesInUSA.map(_.minBy(_.lowPoint.elevation).lowPoint)\n    lowestPoint\n}"}
{"qid": "geo880_481", "query": "What is the major cities in Montana ?", "scala": "def answer(): Option[List[City]] = {\n    val montanaState = geoModel.findState(\"montana\")\n    val majorCities = montanaState.map(_.cities.filter(_.isMajor))\n    majorCities\n}"}
{"qid": "geo880_483", "query": "What is the most dense state in the USA ?", "scala": "def answer(): Option[State] = {\n    val mostDenseState = geoModel.states.maxBy(_.density)\n    mostDenseState\n}"}
{"qid": "geo880_484", "query": "What is the most populated capital in the USA ?", "scala": "def answer(): Option[City] = {\n    val capitals = geoModel.states.flatMap(_.capital)\n    val mostPopulatedCapital = capitals.maxBy(_.population)\n    mostPopulatedCapital\n}"}
{"qid": "geo880_485", "query": "What is the most populated state bordering Oklahoma ?", "scala": "def answer(): Option[State] = {\n    val oklahomaState = geoModel.findState(\"oklahoma\")\n    val mostPopulatedState = oklahomaState.map(_.nextTo.maxBy(_.population))\n    mostPopulatedState\n}"}
{"qid": "geo880_486", "query": "What is the most populous city ?", "scala": "def answer(): Option[City] = {\n    val mostPopulousCity = geoModel.cities.maxBy(_.population)\n    mostPopulousCity\n}"}
{"qid": "geo880_487", "query": "What is the most populous city in Texas ?", "scala": "def answer(): Option[City] = {\n    val texasState = geoModel.findState(\"texas\")\n    val mostPopulousCity = texasState.map(_.cities.maxBy(_.population))\n    mostPopulousCity\n}"}
{"qid": "geo880_488", "query": "What is the most populous city in Wyoming ?", "scala": "def answer(): Option[City] = {\n    val citiesInWyoming = geoModel.findState(\"wyoming\").map(_.cities)\n    citiesInWyoming.map(_.maxBy(_.population))\n}"}
{"qid": "geo880_489", "query": "What is the most populous state ?", "scala": "def answer(): Option[State] = {\n    val mostPopulousState = geoModel.states.maxBy(_.population)\n    mostPopulousState\n}"}
{"qid": "geo880_490", "query": "What is the most populous state in the US ?", "scala": "def answer(): Option[State] = {\n    val mostPopulousState = geoModel.states.maxBy(_.population)\n    mostPopulousState\n}"}
{"qid": "geo880_491", "query": "What is the most populous state through which the Mississippi runs ?", "scala": "def answer(): Option[State] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val statesTraversedByMississippi = mississippiRiver.map(_.traverses)\n    statesTraversedByMississippi.map(_.maxBy(_.population))\n}"}
{"qid": "geo880_492", "query": "What is the name of the state with the lowest point ?", "scala": "def answer(): Option[String] = {\n    val lowestPoint = geoModel.places.minBy(_.elevation)\n    lowestPoint.map(_.state.name)\n}"}
{"qid": "geo880_493", "query": "What is the number of neighboring states for Kentucky ?", "scala": "def answer(): Option[Int] = {\n    val kentuckyState = geoModel.findState(\"kentucky\")\n    kentuckyState.map(_.nextTo.length)\n}"}
{"qid": "geo880_494", "query": "What is the population density in the state with capital Austin ?", "scala": "def answer(): Option[Float] = {\n    val stateWithCapitalAustin = geoModel.states.find(s => s.capital.exists(_.name == \"austin\"))\n    stateWithCapitalAustin.map(_.density)\n}"}
{"qid": "geo880_495", "query": "What is the population density of Maine ?", "scala": "def answer(): Option[Float] = {\n    val maineState = geoModel.findState(\"maine\")\n    maineState.map(_.density)\n}"}
{"qid": "geo880_496", "query": "What is the population density of South Dakota ?", "scala": "def answer(): Option[Float] = {\n    val southDakotaState = geoModel.findState(\"south dakota\")\n    southDakotaState.map(_.density)\n}"}
{"qid": "geo880_497", "query": "What is the population density of Texas ?", "scala": "def answer(): Option[Float] = {\n    val texas = geoModel.findState(\"texas\")\n    texas.map(_.density)\n}"}
{"qid": "geo880_498", "query": "What is the population density of the largest state ?", "scala": "def answer(): Option[Float] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    largestState.map(_.density)\n}"}
{"qid": "geo880_499", "query": "What is the population density of the smallest state ?", "scala": "def answer(): Option[Float] = {\n    val smallestState = geoModel.states.minBy(_.size)\n    smallestState.map(_.density)\n}"}
{"qid": "geo880_500", "query": "What is the population density of the state with the smallest area ?", "scala": "def answer(): Option[Float] = {\n    val smallestState = geoModel.states.minBy(_.area)\n    smallestState.map(_.density)\n}"}
{"qid": "geo880_501", "query": "What is the population density of the state with the smallest population ?", "scala": "def answer(): Option[Float] = {\n    val smallestState = geoModel.states.minBy(_.population)\n    smallestState.map(_.density)\n}"}
{"qid": "geo880_502", "query": "What is the population density of Wyoming ?", "scala": "def answer(): Option[Float] = {\n    val wyomingState = geoModel.findState(\"wyoming\")\n    wyomingState.map(_.density)\n}"}
{"qid": "geo880_503", "query": "What is the population in Boston ?", "scala": "def answer(): Option[Int] = {\n    val bostonCity = geoModel.findCity(\"boston\")\n    bostonCity.map(_.population)\n}"}
{"qid": "geo880_504", "query": "What is the population of Alaska ?", "scala": "def answer(): Option[Int] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.population)\n}"}
{"qid": "geo880_505", "query": "What is the population of Arizona ?", "scala": "def answer(): Option[Int] = {\n    val arizonaState = geoModel.findState(\"arizona\")\n    arizonaState.map(_.population)\n}"}
{"qid": "geo880_506", "query": "What is the population of Atlanta ?", "scala": "def answer(): Option[Int] = {\n    val atlantaCity = geoModel.findCity(\"atlanta\")\n    atlantaCity.map(_.population)\n}"}
{"qid": "geo880_507", "query": "What is the population of Atlanta GA ?", "scala": "def answer(): Option[Int] = {\n    val atlantaCity = geoModel.findCity(\"atlanta\", Some(\"ga\"))\n    atlantaCity.map(_.population)\n}"}
{"qid": "geo880_508", "query": "What is the population of Austin ?", "scala": "def answer(): Option[Int] = {\n    val austinCity = geoModel.findCity(\"austin\")\n    austinCity.map(_.population)\n}"}
{"qid": "geo880_509", "query": "What is the population of Austin Texas ?", "scala": "def answer(): Option[Int] = {\n    val austinCity = geoModel.findCity(\"austin\", Some(\"tx\"))\n    austinCity.map(_.population)\n}"}
{"qid": "geo880_510", "query": "What is the population of Boston Massachusetts ?", "scala": "def answer(): Option[Int] = {\n    val bostonCity = geoModel.findCity(\"boston\", Some(\"ma\"))\n    bostonCity.map(_.population)\n}"}
{"qid": "geo880_511", "query": "What is the population of Boulder ?", "scala": "def answer(): Option[Int] = {\n    val boulderCity = geoModel.findCity(\"boulder\")\n    boulderCity.map(_.population)\n}"}
{"qid": "geo880_512", "query": "What is the population of California ?", "scala": "def answer(): Option[Int] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.population)\n}"}
{"qid": "geo880_513", "query": "What is the population of Dallas ?", "scala": "def answer(): Option[Int] = {\n    val dallasCity = geoModel.findCity(\"dallas\")\n    dallasCity.map(_.population)\n}"}
{"qid": "geo880_514", "query": "What is the population of Denver ?", "scala": "def answer(): Option[Int] = {\n    val denverCity = geoModel.findCity(\"denver\")\n    denverCity.map(_.population)\n}"}
{"qid": "geo880_515", "query": "What is the population of Erie Pennsylvania ?", "scala": "def answer(): Option[Int] = {\n    val erieCity = geoModel.findCity(\"erie\", Some(\"pa\"))\n    erieCity.map(_.population)\n}"}
{"qid": "geo880_516", "query": "What is the population of Hawaii ?", "scala": "def answer(): Option[Int] = {\n    val hawaiiState = geoModel.findState(\"hawaii\")\n    hawaiiState.map(_.population)\n}"}
{"qid": "geo880_517", "query": "What is the population of Houston ?", "scala": "def answer(): Option[Int] = {\n    val houstonCity = geoModel.findCity(\"houston\")\n    houstonCity.map(_.population)\n}"}
{"qid": "geo880_518", "query": "What is the population of Idaho ?", "scala": "def answer(): Option[Int] = {\n    val idahoState = geoModel.findState(\"idaho\")\n    idahoState.map(_.population)\n}"}
{"qid": "geo880_519", "query": "What is the population of Illinois ?", "scala": "def answer(): Option[Int] = {\n    val illinoisState = geoModel.findState(\"illinois\")\n    illinoisState.map(_.population)\n}"}
{"qid": "geo880_520", "query": "What is the population of Maine ?", "scala": "def answer(): Option[Int] = {\n    val maineState = geoModel.findState(\"maine\")\n    maineState.map(_.population)\n}"}
{"qid": "geo880_521", "query": "What is the population of Maryland ?", "scala": "def answer(): Option[Int] = {\n    val marylandState = geoModel.findState(\"maryland\")\n    marylandState.map(_.population)\n}"}
{"qid": "geo880_522", "query": "What is the population of Minnesota ?", "scala": "def answer(): Option[Int] = {\n    val minnesotaState = geoModel.findState(\"minnesota\")\n    minnesotaState.map(_.population)\n}"}
{"qid": "geo880_523", "query": "What is the population of Montana ?", "scala": "def answer(): Option[Int] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.population)\n}"}
{"qid": "geo880_524", "query": "What is the population of New Mexico ?", "scala": "def answer(): Option[Int] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    newMexicoState.map(_.population)\n}"}
{"qid": "geo880_525", "query": "What is the population of New York ?", "scala": "def answer(): Option[Int] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.population)\n}"}
{"qid": "geo880_526", "query": "What is the population of New York City ?", "scala": "def answer(): Option[Int] = {\n    val newYorkCity = geoModel.findCity(\"new york\")\n    newYorkCity.map(_.population)\n}"}
{"qid": "geo880_527", "query": "What is the population of Oregon ?", "scala": "def answer(): Option[Int] = {\n    val oregonState = geoModel.findState(\"oregon\")\n    oregonState.map(_.population)\n}"}
{"qid": "geo880_528", "query": "What is the population of Portland Maine ?", "scala": "def answer(): Option[Int] = {\n    val portlandCity = geoModel.findCity(\"portland\", Some(\"me\"))\n    portlandCity.map(_.population)\n}"}
{"qid": "geo880_529", "query": "What is the population of Rhode Island ?", "scala": "def answer(): Option[Int] = {\n    val rhodeIslandState = geoModel.findState(\"rhode island\")\n    rhodeIslandState.map(_.population)\n}"}
{"qid": "geo880_530", "query": "What is the population of Sacramento ?", "scala": "def answer(): Option[Int] = {\n    val sacramentoCity = geoModel.findCity(\"sacramento\")\n    sacramentoCity.map(_.population)\n}"}
{"qid": "geo880_531", "query": "What is the population of San Antonio ?", "scala": "def answer(): Option[Int] = {\n    val sanAntonioCity = geoModel.findCity(\"san antonio\")\n    sanAntonioCity.map(_.population)\n}"}
{"qid": "geo880_532", "query": "What is the population of Seattle ?", "scala": "def answer(): Option[Int] = {\n    val seattleCity = geoModel.findCity(\"seattle\")\n    seattleCity.map(_.population)\n}"}
{"qid": "geo880_533", "query": "What is the population of Seattle Washington ?", "scala": "def answer(): Option[Int] = {\n    val seattleCity = geoModel.findCity(\"seattle\", Some(\"wa\"))\n    seattleCity.map(_.population)\n}"}
{"qid": "geo880_534", "query": "What is the population of South Dakota ?", "scala": "def answer(): Option[Int] = {\n    val southDakotaState = geoModel.findState(\"south dakota\")\n    southDakotaState.map(_.population)\n}"}
{"qid": "geo880_537", "query": "What is the population of Tempe Arizona ?", "scala": "def answer(): Option[Int] = {\n    val tempeCity = geoModel.findCity(\"tempe\", Some(\"az\"))\n    tempeCity.map(_.population)\n}"}
{"qid": "geo880_538", "query": "What is the population of Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.population)\n}"}
{"qid": "geo880_539", "query": "What is the population of the capital of the largest state ?", "scala": "def answer(): Option[Int] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    largestState.flatMap(_.capital.map(_.population))\n}"}
{"qid": "geo880_540", "query": "What is the population of the capital of the largest state through which the Mississippi runs ?", "scala": "def answer(): Option[Int] = {\n    val statesThroughMississippi = geoModel.states.filter(_.rivers.contains(geoModel.findRiver(\"mississippi\")))\n    val largestState = statesThroughMississippi.maxBy(_.size)\n    largestState.capital.map(_.population)\n}"}
{"qid": "geo880_541", "query": "What is the population of the capital of the smallest state ?", "scala": "def answer(): Option[Int] = {\n    val smallestState = geoModel.states.minBy(_.area)\n    smallestState.flatMap(_.capital.map(_.population))\n}"}
{"qid": "geo880_542", "query": "What is the population of the largest city in the state with the largest area ?", "scala": "def answer(): Option[Int] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    val largestCityInLargestState = largestState.cities.maxBy(_.population)\n    largestCityInLargestState.map(_.population)\n}"}
{"qid": "geo880_543", "query": "What is the population of the largest state ?", "scala": "def answer(): Option[Int] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    largestState.map(_.population)\n}"}
{"qid": "geo880_544", "query": "What is the population of the largest state that borders Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    val borderingStates = texasState.map(_.nextTo)\n    val largestState = borderingStates.flatMap(_.maxBy(_.size))\n    largestState.map(_.population)\n}"}
{"qid": "geo880_545", "query": "What is the population of the major cities in Wisconsin ?", "scala": "def answer(): Option[List[Int]] = {\n    val wisconsinState = geoModel.findState(\"wisconsin\")\n    val majorCities = wisconsinState.map(_.cities.filter(_.isMajor))\n    val populations = majorCities.map(_.map(_.population))\n    populations\n}"}
{"qid": "geo880_547", "query": "What is the population of the state that borders the most states ?", "scala": "def answer(): Option[Int] = {\n    val statesWithMostNeighbors = geoModel.states.maxBy(_.nextTo.length)\n    statesWithMostNeighbors.map(_.population)\n}"}
{"qid": "geo880_548", "query": "What is the population of the state with the highest population density ?", "scala": "def answer(): Option[Int] = {\n    val stateWithHighestDensity = geoModel.states.maxBy(_.density)\n    stateWithHighestDensity.map(_.population)\n}"}
{"qid": "geo880_549", "query": "What is the population of the state with the largest area ?", "scala": "def answer(): Option[Int] = {\n    val largestState = geoModel.states.maxBy(_.area)\n    largestState.map(_.population)\n}"}
{"qid": "geo880_550", "query": "What is the population of Tucson ?", "scala": "def answer(): Option[Int] = {\n    val tucsonCity = geoModel.findCity(\"tucson\")\n    tucsonCity.map(_.population)\n}"}
{"qid": "geo880_551", "query": "What is the population of Utah ?", "scala": "def answer(): Option[Int] = {\n    val utahState = geoModel.findState(\"utah\")\n    utahState.map(_.population)\n}"}
{"qid": "geo880_552", "query": "What is the population of Washington ?", "scala": "def answer(): Option[Int] = {\n    val washingtonState = geoModel.findState(\"washington\")\n    washingtonState.map(_.population)\n}"}
{"qid": "geo880_554", "query": "What is the river that cross over Ohio ?", "scala": "def answer(): Option[List[River]] = {\n    val ohioState = geoModel.findState(\"ohio\")\n    ohioState.map(_.rivers)\n}"}
{"qid": "geo880_555", "query": "What is the shortest river ?", "scala": "def answer(): Option[River] = {\n    geoModel.rivers.minByOption(_.length)\n}"}
{"qid": "geo880_556", "query": "What is the shortest river in Alaska ?", "scala": "def answer(): Option[River] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.rivers.minBy(_.length))\n}"}
{"qid": "geo880_557", "query": "What is the shortest river in Iowa ?", "scala": "def answer(): Option[River] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    iowaState.map(_.rivers.minBy(_.length))\n}"}
{"qid": "geo880_558", "query": "What is the shortest river in Nebraska ?", "scala": "scala\ndef answer(): Option[River] = {\n    val nebraskaState = geoModel.findState(\"nebraska\")\n    val shortestRiver = nebraskaState.map(_.rivers.minBy(_.length))\n    shortestRiver\n}"}
{"qid": "geo880_559", "query": "What is the shortest river in Texas ?", "scala": "def answer(): Option[River] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.rivers.minBy(_.length))\n}"}
{"qid": "geo880_560", "query": "What is the shortest river in the United States ?", "scala": "def answer(): Option[River] = {\n    val shortestRiver = geoModel.rivers.minBy(_.length)\n    shortestRiver\n}"}
{"qid": "geo880_561", "query": "What is the shortest river in the US ?", "scala": "def answer(): Option[River] = {\n    val shortestRiver = geoModel.rivers.minBy(_.length)\n    shortestRiver\n}"}
{"qid": "geo880_562", "query": "What is the shortest river in the USA ?", "scala": "scala\ndef answer(): Option[River] = {\n    val shortestRiver = geoModel.rivers.minBy(_.length)\n    shortestRiver\n}"}
{"qid": "geo880_563", "query": "What is the size of California ?", "scala": "def answer(): Option[Int] = {\n    val californiaState = geoModel.findState(\"california\")\n    californiaState.map(_.size)\n}"}
{"qid": "geo880_564", "query": "What is the size of Florida ?", "scala": "def answer(): Option[Int] = {\n    val floridaState = geoModel.findState(\"florida\")\n    floridaState.map(_.size)\n}"}
{"qid": "geo880_565", "query": "What is the size of Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.area)\n}"}
{"qid": "geo880_566", "query": "What is the size of the capital of Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.flatMap(_.capital.map(_.size))\n}"}
{"qid": "geo880_567", "query": "What is the size of the largest state in the USA ?", "scala": "def answer(): Option[Int] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val largestStateSize = statesInUSA.map(_.maxBy(_.size).size)\n    largestStateSize\n}"}
{"qid": "geo880_568", "query": "What is the smallest city in Alaska ?", "scala": "def answer(): Option[City] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.cities.minBy(_.size))\n}"}
{"qid": "geo880_569", "query": "What is the smallest city in Arkansas ?", "scala": "def answer(): Option[City] = {\n    val arkansasState = geoModel.findState(\"arkansas\")\n    arkansasState.map(_.cities.minBy(_.size))\n}"}
{"qid": "geo880_570", "query": "What is the smallest city in Hawaii ?", "scala": "def answer(): Option[City] = {\n    val citiesInHawaii = geoModel.findState(\"hawaii\").map(_.cities)\n    citiesInHawaii.map(_.minBy(_.size))\n}"}
{"qid": "geo880_571", "query": "What is the smallest city in the largest state ?", "scala": "def answer(): Option[City] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    val smallestCity = largestState.cities.minBy(_.size)\n    Some(smallestCity)\n}"}
{"qid": "geo880_572", "query": "What is the smallest city in the US ?", "scala": "def answer(): Option[City] = {\n    geoModel.cities.minByOption(_.size)\n}"}
{"qid": "geo880_573", "query": "What is the smallest city in the USA ?", "scala": "def answer(): Option[City] = {\n    val citiesInUSA = geoModel.findCountry(\"usa\").map(_.cities)\n    citiesInUSA.flatMap(_.minByOption(_.size))\n}"}
{"qid": "geo880_574", "query": "What is the smallest city in Washington ?", "scala": "def answer(): Option[City] = {\n    val washingtonState = geoModel.findState(\"washington\")\n    val smallestCity = washingtonState.map(_.cities.minBy(_.size))\n    smallestCity\n}"}
{"qid": "geo880_575", "query": "What is the smallest city of the smallest state in the US ?", "scala": "def answer(): Option[City] = {\n    val smallestState = geoModel.states.minBy(_.area)\n    val smallestCity = smallestState.cities.minBy(_.size)\n    smallestCity\n}"}
{"qid": "geo880_576", "query": "What is the smallest state bordering Ohio ?", "scala": "def answer(): Option[State] = {\n    val ohioState = geoModel.findState(\"ohio\")\n    val smallestState = ohioState.map(_.nextTo.minBy(_.area))\n    smallestState\n}"}
{"qid": "geo880_577", "query": "What is the smallest state bordering Wyoming ?", "scala": "def answer(): Option[State] = {\n    val wyomingState = geoModel.findState(\"wyoming\")\n    val smallestState = wyomingState.map(_.nextTo.minBy(_.area))\n    smallestState\n}"}
{"qid": "geo880_578", "query": "What is the smallest state by area ?", "scala": "def answer(): Option[State] = {\n    val smallestState = geoModel.states.minBy(_.area)\n    smallestState\n}"}
{"qid": "geo880_579", "query": "What is the smallest state in the USA ?", "scala": "def answer(): Option[State] = {\n    val smallestState = geoModel.findCountry(\"usa\").map(_.states.minBy(_.size))\n    smallestState\n}"}
{"qid": "geo880_580", "query": "What is the smallest state that borders Texas ?", "scala": "def answer(): Option[State] = {\n    val statesBorderingTexas = geoModel.findState(\"texas\").map(_.nextTo)\n    val smallestState = statesBorderingTexas.map(_.minBy(_.size))\n    smallestState\n}"}
{"qid": "geo880_582", "query": "What is the smallest state that the Mississippi river runs through ?", "scala": "def answer(): Option[State] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.flatMap(_.traverses.minBy(_.area))\n}"}
{"qid": "geo880_583", "query": "What is the smallest state through which the longest river runs ?", "scala": "def answer(): Option[State] = {\n    val longestRiver = geoModel.rivers.maxBy(_.length)\n    val smallestState = longestRiver.traverses.minBy(_.area)\n    Some(smallestState)\n}"}
{"qid": "geo880_584", "query": "What is the state that contains the highest point ?", "scala": "def answer(): Option[State] = {\n    val highestPoint = geoModel.places.maxBy(_.elevation)\n    highestPoint.map(_.state)\n}"}
{"qid": "geo880_585", "query": "What is the state with the highest elevation in the United States ?", "scala": "def answer(): Option[State] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val stateWithHighestElevation = statesInUSA.map(_.maxBy(_.highPoint.elevation))\n    stateWithHighestElevation\n}"}
{"qid": "geo880_586", "query": "What is the state with the largest area ?", "scala": "def answer(): Option[State] = {\n    val stateWithLargestArea = geoModel.states.maxBy(_.area)\n    stateWithLargestArea\n}"}
{"qid": "geo880_587", "query": "What is the state with the largest density in USA ?", "scala": "def answer(): Option[State] = {\n    val statesInUSA = geoModel.findCountry(\"usa\").map(_.states)\n    val stateWithLargestDensity = statesInUSA.map(_.maxBy(_.density))\n    stateWithLargestDensity\n}"}
{"qid": "geo880_588", "query": "What is the state with the largest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithLargestDensity = geoModel.states.maxBy(_.density)\n    stateWithLargestDensity\n}"}
{"qid": "geo880_589", "query": "What is the state with the lowest point ?", "scala": "def answer(): Option[State] = {\n    val stateWithLowestPoint = geoModel.states.minBy(_.lowPoint.elevation)\n    stateWithLowestPoint\n}"}
{"qid": "geo880_590", "query": "What is the state with the lowest population ?", "scala": "def answer(): Option[State] = {\n    val stateWithLowestPopulation = geoModel.states.minBy(_.population)\n    stateWithLowestPopulation\n}"}
{"qid": "geo880_591", "query": "What is the state with the lowest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithLowestDensity = geoModel.states.minBy(_.density)\n    stateWithLowestDensity\n}"}
{"qid": "geo880_592", "query": "What is the state with the smallest area ?", "scala": "def answer(): Option[State] = {\n    val smallestAreaState = geoModel.states.minBy(_.area)\n    smallestAreaState\n}"}
{"qid": "geo880_596", "query": "What is the total length of all rivers in the USA ?", "scala": "def answer(): Option[Int] = {\n    val riversInUSA = geoModel.findCountry(\"usa\").map(_.rivers)\n    riversInUSA.map(_.map(_.length).sum)\n}"}
{"qid": "geo880_597", "query": "What is the total population of the states that border Texas ?", "scala": "def answer(): Option[Int] = {\n    val texasState = geoModel.findState(\"texas\")\n    val totalPopulation = texasState.map(_.nextTo.map(_.population).sum)\n    totalPopulation\n}"}
{"qid": "geo880_598", "query": "What length is the Mississippi ?", "scala": "def answer(): Option[Int] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.length)\n}"}
{"qid": "geo880_599", "query": "What major cities are located in Pennsylvania ?", "scala": "def answer(): Option[List[City]] = {\n    val pennsylvaniaState = geoModel.findState(\"pennsylvania\")\n    pennsylvaniaState.map(_.cities.filter(_.isMajor))\n}"}
{"qid": "geo880_600", "query": "What major rivers run through Illinois ?", "scala": "def answer(): Option[List[River]] = {\n    val illinoisState = geoModel.findState(\"illinois\")\n    val majorRivers = illinoisState.map(_.rivers.filter(_.isMajor))\n    majorRivers\n}"}
{"qid": "geo880_601", "query": "What mountains are in Alaska ?", "scala": "def answer(): Option[List[Mountain]] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.mountains)\n}"}
{"qid": "geo880_602", "query": "What river flows through Kansas ?", "scala": "def answer(): Option[List[River]] = {\n    val kansasState = geoModel.findState(\"kansas\")\n    kansasState.map(_.rivers)\n}"}
{"qid": "geo880_603", "query": "What river flows through Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.rivers)\n}"}
{"qid": "geo880_604", "query": "What river flows through the most states ?", "scala": "def answer(): Option[River] = {\n    val riverWithMostStates = geoModel.rivers.maxBy(_.traverses.length)\n    riverWithMostStates\n}"}
{"qid": "geo880_605", "query": "What river is the longest one in the United States ?", "scala": "def answer(): Option[River] = {\n    val rivers = geoModel.findCountry(\"usa\").map(_.rivers)\n    rivers.flatMap(_.maxByOption(_.length))\n}"}
{"qid": "geo880_606", "query": "What river runs through Illinois ?", "scala": "def answer(): Option[List[River]] = {\n    val illinoisState = geoModel.findState(\"illinois\")\n    illinoisState.map(_.rivers)\n}"}
{"qid": "geo880_607", "query": "What river runs through the most states ?", "scala": "def answer(): Option[River] = {\n    val riverWithMostStates = geoModel.rivers.maxBy(_.traverses.length)\n    riverWithMostStates\n}"}
{"qid": "geo880_608", "query": "What river runs through the state with the most cities ?", "scala": "def answer(): Option[River] = {\n    val stateWithMostCities = geoModel.states.maxBy(_.cities.length)\n    val riverInStateWithMostCities = stateWithMostCities.rivers.maxBy(_.length)\n    riverInStateWithMostCities\n}"}
{"qid": "geo880_609", "query": "What river runs through Virginia ?", "scala": "def answer(): Option[List[River]] = {\n    val virginiaState = geoModel.findState(\"virginia\")\n    virginiaState.map(_.rivers)\n}"}
{"qid": "geo880_610", "query": "What river traverses the most states ?", "scala": "def answer(): Option[River] = {\n    val riverWithMostTraverses = geoModel.rivers.maxBy(_.traverses.length)\n    riverWithMostTraverses\n}"}
{"qid": "geo880_611", "query": "What river traverses the state which borders the most states ?", "scala": "def answer(): Option[List[River]] = {\n    val stateWithMostBorders = geoModel.states.maxBy(_.nextTo.length)\n    val riversInStateWithMostBorders = stateWithMostBorders.rivers.filter(_.traverses.contains(stateWithMostBorders))\n    Some(riversInStateWithMostBorders)\n}"}
{"qid": "geo880_612", "query": "What rivers are in Nevada ?", "scala": "def answer(): Option[List[River]] = {\n    val nevadaState = geoModel.findState(\"nevada\")\n    nevadaState.map(_.rivers)\n}"}
{"qid": "geo880_613", "query": "What rivers are in New Mexico ?", "scala": "def answer(): Option[List[River]] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    newMexicoState.map(_.rivers)\n}"}
{"qid": "geo880_614", "query": "What rivers are in Oregon ?", "scala": "def answer(): Option[List[River]] = {\n    val oregonState = geoModel.findState(\"oregon\")\n    oregonState.map(_.rivers)\n}"}
{"qid": "geo880_615", "query": "What rivers are in states that border Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val borderingStates = texasState.map(_.nextTo)\n    val rivers = borderingStates.flatMap(_.flatMap(_.rivers))\n    rivers\n}"}
{"qid": "geo880_616", "query": "What rivers are in Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.rivers)\n}"}
{"qid": "geo880_617", "query": "What rivers are in Utah ?", "scala": "def answer(): Option[List[River]] = {\n    val utahState = geoModel.findState(\"utah\")\n    utahState.map(_.rivers)\n}"}
{"qid": "geo880_618", "query": "What rivers are there in Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.rivers)\n}"}
{"qid": "geo880_619", "query": "What rivers do not run through Tennessee ?", "scala": "def answer(): Option[List[River]] = {\n    val tennesseeState = geoModel.findState(\"tennessee\")\n    val riversInTennessee = tennesseeState.map(_.rivers)\n    val allRivers = Some(geoModel.rivers)\n    val riversNotInTennessee = for {\n        rivers <- allRivers\n        tennesseeRivers <- riversInTennessee\n    } yield rivers.filterNot(tennesseeRivers.contains)\n    riversNotInTennessee\n}"}
{"qid": "geo880_620", "query": "What rivers flow though Colorado ?", "scala": "def answer(): Option[List[River]] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.rivers)\n}"}
{"qid": "geo880_621", "query": "What rivers flow through Missouri ?", "scala": "def answer(): Option[List[River]] = {\n    val missouriState = geoModel.findState(\"missouri\")\n    missouriState.map(_.rivers)\n}"}
{"qid": "geo880_622", "query": "What rivers flow through states that Alabama borders ?", "scala": "def answer(): Option[List[River]] = {\n    val alabamaState = geoModel.findState(\"alabama\")\n    val statesBorderingAlabama = alabamaState.map(_.nextTo)\n    val riversInStatesBorderingAlabama = statesBorderingAlabama.map(_.flatMap(_.rivers))\n    riversInStatesBorderingAlabama\n}"}
{"qid": "geo880_623", "query": "What rivers flow through states that border the state with the largest population ?", "scala": "def answer(): Option[List[River]] = {\n    val largestState = geoModel.states.maxBy(_.population)\n    val statesBorderingLargestState = largestState.nextTo\n    val riversInStatesBorderingLargestState = statesBorderingLargestState.flatMap(_.rivers)\n    Some(riversInStatesBorderingLargestState)\n}"}
{"qid": "geo880_624", "query": "What rivers flow through the largest state ?", "scala": "def answer(): Option[List[River]] = {\n    val largestState = geoModel.states.maxBy(_.size)\n    largestState.rivers\n}"}
{"qid": "geo880_625", "query": "What rivers flow through the state with the largest population ?", "scala": "def answer(): Option[List[River]] = {\n    val largestState = geoModel.states.maxBy(_.population)\n    largestState.map(_.rivers)\n}"}
{"qid": "geo880_626", "query": "What rivers run through Arizona ?", "scala": "def answer(): Option[List[River]] = {\n    val arizonaState = geoModel.findState(\"arizona\")\n    arizonaState.map(_.rivers)\n}"}
{"qid": "geo880_627", "query": "What rivers run through Austin Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val austinCity = geoModel.findCity(\"austin\", Some(\"tx\"))\n    val austinState = austinCity.map(_.state)\n    val riversInAustin = austinState.flatMap(state => Some(state.rivers.filter(_.traverses.contains(austinCity))))\n    riversInAustin\n}"}
{"qid": "geo880_628", "query": "What rivers run through Colorado ?", "scala": "def answer(): Option[List[River]] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.rivers)\n}"}
{"qid": "geo880_629", "query": "What rivers run through Louisiana ?", "scala": "def answer(): Option[List[River]] = {\n    val louisianaState = geoModel.findState(\"louisiana\")\n    louisianaState.map(_.rivers)\n}"}
{"qid": "geo880_630", "query": "What rivers run through Maine ?", "scala": "def answer(): Option[List[River]] = {\n    val maineState = geoModel.findState(\"maine\")\n    maineState.map(_.rivers)\n}"}
{"qid": "geo880_631", "query": "What rivers run through New York ?", "scala": "def answer(): Option[List[River]] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.rivers)\n}"}
{"qid": "geo880_632", "query": "What rivers run through the state with the lowest point in the USA ?", "scala": "def answer(): Option[List[River]] = {\n    val lowestState = geoModel.states.minBy(_.lowPoint.elevation)\n    lowestState.map(_.rivers)\n}"}
{"qid": "geo880_633", "query": "What rivers run through the states that border the state with the capital Atlanta ?", "scala": "def answer(): Option[List[River]] = {\n    val atlantaCity = geoModel.findCity(\"atlanta\")\n    val atlantaState = atlantaCity.map(_.state)\n    val borderingStates = atlantaState.map(_.nextTo)\n    val rivers = borderingStates.flatMap(_.flatMap(_.rivers))\n    rivers\n}"}
{"qid": "geo880_634", "query": "What rivers run through West Virginia ?", "scala": "def answer(): Option[List[River]] = {\n    val westVirginiaState = geoModel.findState(\"west virginia\")\n    westVirginiaState.map(_.rivers)\n}"}
{"qid": "geo880_635", "query": "What rivers traverses the state which borders the most states ?", "scala": "def answer(): Option[List[River]] = {\n    val stateWithMostBorders = geoModel.states.maxBy(_.nextTo.length)\n    stateWithMostBorders.map(_.rivers)\n}"}
{"qid": "geo880_636", "query": "What state bordering Nevada has the largest population ?", "scala": "def answer(): Option[State] = {\n    val nevadaState = geoModel.findState(\"nevada\")\n    val borderingStates = nevadaState.map(_.nextTo)\n    borderingStates.map(_.maxBy(_.population))\n}"}
{"qid": "geo880_637", "query": "What state borders Michigan ?", "scala": "def answer(): Option[List[State]] = {\n    val michiganState = geoModel.findState(\"michigan\")\n    michiganState.map(_.nextTo)\n}"}
{"qid": "geo880_638", "query": "What state borders most other states ?", "scala": "def answer(): Option[State] = {\n    val states = geoModel.states\n    val stateWithMostBorders = states.maxBy(_.nextTo.length)\n    stateWithMostBorders\n}"}
{"qid": "geo880_639", "query": "What state borders New York ?", "scala": "def answer(): Option[List[State]] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.nextTo)\n}"}
{"qid": "geo880_640", "query": "What state borders the least states ?", "scala": "def answer(): Option[State] = {\n    val stateWithLeastNeighbors = geoModel.states.minBy(_.nextTo.length)\n    stateWithLeastNeighbors\n}"}
{"qid": "geo880_641", "query": "What state borders the least states excluding Alaska and excluding Hawaii ?", "scala": "def answer(): Option[State] = {\n    val statesExcludingAlaskaAndHawaii = geoModel.states.filterNot(s => s.name == \"alaska\" || s.name == \"hawaii\")\n    val stateWithLeastBorders = statesExcludingAlaskaAndHawaii.minBy(_.nextTo.length)\n    stateWithLeastBorders\n}"}
{"qid": "geo880_642", "query": "What state borders the most states ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostBorders = geoModel.states.maxBy(_.nextTo.length)\n    stateWithMostBorders\n}"}
{"qid": "geo880_643", "query": "What state borders the state with the smallest population ?", "scala": "def answer(): Option[List[State]] = {\n    val smallestState = geoModel.states.minBy(_.population)\n    smallestState.map(_.nextTo)\n}"}
{"qid": "geo880_644", "query": "What state contains the highest point in the US ?", "scala": "def answer(): Option[State] = {\n    val highestPoint = geoModel.places.maxBy(_.elevation)\n    highestPoint.map(_.state)\n}"}
{"qid": "geo880_645", "query": "What state contains the highest point of those the Colorado river traverses ?", "scala": "def answer(): Option[State] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    val statesTraversedByColorado = coloradoRiver.map(_.traverses)\n    statesTraversedByColorado.flatMap(_.maxByOption(_.highPoint.elevation))\n}"}
{"qid": "geo880_646", "query": "What state has highest elevation ?", "scala": "def answer(): Option[State] = {\n    val stateWithHighestElevation = geoModel.states.maxBy(_.highPoint.elevation)\n    stateWithHighestElevation\n}"}
{"qid": "geo880_647", "query": "What state has no rivers ?", "scala": "def answer(): Option[List[State]] = {\n    val statesWithNoRivers = geoModel.states.filter(_.rivers.isEmpty)\n    statesWithNoRivers\n}"}
{"qid": "geo880_648", "query": "What state has the capital Salem ?", "scala": "def answer(): Option[State] = {\n    val salemCity = geoModel.findCity(\"salem\")\n    salemCity.map(_.state)\n}"}
{"qid": "geo880_649", "query": "What state has the city Flint ?", "scala": "def answer(): Option[State] = {\n    val flintCity = geoModel.findCity(\"flint\")\n    val state = flintCity.map(_.state)\n    state\n}"}
{"qid": "geo880_650", "query": "What state has the city with the largest population ?", "scala": "def answer(): Option[State] = {\n    val largestCity = geoModel.cities.maxBy(_.population)\n    largestCity.map(_.state)\n}"}
{"qid": "geo880_651", "query": "What state has the city with the most population ?", "scala": "def answer(): Option[State] = {\n    val mostPopulousCity = geoModel.cities.maxBy(_.population)\n    mostPopulousCity.state\n}"}
{"qid": "geo880_652", "query": "What state has the greatest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithGreatestDensity = geoModel.states.maxBy(_.density)\n    stateWithGreatestDensity\n}"}
{"qid": "geo880_653", "query": "What state has the highest elevation ?", "scala": "def answer(): Option[State] = {\n    val stateWithHighestElevation = geoModel.states.maxBy(_.highPoint.elevation)\n    stateWithHighestElevation\n}"}
{"qid": "geo880_654", "query": "What state has the highest population ?", "scala": "def answer(): Option[State] = {\n    val stateWithHighestPopulation = geoModel.states.maxBy(_.population)\n    stateWithHighestPopulation\n}"}
{"qid": "geo880_655", "query": "What state has the highest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithHighestDensity = geoModel.states.maxBy(_.density)\n    stateWithHighestDensity\n}"}
{"qid": "geo880_656", "query": "What state has the largest area ?", "scala": "def answer(): Option[State] = {\n    val stateWithLargestArea = geoModel.states.maxBy(_.area)\n    stateWithLargestArea\n}"}
{"qid": "geo880_657", "query": "What state has the largest capital ?", "scala": "def answer(): Option[State] = {\n    val capitals = geoModel.cities.filter(_.isCapital)\n    val largestCapital = capitals.maxBy(_.size)\n    largestCapital.state\n}"}
{"qid": "geo880_658", "query": "What state has the largest city ?", "scala": "def answer(): Option[State] = {\n    val largestCity = geoModel.cities.maxBy(_.population)\n    largestCity.state\n}"}
{"qid": "geo880_659", "query": "What state has the largest population ?", "scala": "def answer(): Option[State] = {\n    val stateWithLargestPopulation = geoModel.states.maxBy(_.population)\n    stateWithLargestPopulation\n}"}
{"qid": "geo880_660", "query": "What state has the largest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithLargestDensity = geoModel.states.maxBy(_.density)\n    stateWithLargestDensity\n}"}
{"qid": "geo880_661", "query": "What state has the largest urban population ?", "scala": "def answer(): Option[State] = {\n    val stateWithLargestUrbanPopulation = geoModel.states.maxBy(_.population)\n    stateWithLargestUrbanPopulation\n}"}
{"qid": "geo880_662", "query": "What state has the least population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithLeastDensity = geoModel.states.minBy(_.density)\n    stateWithLeastDensity\n}"}
{"qid": "geo880_664", "query": "What state has the lowest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithLowestDensity = geoModel.states.minBy(_.density)\n    stateWithLowestDensity\n}"}
{"qid": "geo880_665", "query": "What state has the most cities ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostCities = geoModel.states.maxBy(_.cities.length)\n    stateWithMostCities\n}"}
{"qid": "geo880_666", "query": "What state has the most major cities ?", "scala": "def answer(): Option[State] = {\n    val statesWithMajorCities = geoModel.states.filter(s => s.cities.exists(_.isMajor))\n    statesWithMajorCities.maxBy(_.cities.count(_.isMajor))\n}"}
{"qid": "geo880_667", "query": "What state has the most major rivers running through it ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostMajorRivers = geoModel.states.maxBy(state => state.rivers.count(_.isMajor))\n    stateWithMostMajorRivers\n}"}
{"qid": "geo880_668", "query": "What state has the most people ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostPeople = geoModel.states.maxBy(_.population)\n    stateWithMostPeople\n}"}
{"qid": "geo880_669", "query": "What state has the most rivers ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostRivers = geoModel.states.maxBy(_.rivers.length)\n    stateWithMostRivers\n}"}
{"qid": "geo880_670", "query": "What state has the most rivers running through it ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostRivers = geoModel.states.maxBy(_.rivers.length)\n    stateWithMostRivers\n}"}
{"qid": "geo880_672", "query": "What state has the smallest area ?", "scala": "def answer(): Option[State] = {\n    val stateWithSmallestArea = geoModel.states.minBy(_.area)\n    stateWithSmallestArea\n}"}
{"qid": "geo880_673", "query": "What state has the smallest capital ?", "scala": "def answer(): Option[State] = {\n    val capitals = geoModel.states.flatMap(_.capital)\n    capitals.minBy(_.size).map(_.state)\n}"}
{"qid": "geo880_674", "query": "What state has the smallest population ?", "scala": "def answer(): Option[State] = {\n    val stateWithSmallestPopulation = geoModel.states.minBy(_.population)\n    stateWithSmallestPopulation\n}"}
{"qid": "geo880_675", "query": "What state has the smallest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithSmallestDensity = geoModel.states.minBy(_.density)\n    stateWithSmallestDensity\n}"}
{"qid": "geo880_676", "query": "What state has the smallest urban population ?", "scala": "def answer(): Option[State] = {\n    val stateWithSmallestUrbanPopulation = geoModel.states.minBy(_.population)\n    stateWithSmallestUrbanPopulation\n}"}
{"qid": "geo880_677", "query": "What state has the sparsest population density ?", "scala": "def answer(): Option[State] = {\n    val sparsestDensityState = geoModel.states.minBy(_.density)\n    sparsestDensityState\n}"}
{"qid": "geo880_678", "query": "What state is Austin in ?", "scala": "def answer(): Option[State] = {\n    val austinCity = geoModel.findCity(\"austin\")\n    val state = austinCity.map(_.state)\n    state\n}"}
{"qid": "geo880_679", "query": "What state is Austin the capital of ?", "scala": "def answer(): Option[State] = {\n    val austinCity = geoModel.findCity(\"austin\")\n    austinCity.map(_.state)\n}"}
{"qid": "geo880_680", "query": "What state is Boston in ?", "scala": "def answer(): Option[State] = {\n    val bostonCity = geoModel.findCity(\"boston\")\n    bostonCity.map(_.state)\n}"}
{"qid": "geo880_681", "query": "What state is Columbus the capital of ?", "scala": "def answer(): Option[State] = {\n    val columbusCity = geoModel.cities.find(c => c.name == \"Columbus\" && c.isCapital)\n    columbusCity.map(_.state)\n}"}
{"qid": "geo880_682", "query": "What state is Dallas in ?", "scala": "def answer(): Option[State] = {\n    val dallasCity = geoModel.findCity(\"dallas\")\n    val state = dallasCity.map(_.state)\n    state\n}"}
{"qid": "geo880_683", "query": "What state is Des Moines located in ?", "scala": "def answer(): Option[State] = {\n    val desMoinesCity = geoModel.findCity(\"des moines\")\n    desMoinesCity.map(_.state)\n}"}
{"qid": "geo880_684", "query": "What state is Miami in ?", "scala": "def answer(): Option[State] = {\n    val miamiCity = geoModel.findCity(\"miami\")\n    miamiCity.map(_.state)\n}"}
{"qid": "geo880_685", "query": "What state is Pittsburgh in ?", "scala": "def answer(): Option[State] = {\n    val pittsburghCity = geoModel.findCity(\"pittsburgh\")\n    pittsburghCity.map(_.state)\n}"}
{"qid": "geo880_686", "query": "What state is the biggest ?", "scala": "def answer(): Option[State] = {\n    val biggestState = geoModel.states.maxBy(_.size)\n    biggestState\n}"}
{"qid": "geo880_687", "query": "What state is the largest in population ?", "scala": "def answer(): Option[State] = {\n    val stateWithLargestPopulation = geoModel.states.maxBy(_.population)\n    stateWithLargestPopulation\n}"}
{"qid": "geo880_688", "query": "What state is the state with the most rivers ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostRivers = geoModel.states.maxBy(_.rivers.length)\n    stateWithMostRivers\n}"}
{"qid": "geo880_689", "query": "What state that borders Texas has the highest population ?", "scala": "def answer(): Option[State] = {\n    val statesBorderingTexas = geoModel.findState(\"texas\").map(_.nextTo)\n    val stateWithHighestPopulation = statesBorderingTexas.flatMap(_.maxByOption(_.population))\n    stateWithHighestPopulation\n}"}
{"qid": "geo880_690", "query": "What state that borders Texas is the largest ?", "scala": "def answer(): Option[State] = {\n    val texasState = geoModel.findState(\"texas\")\n    val borderingStates = texasState.map(_.nextTo)\n    val largestState = borderingStates.map(_.maxBy(_.area))\n    largestState\n}"}
{"qid": "geo880_691", "query": "What state which the Mississippi runs through has the largest population ?", "scala": "def answer(): Option[State] = {\n    val statesTraversedByMississippi = geoModel.states.filter(_.rivers.contains(geoModel.findRiver(\"mississippi\")))\n    val stateWithLargestPopulation = statesTraversedByMississippi.maxBy(_.population)\n    stateWithLargestPopulation\n}"}
{"qid": "geo880_692", "query": "What states are next to Arizona ?", "scala": "def answer(): Option[List[State]] = {\n    val arizonaState = geoModel.findState(\"arizona\")\n    arizonaState.map(_.nextTo)\n}"}
{"qid": "geo880_693", "query": "What states are next to Texas ?", "scala": "def answer(): Option[List[State]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.nextTo)\n}"}
{"qid": "geo880_695", "query": "What states border Alaska ?", "scala": "def answer(): Option[List[State]] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.nextTo)\n}"}
{"qid": "geo880_696", "query": "What states border Arkansas ?", "scala": "def answer(): Option[List[State]] = {\n    geoModel.findState(\"arkansas\").map(_.nextTo)\n}"}
{"qid": "geo880_697", "query": "What states border Delaware ?", "scala": "def answer(): Option[List[State]] = {\n    val delawareState = geoModel.findState(\"delaware\")\n    delawareState.map(_.nextTo)\n}"}
{"qid": "geo880_698", "query": "What states border Florida ?", "scala": "def answer(): Option[List[State]] = {\n    val floridaState = geoModel.findState(\"florida\")\n    floridaState.map(_.nextTo)\n}"}
{"qid": "geo880_699", "query": "What states border Georgia ?", "scala": "def answer(): Option[List[State]] = {\n    val georgiaState = geoModel.findState(\"georgia\")\n    georgiaState.map(_.nextTo)\n}"}
{"qid": "geo880_700", "query": "What states border Hawaii ?", "scala": "def answer(): Option[List[State]] = {\n    val hawaiiState = geoModel.findState(\"hawaii\")\n    hawaiiState.map(_.nextTo)\n}"}
{"qid": "geo880_701", "query": "What states border Indiana ?", "scala": "def answer(): Option[List[State]] = {\n    val indianaState = geoModel.findState(\"indiana\")\n    indianaState.map(_.nextTo)\n}"}
{"qid": "geo880_702", "query": "What states border Kentucky ?", "scala": "def answer(): Option[List[State]] = {\n    val kentuckyState = geoModel.findState(\"kentucky\")\n    kentuckyState.map(_.nextTo)\n}"}
{"qid": "geo880_703", "query": "What states border Michigan ?", "scala": "def answer(): Option[List[State]] = {\n    val michiganState = geoModel.findState(\"michigan\")\n    michiganState.map(_.nextTo)\n}"}
{"qid": "geo880_704", "query": "What states border Missouri ?", "scala": "def answer(): Option[List[State]] = {\n    val missouriState = geoModel.findState(\"missouri\")\n    missouriState.map(_.nextTo)\n}"}
{"qid": "geo880_705", "query": "What states border Montana ?", "scala": "def answer(): Option[List[State]] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.nextTo)\n}"}
{"qid": "geo880_706", "query": "What states border New Hampshire ?", "scala": "def answer(): Option[List[State]] = {\n    val newHampshireState = geoModel.findState(\"new hampshire\")\n    newHampshireState.map(_.nextTo)\n}"}
{"qid": "geo880_707", "query": "What states border New Jersey ?", "scala": "def answer(): Option[List[State]] = {\n    val newJerseyState = geoModel.findState(\"new jersey\")\n    newJerseyState.map(_.nextTo)\n}"}
{"qid": "geo880_708", "query": "What states border Ohio ?", "scala": "def answer(): Option[List[State]] = {\n    val ohioState = geoModel.findState(\"ohio\")\n    ohioState.map(_.nextTo)\n}"}
{"qid": "geo880_709", "query": "What states border Rhode Island ?", "scala": "def answer(): Option[List[State]] = {\n    val rhodeIslandState = geoModel.findState(\"rhode island\")\n    rhodeIslandState.map(_.nextTo)\n}"}
{"qid": "geo880_710", "query": "What states border states that border Colorado ?", "scala": "def answer(): Option[List[State]] = {\n    val statesBorderingColorado = geoModel.findState(\"colorado\").map(_.nextTo)\n    val statesBorderingStatesBorderingColorado = statesBorderingColorado.map(_.flatMap(_.nextTo))\n    statesBorderingStatesBorderingColorado\n}"}
{"qid": "geo880_711", "query": "What states border states that border Mississippi ?", "scala": "def answer(): Option[List[State]] = {\n    val statesBorderingMississippi = geoModel.findState(\"mississippi\").map(_.nextTo)\n    val statesBorderingStatesBorderingMississippi = statesBorderingMississippi.flatMap { states =>\n      states.flatMap(_.nextTo).distinct\n    }\n    statesBorderingStatesBorderingMississippi\n}"}
{"qid": "geo880_712", "query": "What states border states that border states that border Florida ?", "scala": "def answer(): Option[List[State]] = {\n    val floridaState = geoModel.findState(\"florida\")\n    val statesBorderingFlorida = floridaState.map(_.nextTo)\n    val statesBorderingStatesBorderingFlorida = statesBorderingFlorida.map(states => geoModel.states.filter(state => states.exists(s => state.nextTo.contains(s))))\n    val statesBorderingStatesBorderingStatesBorderingFlorida = statesBorderingStatesBorderingFlorida.map(states => geoModel.states.filter(state => states.exists(s => state.nextTo.contains(s))))\n    statesBorderingStatesBorderingStatesBorderingFlorida\n}"}
{"qid": "geo880_713", "query": "What states border states that border states that border states that border Texas ?", "scala": "def answer(): Option[List[State]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val borderingStates = texasState.map(_.nextTo)\n    var statesToCheck = borderingStates\n    for (_ <- 1 to 3) {\n        val newStatesToCheck = statesToCheck.flatMap(_.nextTo)\n        statesToCheck = newStatesToCheck\n    }\n    statesToCheck\n}"}
{"qid": "geo880_714", "query": "What states border states that border the state with the largest population ?", "scala": "def answer(): Option[List[State]] = {\n    val statesWithLargestPopulation = geoModel.states.maxBy(_.population)\n    val statesBorderingLargestPopulation = statesWithLargestPopulation.nextTo\n    val statesBorderingStatesBorderingLargestPopulation = geoModel.states.filter(state =>\n      state.nextTo.exists(statesBorderingLargestPopulation.contains)\n    )\n    statesBorderingStatesBorderingLargestPopulation\n}"}
{"qid": "geo880_715", "query": "What states border states that the Mississippi runs through ?", "scala": "def answer(): Option[List[State]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val statesTraversedByMississippi = mississippiRiver.map(_.traverses)\n    val statesBorderingTraversedStates = geoModel.states.filter(state => state.nextTo.exists(statesTraversedByMississippi.contains))\n    Some(statesBorderingTraversedStates)\n}"}
{"qid": "geo880_716", "query": "What states border states that the Ohio runs through ?", "scala": "def answer(): Option[List[State]] = {\n    val ohioRiver = geoModel.findRiver(\"ohio\")\n    val statesTraversedByOhio = geoModel.states.filter(_.rivers.contains(ohioRiver))\n    val statesBorderingTraversedStates = geoModel.states.filter(state => state.nextTo.exists(statesTraversedByOhio.contains))\n    Some(statesBorderingTraversedStates)\n}"}
{"qid": "geo880_717", "query": "What states border states which the Mississippi runs through ?", "scala": "def answer(): Option[List[State]] = {\n    val statesThroughMississippi = geoModel.states.filter(_.rivers.contains(geoModel.findRiver(\"mississippi\")))\n    val borderingStates = statesThroughMississippi.flatMap(_.nextTo)\n    Some(borderingStates)\n}"}
{"qid": "geo880_718", "query": "What states border Texas ?", "scala": "def answer(): Option[List[State]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.nextTo)\n}"}
{"qid": "geo880_719", "query": "What states border Texas and have a major river ?", "scala": "def answer(): Option[List[State]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val statesBorderingTexas = texasState.map(_.nextTo)\n    val majorRivers = geoModel.rivers.filter(_.isMajor)\n    val statesWithMajorRiver = statesBorderingTexas.map(_.filter(s => majorRivers.exists(r => r.traverses.contains(s))))\n    statesWithMajorRiver\n}"}
{"qid": "geo880_721", "query": "What states border the most populous state ?", "scala": "def answer(): Option[List[State]] = {\n    val mostPopulousState = geoModel.states.maxBy(_.population)\n    mostPopulousState.map(_.nextTo)\n}"}
{"qid": "geo880_722", "query": "What states border the state that borders the most states ?", "scala": "def answer(): Option[List[State]] = {\n    val mostBorderingState = geoModel.states.maxBy(_.nextTo.length)\n    mostBorderingState.map(_.nextTo)\n}"}
{"qid": "geo880_723", "query": "What states border the state with the most cities ?", "scala": "def answer(): Option[List[State]] = {\n    val mostCitiesState = geoModel.states.maxBy(_.cities.length)\n    mostCitiesState.nextTo\n}"}
{"qid": "geo880_724", "query": "What states border the state with the most major cities ?", "scala": "def answer(): Option[List[State]] = {\n    val stateWithMostMajorCities = geoModel.states.maxBy(_.cities.count(_.isMajor))\n    stateWithMostMajorCities.nextTo\n}"}
{"qid": "geo880_725", "query": "What states border the state with the smallest area ?", "scala": "def answer(): Option[List[State]] = {\n    val smallestState = geoModel.states.minBy(_.area)\n    smallestState.nextTo\n}"}
{"qid": "geo880_726", "query": "What states border the states with the most cities ?", "scala": "def answer(): Option[List[State]] = {\n    val stateWithMostCities = geoModel.states.maxBy(_.cities.length)\n    stateWithMostCities.nextTo\n}"}
{"qid": "geo880_727", "query": "What states border Wisconsin ?", "scala": "def answer(): Option[List[State]] = {\n    val wisconsinState = geoModel.findState(\"wisconsin\")\n    wisconsinState.map(_.nextTo)\n}"}
{"qid": "geo880_728", "query": "What state 's capital is Dover ?", "scala": "def answer(): Option[State] = {\n    val doverCity = geoModel.findCity(\"dover\")\n    val state = doverCity.map(_.state)\n    state\n}"}
{"qid": "geo880_729", "query": "What states contain at least one major rivers ?", "scala": "def answer(): Option[List[State]] = {\n    val statesWithMajorRivers = geoModel.states.filter(state => state.rivers.exists(_.isMajor))\n    Some(statesWithMajorRivers)\n}"}
{"qid": "geo880_730", "query": "What states does the Colorado river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    coloradoRiver.map(_.traverses)\n}"}
{"qid": "geo880_731", "query": "What states does the Delaware river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val delawareRiver = geoModel.findRiver(\"delaware\")\n    delawareRiver.map(_.traverses)\n}"}
{"qid": "geo880_732", "query": "What states does the Mississippi river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.traverses)\n}"}
{"qid": "geo880_733", "query": "What states does the Mississippi run through ?", "scala": "def answer(): Option[List[State]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.traverses)\n}"}
{"qid": "geo880_734", "query": "What states does the Missouri river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val missouriRiver = geoModel.findRiver(\"missouri\")\n    missouriRiver.map(_.traverses)\n}"}
{"qid": "geo880_735", "query": "What states does the Missouri run through ?", "scala": "def answer(): Option[List[State]] = {\n    val missouriRiver = geoModel.findRiver(\"missouri\")\n    missouriRiver.map(_.traverses)\n}"}
{"qid": "geo880_736", "query": "What states does the Ohio river go through ?", "scala": "def answer(): Option[List[State]] = {\n    val ohioRiver = geoModel.findRiver(\"ohio\")\n    ohioRiver.map(_.traverses)\n}"}
{"qid": "geo880_737", "query": "What states does the Ohio river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val ohioRiver = geoModel.findRiver(\"ohio\")\n    ohioRiver.map(_.traverses)\n}"}
{"qid": "geo880_738", "query": "What states does the shortest river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val shortestRiver = geoModel.rivers.minBy(_.length)\n    shortestRiver.map(_.traverses)\n}"}
{"qid": "geo880_739", "query": "What states have a capital that is the highest point in the state ?", "scala": "def answer(): Option[List[State]] = {\n    val statesWithCapitalAsHighPoint = geoModel.states.filter(s => s.capital == s.highPoint)\n    statesWithCapitalAsHighPoint\n}"}
{"qid": "geo880_740", "query": "What states have a city named Austin ?", "scala": "def answer(): Option[List[State]] = {\n    val austinCities = geoModel.cities.filter(_.name == \"austin\")\n    val states = austinCities.map(_.state)\n    states\n}"}
{"qid": "geo880_741", "query": "What states have cities named Austin ?", "scala": "def answer(): Option[List[State]] = {\n    val austinCities = geoModel.cities.filter(_.name == \"austin\")\n    val states = austinCities.flatMap(_.state)\n    states\n}"}
{"qid": "geo880_742", "query": "What states have cities named Dallas ?", "scala": "def answer(): Option[List[State]] = {\n    val dallasCities = geoModel.cities.filter(_.name == \"Dallas\")\n    val states = dallasCities.map(_.state)\n    Some(states)\n}"}
{"qid": "geo880_743", "query": "What states have cities named Plano ?", "scala": "def answer(): Option[List[State]] = {\n    val planoCities = geoModel.cities.filter(_.name == \"plano\")\n    val states = planoCities.map(_.state)\n    Some(states)\n}"}
{"qid": "geo880_744", "query": "What states have cities named Portland ?", "scala": "def answer(): Option[List[State]] = {\n    val portlandCities = geoModel.cities.filter(_.name == \"Portland\")\n    val states = portlandCities.map(_.state)\n    Some(states)\n}"}
{"qid": "geo880_745", "query": "What states have cities named Rochester ?", "scala": "def answer(): Option[List[State]] = {\n    val rochesterCities = geoModel.cities.filter(_.name == \"rochester\")\n    val states = rochesterCities.map(_.state)\n    Some(states)\n}"}
{"qid": "geo880_746", "query": "What states have cities named Salt Lake City ?", "scala": "def answer(): Option[List[State]] = {\n    val saltLakeCities = geoModel.cities.filter(_.name == \"Salt Lake City\")\n    val states = saltLakeCities.map(_.state)\n    Some(states)\n}"}
{"qid": "geo880_747", "query": "What states have no bordering state ?", "scala": "def answer(): Option[List[State]] = {\n    val statesWithNoNeighbors = geoModel.states.filter(_.nextTo.isEmpty)\n    Some(statesWithNoNeighbors)\n}"}
{"qid": "geo880_748", "query": "What states have rivers named Colorado ?", "scala": "def answer(): Option[List[State]] = {\n    val coloradoRivers = geoModel.rivers.filter(_.name == \"colorado\")\n    val states = coloradoRivers.flatMap(_.traverses)\n    states\n}"}
{"qid": "geo880_749", "query": "What states have rivers running through them ?", "scala": "def answer(): Option[List[State]] = {\n    val statesWithRivers = geoModel.states.filter(_.rivers.nonEmpty)\n    Some(statesWithRivers)\n}"}
{"qid": "geo880_750", "query": "What states have towns named Springfield ?", "scala": "def answer(): Option[List[State]] = {\n    val springfieldTowns = geoModel.states.flatMap(_.cities.filter(_.name == \"springfield\"))\n    val statesWithSpringfield = springfieldTowns.map(_.state)\n    statesWithSpringfield\n}"}
{"qid": "geo880_751", "query": "What state 's high point is higher than that of Colorado ?", "scala": "def answer(): Option[List[State]] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    val statesWithHigherHighPoint = geoModel.states.filter(_.highPoint.elevation > coloradoState.highPoint.elevation)\n    Some(statesWithHigherHighPoint)\n}"}
{"qid": "geo880_752", "query": "What states in the United States have a city of Springfield ?", "scala": "def answer(): Option[List[State]] = {\n    val springfieldCities = geoModel.cities.filter(_.name == \"springfield\")\n    val states = springfieldCities.map(_.state)\n    Some(states)\n}"}
{"qid": "geo880_753", "query": "What states neighbor Maine ?", "scala": "def answer(): Option[List[State]] = {\n    geoModel.findState(\"maine\").map(_.nextTo)\n}"}
{"qid": "geo880_754", "query": "What states surround Kentucky ?", "scala": "def answer(): Option[List[State]] = {\n    val kentuckyState = geoModel.findState(\"kentucky\")\n    kentuckyState.map(_.nextTo)\n}"}
{"qid": "geo880_755", "query": "What Texas city has the largest population ?", "scala": "def answer(): Option[City] = {\n    val texasState = geoModel.findState(\"texas\")\n    val cityWithLargestPopulation = texasState.map(_.cities.maxBy(_.population))\n    cityWithLargestPopulation\n}"}
{"qid": "geo880_756", "query": "What 's the largest city ?", "scala": "def answer(): Option[City] = {\n    val largestCity = geoModel.cities.maxBy(_.size)\n    largestCity\n}"}
{"qid": "geo880_757", "query": "Where are mountains ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val states = geoModel.mountains.map(_.state).toSet.toList\n    val countries = geoModel.mountains.map(_.state.country).toSet.toList\n    Some(states ++ countries)\n}"}
{"qid": "geo880_758", "query": "Where is Austin ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val city = geoModel.findCity(\"dallas\")\n    city.map(c => List(Left(c.state), Right(c.country)))\n}"}
{"qid": "geo880_759", "query": "Where is Baton Rouge ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val batonRougeCity = geoModel.findCity(\"baton rouge\")\n    batonRougeCity.map(city => List(Left(city.state), Right(city.country)))\n}"}
{"qid": "geo880_760", "query": "Where is Dallas ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val dallasState = geoModel.findCity(\"dallas\").map(_.state)\n    val dallasCountry = geoModel.findCity(\"dallas\").map(_.country)\n    val location = for {\n        state <- dallasState\n        country <- dallasCountry\n    } yield List(Left(state), Right(country))\n    location\n}"}
{"qid": "geo880_763", "query": "Where is Indianapolis ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val indianapolisCity = geoModel.findCity(\"indianapolis\")\n    indianapolisCity.map(city => List(Left(city.state), Right(city.country)))\n}"}
{"qid": "geo880_764", "query": "Where is Massachusetts ?", "scala": "def answer(): Option[Country] = {\n    val massachusettsState = geoModel.findState(\"massachusetts\")\n    massachusettsState.map(_.country)\n}"}
{"qid": "geo880_765", "query": "Where is Mount Whitney ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val mountWhitney = geoModel.findPlace(\"mount whitney\")\n    mountWhitney.map(place => List(Left(place.state), Right(place.state.country)))\n}"}
{"qid": "geo880_766", "query": "Where is Mount Whitney located ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val mountain = geoModel.findMountain(\"whitney\")\n    val location = mountain.map(m => List(Left(m.state), Right(m.state.country)))\n    location\n}"}
{"qid": "geo880_767", "query": "Where is New Hampshire ?", "scala": "def answer(): Option[Country] = {\n    val newHampshireState = geoModel.findState(\"new hampshire\")\n    newHampshireState.map(_.country)\n}"}
{"qid": "geo880_768", "query": "Where is New Orleans ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val newOrleansCity = geoModel.findCity(\"new orleans\")\n    newOrleansCity.map(city => List(Left(city.state), Right(city.country)))\n}"}
{"qid": "geo880_770", "query": "Where is San Diego ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val sanDiegoCity = geoModel.findCity(\"san diego\")\n    sanDiegoCity.map(city => List(Left(city.state), Right(city.country)))\n}"}
{"qid": "geo880_774", "query": "Where is the Chattahoochee river ?", "scala": "def answer(): Option[List[Either[State, Country]]] = {\n    val states = geoModel.findRiver(\"chattahoochee\").map(_.traverses)\n    val countries = states.map(_.flatMap(_.country))\n    val result = states.map(_ ++ countries)\n    result\n}"}
{"qid": "geo880_775", "query": "Where is the highest mountain of the United States ?", "scala": "def answer(): Option[Mountain] = {\n    val mountainsInUSA = geoModel.findCountry(\"usa\").map(_.mountains)\n    mountainsInUSA.map(_.maxBy(_.elevation))\n}"}
{"qid": "geo880_776", "query": "Where is the highest point in Hawaii ?", "scala": "def answer(): Option[Place] = {\n    val hawaiiState = geoModel.findState(\"hawaii\")\n    hawaiiState.map(_.highPoint)\n}"}
{"qid": "geo880_777", "query": "Where is the highest point in Montana ?", "scala": "def answer(): Option[Place] = {\n    val montanaState = geoModel.findState(\"montana\")\n    montanaState.map(_.highPoint)\n}"}
{"qid": "geo880_778", "query": "Where is the lowest point in Maryland ?", "scala": "def answer(): Option[Place] = {\n    val marylandState = geoModel.findState(\"maryland\")\n    marylandState.map(_.lowPoint)\n}"}
{"qid": "geo880_779", "query": "Where is the lowest point in the US ?", "scala": "def answer(): Option[Place] = {\n    val lowestPoint = geoModel.places.minBy(_.elevation)\n    lowestPoint\n}"}
{"qid": "geo880_780", "query": "Where is the lowest spot in Iowa ?", "scala": "def answer(): Option[Place] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    iowaState.map(_.lowPoint)\n}"}
{"qid": "geo880_781", "query": "Where is the most populated area of New Mexico ?", "scala": "def answer(): Option[City] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    newMexicoState.map(_.cities.maxBy(_.population))\n}"}
{"qid": "geo880_783", "query": "Which capitals are in the states that border Texas ?", "scala": "def answer(): Option[List[City]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val borderingStates = texasState.map(_.nextTo)\n    val capitals = borderingStates.map(_.flatMap(_.capital))\n    capitals\n}"}
{"qid": "geo880_785", "query": "Which city in California has the largest population ?", "scala": "def answer(): Option[City] = {\n    val citiesInCalifornia = geoModel.findState(\"california\").map(_.cities)\n    citiesInCalifornia.map(_.maxBy(_.population))\n}"}
{"qid": "geo880_787", "query": "Which is the highest peak not in Alaska ?", "scala": "def answer(): Option[Mountain] = {\n    val mountainsNotInAlaska = geoModel.mountains.filter(_.state != geoModel.findState(\"alaska\"))\n    mountainsNotInAlaska.maxBy(_.elevation)\n}"}
{"qid": "geo880_788", "query": "Which is the longest river in USA ?", "scala": "def answer(): Option[River] = {\n    geoModel.rivers.maxByOption(_.length)\n}"}
{"qid": "geo880_789", "query": "Which is the lowest point of the states that the Mississippi runs through ?", "scala": "def answer(): Option[Place] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    val lowestPoint = mississippiRiver.flatMap(_.traverses.minByOption(_.lowPoint.elevation))\n    lowestPoint.map(_.lowPoint)\n}"}
{"qid": "geo880_790", "query": "Which is the shortest river ?", "scala": "def answer(): Option[River] = {\n    geoModel.rivers.minByOption(_.length)\n}"}
{"qid": "geo880_791", "query": "Which is the smallest state ?", "scala": "def answer(): Option[State] = {\n    val smallestState = geoModel.states.minBy(_.size)\n    smallestState\n}"}
{"qid": "geo880_792", "query": "Which of the states bordering Pennsylvania has the largest population ?", "scala": "def answer(): Option[State] = {\n    val pennsylvaniaState = geoModel.findState(\"pennsylvania\")\n    val largestPopulationState = pennsylvaniaState.flatMap(_.nextTo.maxBy(_.population))\n    largestPopulationState\n}"}
{"qid": "geo880_793", "query": "Which river goes through the most states ?", "scala": "def answer(): Option[River] = {\n    val riverWithMostStates = geoModel.rivers.maxBy(_.traverses.length)\n    riverWithMostStates\n}"}
{"qid": "geo880_794", "query": "Which river runs through most states ?", "scala": "def answer(): Option[River] = {\n    val rivers = geoModel.rivers\n    rivers.maxByOption(_.traverses.length)\n}"}
{"qid": "geo880_795", "query": "Which river runs through the most states ?", "scala": "def answer(): Option[River] = {\n    val rivers = geoModel.rivers\n    rivers.maxBy(_.traverses.length)\n}"}
{"qid": "geo880_796", "query": "Which river traverses most states ?", "scala": "def answer(): Option[River] = {\n    val riverWithMostTraverses = geoModel.rivers.maxBy(_.traverses.length)\n    riverWithMostTraverses\n}"}
{"qid": "geo880_797", "query": "Which rivers are in Alaska ?", "scala": "def answer(): Option[List[River]] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.rivers)\n}"}
{"qid": "geo880_798", "query": "Which rivers do not run through Texas ?", "scala": "def answer(): Option[List[River]] = {\n    val texasState = geoModel.findState(\"texas\")\n    val texasRivers = texasState.map(_.rivers)\n    val allRivers = geoModel.rivers\n    val riversNotInTexas = allRivers.filterNot(r => texasRivers.exists(_.contains(r)))\n    Some(riversNotInTexas)\n}"}
{"qid": "geo880_799", "query": "Which rivers do not run through USA ?", "scala": "def answer(): Option[List[River]] = {\n    val riversNotInUSA = geoModel.rivers.filterNot(_.traverses.exists(_.country.name == \"usa\"))\n    Some(riversNotInUSA)\n}"}
{"qid": "geo880_800", "query": "Which rivers flow through Alaska ?", "scala": "def answer(): Option[List[River]] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.rivers)\n}"}
{"qid": "geo880_801", "query": "Which rivers run through states bordering New Mexico ?", "scala": "def answer(): Option[List[River]] = {\n    val newMexicoState = geoModel.findState(\"new mexico\")\n    val borderingStates = newMexicoState.map(_.nextTo)\n    val rivers = borderingStates.map(_.flatMap(_.rivers))\n    rivers\n}"}
{"qid": "geo880_802", "query": "Which rivers run through states that border the state with the capital Austin ?", "scala": "def answer(): Option[List[River]] = {\n    val stateWithCapitalAustin = geoModel.states.find(s => s.capital.exists(_.name == \"austin\"))\n    val riversInBorderingStates = stateWithCapitalAustin.flatMap(state => Some(state.nextTo.flatMap(_.rivers)))\n    riversInBorderingStates\n}"}
{"qid": "geo880_804", "query": "Which rivers run through the state with the largest city in the US ?", "scala": "def answer(): Option[List[River]] = {\n    val largestCity = geoModel.cities.maxBy(_.size)\n    val stateWithLargestCity = largestCity.state\n    stateWithLargestCity.map(_.rivers)\n}"}
{"qid": "geo880_805", "query": "Which rivers run through the state with the lowest elevation in the USA ?", "scala": "def answer(): Option[List[River]] = {\n    val stateWithLowestElevation = geoModel.states.minBy(_.lowPoint.elevation)\n    stateWithLowestElevation.map(_.rivers)\n}"}
{"qid": "geo880_806", "query": "Which state border Kentucky ?", "scala": "def answer(): Option[List[State]] = {\n    val kentuckyState = geoModel.findState(\"kentucky\")\n    kentuckyState.map(_.nextTo)\n}"}
{"qid": "geo880_807", "query": "Which state borders Florida ?", "scala": "def answer(): Option[List[State]] = {\n    val floridaState = geoModel.findState(\"florida\")\n    floridaState.map(_.nextTo)\n}"}
{"qid": "geo880_808", "query": "Which state borders Hawaii ?", "scala": "def answer(): Option[List[State]] = {\n    val hawaiiState = geoModel.findState(\"hawaii\")\n    hawaiiState.map(_.nextTo)\n}"}
{"qid": "geo880_809", "query": "Which state borders most states ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostBorderingStates = geoModel.states.maxBy(_.nextTo.length)\n    stateWithMostBorderingStates\n}"}
{"qid": "geo880_810", "query": "Which state borders the most states ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostBorders = geoModel.states.maxBy(_.nextTo.length)\n    stateWithMostBorders\n}"}
{"qid": "geo880_811", "query": "Which state capital has the smallest population ?", "scala": "def answer(): Option[City] = {\n    val capitals = geoModel.states.flatMap(_.capital)\n    capitals.minBy(_.population)\n}"}
{"qid": "geo880_812", "query": "Which state contains most rivers ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostRivers = geoModel.states.maxBy(_.rivers.length)\n    stateWithMostRivers\n}"}
{"qid": "geo880_813", "query": "Which state has the biggest population ?", "scala": "def answer(): Option[State] = {\n    val stateWithBiggestPopulation = geoModel.states.maxBy(_.population)\n    stateWithBiggestPopulation\n}"}
{"qid": "geo880_814", "query": "Which state has the greatest density ?", "scala": "def answer(): Option[State] = {\n    val stateWithGreatestDensity = geoModel.states.maxBy(_.density)\n    stateWithGreatestDensity\n}"}
{"qid": "geo880_815", "query": "Which state has the greatest population ?", "scala": "def answer(): Option[State] = {\n    val stateWithGreatestPopulation = geoModel.states.maxBy(_.population)\n    stateWithGreatestPopulation\n}"}
{"qid": "geo880_816", "query": "Which state has the highest elevation ?", "scala": "def answer(): Option[State] = {\n    val stateWithHighestElevation = geoModel.states.maxBy(_.highPoint.elevation)\n    stateWithHighestElevation\n}"}
{"qid": "geo880_817", "query": "Which state has the highest peak in the country ?", "scala": "def answer(): Option[State] = {\n    val highestPeak = geoModel.mountains.maxBy(_.elevation)\n    highestPeak.state\n}"}
{"qid": "geo880_818", "query": "Which state has the highest point ?", "scala": "def answer(): Option[State] = {\n    val stateWithHighestPoint = geoModel.states.maxBy(_.highPoint.elevation)\n    stateWithHighestPoint\n}"}
{"qid": "geo880_819", "query": "Which state has the highest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithHighestDensity = geoModel.states.maxBy(_.density)\n    stateWithHighestDensity\n}"}
{"qid": "geo880_820", "query": "Which state has the largest city ?", "scala": "def answer(): Option[State] = {\n    val largestCity = geoModel.cities.maxBy(_.population)\n    largestCity.state\n}"}
{"qid": "geo880_821", "query": "Which state has the largest density ?", "scala": "def answer(): Option[State] = {\n    val stateWithLargestDensity = geoModel.states.maxBy(_.density)\n    stateWithLargestDensity\n}"}
{"qid": "geo880_822", "query": "Which state has the least population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithLeastDensity = geoModel.states.minBy(_.density)\n    stateWithLeastDensity\n}"}
{"qid": "geo880_824", "query": "Which state has the lowest elevation ?", "scala": "def answer(): Option[State] = {\n    val stateWithLowestElevation = geoModel.states.minBy(_.lowPoint.elevation)\n    stateWithLowestElevation\n}"}
{"qid": "geo880_826", "query": "Which state has the lowest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithLowestDensity = geoModel.states.minBy(_.density)\n    stateWithLowestDensity\n}"}
{"qid": "geo880_827", "query": "Which state has the most major cities ?", "scala": "def answer(): Option[State] = {\n    val statesWithMajorCities = geoModel.states.filter(_.cities.exists(_.isMajor))\n    val stateWithMostMajorCities = statesWithMajorCities.maxBy(_.cities.count(_.isMajor))\n    stateWithMostMajorCities\n}"}
{"qid": "geo880_828", "query": "Which state has the most major rivers ?", "scala": "def answer(): Option[State] = {\n    val statesWithMajorRivers = geoModel.states.filter(_.rivers.exists(_.isMajor))\n    statesWithMajorRivers.maxByOption(_.rivers.length)\n}"}
{"qid": "geo880_829", "query": "Which state has the most major rivers running through it ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostMajorRivers = geoModel.states.maxBy(state => state.rivers.count(_.isMajor))\n    Some(stateWithMostMajorRivers)\n}"}
{"qid": "geo880_830", "query": "Which state has the most people ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostPeople = geoModel.states.maxBy(_.population)\n    stateWithMostPeople\n}"}
{"qid": "geo880_831", "query": "Which state has the most population ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostPopulation = geoModel.states.maxBy(_.population)\n    stateWithMostPopulation\n}"}
{"qid": "geo880_832", "query": "Which state has the most rivers ?", "scala": "def answer(): Option[State] = {\n    val statesWithRivers = geoModel.states.filter(_.rivers.nonEmpty)\n    statesWithRivers.maxBy(_.rivers.length)\n}"}
{"qid": "geo880_833", "query": "Which state has the most rivers running through it ?", "scala": "def answer(): Option[State] = {\n    val stateWithMostRivers = geoModel.states.maxBy(_.rivers.length)\n    stateWithMostRivers\n}"}
{"qid": "geo880_834", "query": "Which state has the Red river ?", "scala": "def answer(): Option[List[State]] = {\n    val redRiver = geoModel.findRiver(\"red\")\n    redRiver.map(_.traverses)\n}"}
{"qid": "geo880_835", "query": "Which state has the smallest area that borders Texas ?", "scala": "def answer(): Option[State] = {\n    val texasState = geoModel.findState(\"texas\")\n    val statesBorderingTexas = texasState.map(_.nextTo)\n    val smallestState = statesBorderingTexas.map(_.minBy(_.area))\n    smallestState\n}"}
{"qid": "geo880_837", "query": "Which state has the smallest population density ?", "scala": "def answer(): Option[State] = {\n    val stateWithSmallestPopulationDensity = geoModel.states.minBy(_.density)\n    stateWithSmallestPopulationDensity\n}"}
{"qid": "geo880_838", "query": "Which state has the sparsest population density ?", "scala": "def answer(): Option[State] = {\n    val sparsestState = geoModel.states.minBy(_.density)\n    sparsestState\n}"}
{"qid": "geo880_839", "query": "Which state is Kalamazoo in ?", "scala": "def answer(): Option[State] = {\n    val kalamazooCity = geoModel.findCity(\"kalamazoo\")\n    kalamazooCity.map(_.state)\n}"}
{"qid": "geo880_841", "query": "Which state is the city Denver located in ?", "scala": "def answer(): Option[State] = {\n    val denverCity = geoModel.findCity(\"denver\")\n    denverCity.map(_.state)\n}"}
{"qid": "geo880_842", "query": "Which state is the largest city in Montana in ?", "scala": "def answer(): Option[State] = {\n    val largestCityInMontana = geoModel.findState(\"montana\").map(_.cities.maxBy(_.size))\n    largestCityInMontana.map(_.state)\n}"}
{"qid": "geo880_843", "query": "Which state is the smallest ?", "scala": "def answer(): Option[State] = {\n    val smallestState = geoModel.states.minBy(_.size)\n    smallestState\n}"}
{"qid": "geo880_844", "query": "Which states adjoin Alabama ?", "scala": "def answer(): Option[List[State]] = {\n    val alabamaState = geoModel.findState(\"alabama\")\n    alabamaState.map(_.nextTo)\n}"}
{"qid": "geo880_845", "query": "Which states border Alabama ?", "scala": "def answer(): Option[List[State]] = {\n    val alabamaState = geoModel.findState(\"alabama\")\n    alabamaState.map(_.nextTo)\n}"}
{"qid": "geo880_846", "query": "Which states border Alaska ?", "scala": "def answer(): Option[List[State]] = {\n    val alaskaState = geoModel.findState(\"alaska\")\n    alaskaState.map(_.nextTo)\n}"}
{"qid": "geo880_847", "query": "Which states border Arizona ?", "scala": "def answer(): Option[List[State]] = {\n    val arizonaState = geoModel.findState(\"arizona\")\n    arizonaState.map(_.nextTo)\n}"}
{"qid": "geo880_848", "query": "Which states border Colorado ?", "scala": "def answer(): Option[List[State]] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    coloradoState.map(_.nextTo)\n}"}
{"qid": "geo880_849", "query": "Which states border Hawaii ?", "scala": "def answer(): Option[List[State]] = {\n    val hawaiiState = geoModel.findState(\"hawaii\")\n    hawaiiState.map(_.nextTo)\n}"}
{"qid": "geo880_850", "query": "Which states border Illinois ?", "scala": "def answer(): Option[List[State]] = {\n    val illinoisState = geoModel.findState(\"illinois\")\n    illinoisState.map(_.nextTo)\n}"}
{"qid": "geo880_851", "query": "Which states border Iowa ?", "scala": "def answer(): Option[List[State]] = {\n    val iowaState = geoModel.findState(\"iowa\")\n    iowaState.map(_.nextTo)\n}"}
{"qid": "geo880_852", "query": "Which states border Kentucky ?", "scala": "def answer(): Option[List[State]] = {\n    val kentuckyState = geoModel.findState(\"kentucky\")\n    kentuckyState.map(_.nextTo)\n}"}
{"qid": "geo880_853", "query": "Which states border Michigan ?", "scala": "def answer(): Option[List[State]] = {\n    val michiganState = geoModel.findState(\"michigan\")\n    michiganState.map(_.nextTo)\n}"}
{"qid": "geo880_854", "query": "Which states border New York ?", "scala": "def answer(): Option[List[State]] = {\n    val newYorkState = geoModel.findState(\"new york\")\n    newYorkState.map(_.nextTo)\n}"}
{"qid": "geo880_855", "query": "Which states border no other states ?", "scala": "def answer(): Option[List[State]] = {\n    val statesWithNoNeighbors = geoModel.states.filter(_.nextTo.isEmpty)\n    Some(statesWithNoNeighbors)\n}"}
{"qid": "geo880_856", "query": "Which states border South Dakota ?", "scala": "def answer(): Option[List[State]] = {\n    val southDakotaState = geoModel.findState(\"south dakota\")\n    southDakotaState.map(_.nextTo)\n}"}
{"qid": "geo880_857", "query": "Which states border states through which the Mississippi traverses ?", "scala": "def answer(): Option[List[State]] = {\n    val statesTraversedByMississippi = geoModel.states.filter(_.rivers.contains(geoModel.findRiver(\"mississippi\")))\n    val statesBorderingStatesTraversedByMississippi = geoModel.states.filter(state => statesTraversedByMississippi.exists(s => state.nextTo.contains(s)))\n    statesBorderingStatesTraversedByMississippi\n}"}
{"qid": "geo880_858", "query": "Which states border Texas ?", "scala": "def answer(): Option[List[State]] = {\n    val texasState = geoModel.findState(\"texas\")\n    texasState.map(_.nextTo)\n}"}
{"qid": "geo880_861", "query": "Which states border the state with the smallest area ?", "scala": "def answer(): Option[List[State]] = {\n    val smallestState = geoModel.states.minBy(_.area)\n    smallestState.nextTo\n}"}
{"qid": "geo880_862", "query": "Which state 's capital city is the largest ?", "scala": "def answer(): Option[State] = {\n    val capitals = geoModel.states.flatMap(_.capital)\n    val stateWithLargestCapital = capitals.maxBy(_.size).state\n    stateWithLargestCapital\n}"}
{"qid": "geo880_863", "query": "Which states do Colorado river flow through ?", "scala": "def answer(): Option[List[State]] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    coloradoRiver.map(_.traverses)\n}"}
{"qid": "geo880_864", "query": "Which states does not border Texas ?", "scala": "def answer(): Option[List[State]] = {\n    val statesNotBorderingTexas = geoModel.states.filterNot(_.nextTo.exists(_.name == \"texas\"))\n    Some(statesNotBorderingTexas)\n}"}
{"qid": "geo880_865", "query": "Which states does the Chattahoochee river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val chattahoocheeRiver = geoModel.findRiver(\"chattahoochee\")\n    chattahoocheeRiver.map(_.traverses)\n}"}
{"qid": "geo880_866", "query": "Which states does the Colorado river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val coloradoRiver = geoModel.findRiver(\"colorado\")\n    coloradoRiver.map(_.traverses)\n}"}
{"qid": "geo880_867", "query": "Which states does the longest river cross ?", "scala": "def answer(): Option[List[State]] = {\n    val longestRiver = geoModel.rivers.maxBy(_.length)\n    longestRiver.map(_.traverses)\n}"}
{"qid": "geo880_868", "query": "Which states does the longest river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val longestRiver = geoModel.rivers.maxBy(_.length)\n    longestRiver.map(_.traverses)\n}"}
{"qid": "geo880_869", "query": "Which states does the Mississippi river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.traverses)\n}"}
{"qid": "geo880_870", "query": "Which states does the Mississippi run through ?", "scala": "def answer(): Option[List[State]] = {\n    val mississippiRiver = geoModel.findRiver(\"mississippi\")\n    mississippiRiver.map(_.traverses)\n}"}
{"qid": "geo880_871", "query": "Which states does the Missouri river pass through ?", "scala": "def answer(): Option[List[State]] = {\n    val missouriRiver = geoModel.findRiver(\"missouri\")\n    missouriRiver.map(_.traverses)\n}"}
{"qid": "geo880_872", "query": "Which states does the Missouri river run through ?", "scala": "def answer(): Option[List[State]] = {\n    val missouriRiver = geoModel.findRiver(\"missouri\")\n    missouriRiver.map(_.traverses)\n}"}
{"qid": "geo880_873", "query": "Which states have a major city named Austin ?", "scala": "def answer(): Option[List[State]] = {\n    val austinCities = geoModel.cities.filter(c => c.name == \"Austin\" && c.isMajor)\n    val statesWithAustin = austinCities.map(_.state)\n    statesWithAustin\n}"}
{"qid": "geo880_874", "query": "Which states have a river ?", "scala": "def answer(): Option[List[State]] = {\n    val statesWithRiver = geoModel.states.filter(_.rivers.nonEmpty)\n    Some(statesWithRiver)\n}"}
{"qid": "geo880_875", "query": "Which states have cities named Austin ?", "scala": "def answer(): Option[List[State]] = {\n    val austinCities = geoModel.cities.filter(_.name == \"austin\")\n    val states = austinCities.map(_.state)\n    states\n}"}
{"qid": "geo880_876", "query": "Which states have points higher than the highest point in Colorado ?", "scala": "def answer(): Option[List[State]] = {\n    val coloradoState = geoModel.findState(\"colorado\")\n    val highestPointInColorado = coloradoState.map(_.highPoint.elevation)\n    val statesWithHigherPoints = geoModel.states.filter(_.highPoint.elevation > highestPointInColorado.getOrElse(0))\n    Some(statesWithHigherPoints)\n}"}
{"qid": "geo880_877", "query": "Which states have points that are higher than the highest point in Texas ?", "scala": "def answer(): Option[List[State]] = {\n    val texasHighPoint = geoModel.findState(\"texas\").map(_.highPoint.elevation)\n    val statesWithHigherPoints = geoModel.states.filter(_.highPoint.elevation > texasHighPoint.getOrElse(0))\n    statesWithHigherPoints\n}"}
{"qid": "geo880_878", "query": "Which states lie on the largest river in the United States ?", "scala": "def answer(): Option[List[State]] = {\n    val longestRiver = geoModel.rivers.maxBy(_.length)\n    longestRiver.map(_.traverses)\n}"}
{"qid": "geo880_879", "query": "Which US city has the highest population density ?", "scala": "def answer(): Option[City] = {\n    val citiesInUSA = geoModel.cities.filter(_.country.name == \"USA\")\n    citiesInUSA.maxBy(_.density)\n}"}
