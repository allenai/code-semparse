{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_0", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1", "domain": "socialnetwork"}
{"query": "employer of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_4", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_5", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_6", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_7", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_8", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_9", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_10", "domain": "socialnetwork"}
{"query": "end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_11", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_12", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_13", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_14", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_15", "domain": "socialnetwork"}
{"query": "mckinsey or google", "dcs": "(call SW.listValue (call SW.concat en.company.mckinsey en.company.google))", "qid": "socialnetwork_train_16", "domain": "socialnetwork"}
{"query": "city that is birthplace of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_17", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_18", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_19", "domain": "socialnetwork"}
{"query": "start date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_20", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_21", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_22", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_23", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_24", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_25", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_26", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_27", "domain": "socialnetwork"}
{"query": "person whose birthplace is city that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_28", "domain": "socialnetwork"}
{"query": "employee that has less than two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_29", "domain": "socialnetwork"}
{"query": "person whose birthplace is city that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_30", "domain": "socialnetwork"}
{"query": "person that has more than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_31", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_32", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_33", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_34", "domain": "socialnetwork"}
{"query": "person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_35", "domain": "socialnetwork"}
{"query": "gender that is gender of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_36", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_37", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_38", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_39", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_40", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_41", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_42", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_43", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_44", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_45", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_46", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_47", "domain": "socialnetwork"}
{"query": "gender that is gender of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string max) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_48", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_49", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_50", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_51", "domain": "socialnetwork"}
{"query": "start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_52", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_53", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_54", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_55", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_56", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_57", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_58", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_59", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_60", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_61", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_62", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_63", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_64", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_65", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_66", "domain": "socialnetwork"}
{"query": "person that is friends with the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string friend) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_67", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_68", "domain": "socialnetwork"}
{"query": "person that is logged in and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_69", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_70", "domain": "socialnetwork"}
{"query": "person that is logged in and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_71", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_72", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_73", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_74", "domain": "socialnetwork"}
{"query": "person that has the least number of relationship status", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_75", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_76", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_77", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_78", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_79", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "qid": "socialnetwork_train_80", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_81", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_82", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_83", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_84", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_85", "domain": "socialnetwork"}
{"query": "field of study of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_86", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_87", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_88", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_89", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_90", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_91", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_92", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_93", "domain": "socialnetwork"}
{"query": "start date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_94", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_95", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_96", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_97", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_98", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_99", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_100", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_101", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_102", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_103", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_104", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_105", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_106", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_107", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_108", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_109", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_110", "domain": "socialnetwork"}
{"query": "gender that is gender of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_111", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_112", "domain": "socialnetwork"}
{"query": "person whose relationship status is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_113", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_114", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_115", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_116", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_117", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_118", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_119", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_120", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_121", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_122", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_123", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_124", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_125", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_126", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_127", "domain": "socialnetwork"}
{"query": "student that has at most two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_128", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_129", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_130", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_131", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_132", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_133", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_134", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_135", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_136", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_137", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_138", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_139", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_140", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_141", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_142", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_143", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_144", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_145", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_146", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_147", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_148", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_149", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_150", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_151", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_152", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_153", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_154", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_155", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_156", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_157", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_158", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_159", "domain": "socialnetwork"}
{"query": "person that person that alice is friends with is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_160", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_161", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_162", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_163", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_164", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_165", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_166", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_167", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_168", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_169", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_170", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_171", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_172", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_173", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_174", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_175", "domain": "socialnetwork"}
{"query": "person that is friends with alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_176", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_177", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_178", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_179", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_180", "domain": "socialnetwork"}
{"query": "person that not is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_181", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_182", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_183", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_184", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_185", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_186", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_187", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_188", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_189", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_190", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_191", "domain": "socialnetwork"}
{"query": "person whose birthplace is city that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_192", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_193", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_194", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_195", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_196", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_197", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_198", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_199", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_200", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_201", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_202", "domain": "socialnetwork"}
{"query": "person that has at least two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_203", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_204", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_205", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_206", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_207", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_208", "domain": "socialnetwork"}
{"query": "number of city", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.city) (string !type))))", "qid": "socialnetwork_train_209", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_210", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_211", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_212", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_213", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_214", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_215", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_216", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_217", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_218", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_219", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_220", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_221", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_222", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_223", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_224", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_225", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_226", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_227", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_228", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_229", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_230", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_231", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_232", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_233", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_234", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_235", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_236", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_237", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_238", "domain": "socialnetwork"}
{"query": "student whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_239", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_240", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_241", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_242", "domain": "socialnetwork"}
{"query": "person that has two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_243", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_244", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_245", "domain": "socialnetwork"}
{"query": "start date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_246", "domain": "socialnetwork"}
{"query": "university of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_247", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_248", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_249", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_250", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_251", "domain": "socialnetwork"}
{"query": "student that has at most two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_252", "domain": "socialnetwork"}
{"query": "end date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_253", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_254", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_255", "domain": "socialnetwork"}
{"query": "city that is birthplace of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string min) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_256", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_257", "domain": "socialnetwork"}
{"query": "gender that is gender of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_258", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_259", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_260", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_261", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_262", "domain": "socialnetwork"}
{"query": "person that the least number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_263", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_264", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_265", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_266", "domain": "socialnetwork"}
{"query": "gender that is gender of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_267", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_268", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_269", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_270", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_271", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_272", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_273", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_274", "domain": "socialnetwork"}
{"query": "person that not is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_275", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_276", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_277", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_278", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_279", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_280", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_281", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_282", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_283", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_284", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_285", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_286", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string max) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_287", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_288", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_289", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_290", "domain": "socialnetwork"}
{"query": "person whose birthdate is start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_train_291", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_292", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_293", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_294", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_295", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_296", "domain": "socialnetwork"}
{"query": "person that has more than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_297", "domain": "socialnetwork"}
{"query": "employer of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_298", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_299", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_300", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_301", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_302", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_303", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_304", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_305", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_306", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_307", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_308", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_309", "domain": "socialnetwork"}
{"query": "single or married", "dcs": "(call SW.listValue (call SW.concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_train_310", "domain": "socialnetwork"}
{"query": "end date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_311", "domain": "socialnetwork"}
{"query": "person that has two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_312", "domain": "socialnetwork"}
{"query": "end date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_313", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_314", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_315", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_316", "domain": "socialnetwork"}
{"query": "start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_317", "domain": "socialnetwork"}
{"query": "person whose height is smaller than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_318", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_319", "domain": "socialnetwork"}
{"query": "number of job title", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.job_title) (string !type))))", "qid": "socialnetwork_train_320", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_321", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_322", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_323", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_324", "domain": "socialnetwork"}
{"query": "person that is friends with less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_325", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_326", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_327", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_328", "domain": "socialnetwork"}
{"query": "person whose birthdate is start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_329", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_330", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_331", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_332", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_333", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_334", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_335", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_336", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_337", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_338", "domain": "socialnetwork"}
{"query": "height of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_339", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_340", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_341", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_342", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_343", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_344", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_345", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_346", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_347", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_348", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_349", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_350", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_351", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_352", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_353", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_354", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_355", "domain": "socialnetwork"}
{"query": "person that is friends with person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_356", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_357", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_358", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_359", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_360", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_361", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_362", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_363", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_364", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_365", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_366", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_367", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_368", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_369", "domain": "socialnetwork"}
{"query": "person that is friends with person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_370", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_371", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_372", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_373", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_374", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_375", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_376", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_377", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_378", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_379", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_380", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_381", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_382", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_383", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_384", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_385", "domain": "socialnetwork"}
{"query": "person that less than two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_386", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_387", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_388", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_389", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_390", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_391", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_392", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_393", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_394", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_395", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_396", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_397", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_398", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_399", "domain": "socialnetwork"}
{"query": "average height of person", "dcs": "(call SW.listValue (call SW.aggregate (string avg) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_400", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_401", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_402", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_403", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_404", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_405", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_406", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_407", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_408", "domain": "socialnetwork"}
{"query": "person whose birthplace is not new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_409", "domain": "socialnetwork"}
{"query": "person that person whose height is 180 cm is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_410", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_411", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_412", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_413", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_414", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_415", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_416", "domain": "socialnetwork"}
{"query": "person that has at most two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_417", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_418", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_419", "domain": "socialnetwork"}
{"query": "gender that is gender of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_420", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_421", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_422", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_423", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_424", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_425", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_426", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_427", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_428", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_429", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_430", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_431", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_432", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_433", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_434", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_435", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_436", "domain": "socialnetwork"}
{"query": "person that is friends with less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_437", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_438", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_439", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string max) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_440", "domain": "socialnetwork"}
{"query": "number of gender", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.gender) (string !type))))", "qid": "socialnetwork_train_441", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_442", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_443", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_444", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_445", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_446", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_447", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_448", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_449", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_450", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_451", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_452", "domain": "socialnetwork"}
{"query": "alice or bob", "dcs": "(call SW.listValue (call SW.concat en.person.alice en.person.bob))", "qid": "socialnetwork_train_453", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_454", "domain": "socialnetwork"}
{"query": "person that is logged in and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_455", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_456", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_457", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_458", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_459", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_460", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_461", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_462", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_463", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_464", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_465", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_466", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_467", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_468", "domain": "socialnetwork"}
{"query": "number of person", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_469", "domain": "socialnetwork"}
{"query": "gender that is gender of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_470", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_471", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_472", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_473", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_474", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_475", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_476", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_477", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_478", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_479", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york or beijing", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_480", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string min) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_481", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_482", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_483", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_484", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_485", "domain": "socialnetwork"}
{"query": "person whose gender is male and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_486", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_487", "domain": "socialnetwork"}
{"query": "single or married", "dcs": "(call SW.listValue (call SW.concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_train_488", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_489", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_490", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_491", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_492", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_493", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_494", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_495", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_496", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_497", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_498", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_499", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_500", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_501", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_502", "domain": "socialnetwork"}
{"query": "person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_503", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_504", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_505", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_506", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_507", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_508", "domain": "socialnetwork"}
{"query": "start date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_509", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_510", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_511", "domain": "socialnetwork"}
{"query": "student whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_512", "domain": "socialnetwork"}
{"query": "person whose birthdate is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_513", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_514", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_515", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_516", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_517", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_518", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_519", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_520", "domain": "socialnetwork"}
{"query": "person whose gender is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_521", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_522", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_523", "domain": "socialnetwork"}
{"query": "person whose height is larger than 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_524", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_525", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_526", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_527", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_528", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_529", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_530", "domain": "socialnetwork"}
{"query": "gender that is gender of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_531", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_532", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_533", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_534", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_535", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_536", "domain": "socialnetwork"}
{"query": "student whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_537", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_538", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_539", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_540", "domain": "socialnetwork"}
{"query": "number of company", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.company) (string !type))))", "qid": "socialnetwork_train_541", "domain": "socialnetwork"}
{"query": "employee that has less than two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_542", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_543", "domain": "socialnetwork"}
{"query": "person whose birthplace is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_544", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_545", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_546", "domain": "socialnetwork"}
{"query": "gender of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string gender)))", "qid": "socialnetwork_train_547", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_548", "domain": "socialnetwork"}
{"query": "person that is friends with person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_549", "domain": "socialnetwork"}
{"query": "person that has two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_550", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_551", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_552", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_553", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_554", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_555", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_556", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_557", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_558", "domain": "socialnetwork"}
{"query": "end date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_559", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_560", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_561", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_562", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_563", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_564", "domain": "socialnetwork"}
{"query": "gender that is gender of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string min) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_565", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_566", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_567", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_568", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_569", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_570", "domain": "socialnetwork"}
{"query": "job title of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))", "qid": "socialnetwork_train_571", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_572", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_573", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_574", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_575", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_576", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_577", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_578", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_579", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_580", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_581", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_582", "domain": "socialnetwork"}
{"query": "person that is logged in and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_583", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_584", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_585", "domain": "socialnetwork"}
{"query": "person that has the most number of gender", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string gender)))", "qid": "socialnetwork_train_586", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_587", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_588", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_589", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_590", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_591", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_592", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_593", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_594", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_595", "domain": "socialnetwork"}
{"query": "total height of person", "dcs": "(call SW.listValue (call SW.aggregate (string sum) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_596", "domain": "socialnetwork"}
{"query": "person that is friends with the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string friend) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_597", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_598", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_599", "domain": "socialnetwork"}
{"query": "person whose height is at least 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_600", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_601", "domain": "socialnetwork"}
{"query": "person whose birthdate is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_602", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_603", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_604", "domain": "socialnetwork"}
{"query": "university of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_605", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string min) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_606", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_607", "domain": "socialnetwork"}
{"query": "person that is friends with more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_608", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_609", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_610", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_611", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_612", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_613", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_614", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_615", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_616", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_617", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_618", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_619", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_620", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_621", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_622", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_623", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_624", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_625", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_626", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_627", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_628", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_629", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_630", "domain": "socialnetwork"}
{"query": "student whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_631", "domain": "socialnetwork"}
{"query": "person that is friends with person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_632", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_633", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_634", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_635", "domain": "socialnetwork"}
{"query": "student whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_636", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_637", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_638", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_639", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_640", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_641", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_642", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_643", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_644", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_645", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_646", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_647", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_648", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_649", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_650", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_651", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_652", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_653", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_654", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_655", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_656", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_657", "domain": "socialnetwork"}
{"query": "number of city", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.city) (string !type))))", "qid": "socialnetwork_train_658", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_659", "domain": "socialnetwork"}
{"query": "person that is friends with the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string friend) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_660", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_661", "domain": "socialnetwork"}
{"query": "person that the most number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_662", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_663", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_664", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_665", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_666", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_667", "domain": "socialnetwork"}
{"query": "person that at most two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_668", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_669", "domain": "socialnetwork"}
{"query": "person that is friends with at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_670", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_671", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_672", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_673", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_674", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_675", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_676", "domain": "socialnetwork"}
{"query": "start date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_677", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_678", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_679", "domain": "socialnetwork"}
{"query": "gender that is gender of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_680", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_681", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_682", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_683", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_684", "domain": "socialnetwork"}
{"query": "number of person", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_685", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_686", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_687", "domain": "socialnetwork"}
{"query": "person whose gender is male or female", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_688", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_689", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_690", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_691", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_692", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_693", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_694", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_695", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_696", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_697", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_698", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_699", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_700", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_701", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_702", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_703", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_704", "domain": "socialnetwork"}
{"query": "student whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_705", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_706", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_707", "domain": "socialnetwork"}
{"query": "gender of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string gender)))", "qid": "socialnetwork_train_708", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_709", "domain": "socialnetwork"}
{"query": "person whose relationship status is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_710", "domain": "socialnetwork"}
{"query": "end date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_711", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_712", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_713", "domain": "socialnetwork"}
{"query": "person that two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_714", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_715", "domain": "socialnetwork"}
{"query": "city that is birthplace of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string min) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_716", "domain": "socialnetwork"}
{"query": "person whose relationship status is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_717", "domain": "socialnetwork"}
{"query": "gender that is gender of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string max) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_718", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_719", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_720", "domain": "socialnetwork"}
{"query": "gender that is gender of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_721", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_722", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_723", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_724", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_725", "domain": "socialnetwork"}
{"query": "person whose height is larger than 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_726", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_727", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_728", "domain": "socialnetwork"}
{"query": "person that has the largest birthdate", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_729", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_730", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_731", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_732", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_733", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_734", "domain": "socialnetwork"}
{"query": "city that is birthplace of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_735", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_736", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_737", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_738", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_739", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_740", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_741", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_742", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_743", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_744", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_745", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_746", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_747", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_748", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_749", "domain": "socialnetwork"}
{"query": "gender that is gender of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_750", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_751", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_752", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_753", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_754", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_755", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_756", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_757", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_758", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_759", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_760", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_761", "domain": "socialnetwork"}
{"query": "person that is friends with at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_762", "domain": "socialnetwork"}
{"query": "student that has less than two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_763", "domain": "socialnetwork"}
{"query": "person that has less than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_764", "domain": "socialnetwork"}
{"query": "person whose height is smaller than 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_765", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_766", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_767", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_768", "domain": "socialnetwork"}
{"query": "end date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_769", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_770", "domain": "socialnetwork"}
{"query": "end date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_771", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_772", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_773", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_774", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_775", "domain": "socialnetwork"}
{"query": "end date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_776", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_777", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_778", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_779", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_780", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_781", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_782", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_783", "domain": "socialnetwork"}
{"query": "person that is friends with the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string friend) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_784", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_785", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_786", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_787", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_788", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_789", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_790", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_791", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_792", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_793", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_794", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_795", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_796", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_797", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_798", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_799", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_800", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_801", "domain": "socialnetwork"}
{"query": "person that at most two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_802", "domain": "socialnetwork"}
{"query": "number of person", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_803", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_804", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_805", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_806", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_807", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_808", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_809", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_810", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_811", "domain": "socialnetwork"}
{"query": "employer of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_train_812", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_813", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_814", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_815", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_816", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_817", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_818", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_819", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_820", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_821", "domain": "socialnetwork"}
{"query": "180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_822", "domain": "socialnetwork"}
{"query": "person that is logged in and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_823", "domain": "socialnetwork"}
{"query": "180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_824", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_825", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_826", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_827", "domain": "socialnetwork"}
{"query": "number of relationship status", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.relationship_status) (string !type))))", "qid": "socialnetwork_train_828", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_829", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_830", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_831", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_832", "domain": "socialnetwork"}
{"query": "person that is friends with two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_833", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_834", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_835", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_836", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_837", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_838", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_839", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_840", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_841", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_842", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_843", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_844", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_845", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_846", "domain": "socialnetwork"}
{"query": "person that the most number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_847", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_848", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_849", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_850", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_851", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_852", "domain": "socialnetwork"}
{"query": "person that has the least number of birthplace", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string birthplace)))", "qid": "socialnetwork_train_853", "domain": "socialnetwork"}
{"query": "start date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_854", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_855", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_856", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_857", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_858", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_859", "domain": "socialnetwork"}
{"query": "person that has two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_860", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_861", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_862", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_863", "domain": "socialnetwork"}
{"query": "end date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_864", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_865", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_866", "domain": "socialnetwork"}
{"query": "student whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_867", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_868", "domain": "socialnetwork"}
{"query": "field of study of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_869", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_870", "domain": "socialnetwork"}
{"query": "person that has less than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_871", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_872", "domain": "socialnetwork"}
{"query": "gender that is gender of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_873", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_874", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_875", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_876", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_877", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_878", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_879", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_880", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_881", "domain": "socialnetwork"}
{"query": "end date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_882", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_883", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_884", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_885", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_886", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_887", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_888", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_889", "domain": "socialnetwork"}
{"query": "student that has the most number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_890", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_891", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_892", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_893", "domain": "socialnetwork"}
{"query": "student that has less than two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_894", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_895", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_896", "domain": "socialnetwork"}
{"query": "person whose height is smaller than 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_897", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_898", "domain": "socialnetwork"}
{"query": "person that has the most number of relationship status", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string relationship_status)))", "qid": "socialnetwork_train_899", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_900", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_901", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_902", "domain": "socialnetwork"}
{"query": "person that has the largest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_train_903", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_904", "domain": "socialnetwork"}
{"query": "job title of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))", "qid": "socialnetwork_train_905", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_906", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_907", "domain": "socialnetwork"}
{"query": "person that is logged in and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_908", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_909", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_910", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_911", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_912", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_913", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_914", "domain": "socialnetwork"}
{"query": "person that is logged in and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_915", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_916", "domain": "socialnetwork"}
{"query": "person that is friends with two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_917", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_918", "domain": "socialnetwork"}
{"query": "person that has at least two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_919", "domain": "socialnetwork"}
{"query": "alice or bob", "dcs": "(call SW.listValue (call SW.concat en.person.alice en.person.bob))", "qid": "socialnetwork_train_920", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_921", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_922", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_923", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_924", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_925", "domain": "socialnetwork"}
{"query": "person whose birthdate is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_926", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_927", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_928", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_929", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_930", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_931", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_932", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_933", "domain": "socialnetwork"}
{"query": "person that is friends with person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_934", "domain": "socialnetwork"}
{"query": "person that is friends with at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_935", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_936", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_937", "domain": "socialnetwork"}
{"query": "field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_938", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_939", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_940", "domain": "socialnetwork"}
{"query": "person whose birthplace is city that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_941", "domain": "socialnetwork"}
{"query": "gender that is gender of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_942", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_943", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_944", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_945", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_946", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_947", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_948", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_949", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_950", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_951", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_952", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string max) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_953", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_954", "domain": "socialnetwork"}
{"query": "person whose height is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_955", "domain": "socialnetwork"}
{"query": "person that has two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_956", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_957", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_958", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_959", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_960", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_961", "domain": "socialnetwork"}
{"query": "software engineer or program manager", "dcs": "(call SW.listValue (call SW.concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_962", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_963", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_964", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_965", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_966", "domain": "socialnetwork"}
{"query": "start date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_967", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_968", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_969", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_970", "domain": "socialnetwork"}
{"query": "person whose height is smaller than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_971", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_972", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_973", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_974", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_975", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_976", "domain": "socialnetwork"}
{"query": "total height of person", "dcs": "(call SW.listValue (call SW.aggregate (string sum) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_977", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_978", "domain": "socialnetwork"}
{"query": "student whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_979", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_980", "domain": "socialnetwork"}
{"query": "university of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_981", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_982", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_983", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_984", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_985", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_986", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_987", "domain": "socialnetwork"}
{"query": "person that has more than two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_988", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_989", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_990", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_991", "domain": "socialnetwork"}
{"query": "person whose birthdate is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_992", "domain": "socialnetwork"}
{"query": "person whose relationship status is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_993", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_994", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_995", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_996", "domain": "socialnetwork"}
{"query": "person whose relationship status is single or married", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_997", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_998", "domain": "socialnetwork"}
{"query": "employer of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_999", "domain": "socialnetwork"}
{"query": "person that has the largest birthdate", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1000", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1001", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1002", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1003", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1004", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1005", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1006", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1007", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1008", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1009", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1010", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1011", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1012", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1013", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_1014", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1015", "domain": "socialnetwork"}
{"query": "brown university or ucla", "dcs": "(call SW.listValue (call SW.concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_1016", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1017", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1018", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1019", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1020", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1021", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1022", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1023", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1024", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1025", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1026", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1027", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1028", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1029", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1030", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1031", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1032", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1033", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1034", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1035", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1036", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1037", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1038", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1039", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1040", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1041", "domain": "socialnetwork"}
{"query": "student that has the most number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1042", "domain": "socialnetwork"}
{"query": "person that is logged in and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1043", "domain": "socialnetwork"}
{"query": "student whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1044", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1045", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1046", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1047", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1048", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1049", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1050", "domain": "socialnetwork"}
{"query": "person whose height is at least 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1051", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1052", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1053", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1054", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1055", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1056", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1057", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1058", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1059", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1060", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1061", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_1062", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1063", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1064", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1065", "domain": "socialnetwork"}
{"query": "person that has at least two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_1066", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1067", "domain": "socialnetwork"}
{"query": "person that is logged in and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1068", "domain": "socialnetwork"}
{"query": "employer of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_train_1069", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1070", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1071", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1072", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1073", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1074", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1075", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1076", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1077", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1078", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1079", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1080", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1081", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1082", "domain": "socialnetwork"}
{"query": "person that is logged in and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1083", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1084", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1085", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1086", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1087", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1088", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1089", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1090", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1091", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1092", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1093", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1094", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1095", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1096", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1097", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1098", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1099", "domain": "socialnetwork"}
{"query": "average height of person", "dcs": "(call SW.listValue (call SW.aggregate (string avg) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_1100", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1101", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1102", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1103", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1104", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1105", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1106", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1107", "domain": "socialnetwork"}
{"query": "number of field", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.field) (string !type))))", "qid": "socialnetwork_train_1108", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1109", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1110", "domain": "socialnetwork"}
{"query": "student whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1111", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1112", "domain": "socialnetwork"}
{"query": "person that is friends with the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string friend) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1113", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1114", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1115", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1116", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1117", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1118", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1119", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1120", "domain": "socialnetwork"}
{"query": "start date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1121", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1122", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1123", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1124", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1125", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1126", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1127", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1128", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_1129", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1130", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1131", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1132", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1133", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1134", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1135", "domain": "socialnetwork"}
{"query": "student whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1136", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1137", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1138", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1139", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1140", "domain": "socialnetwork"}
{"query": "start date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1141", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1142", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1143", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1144", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1145", "domain": "socialnetwork"}
{"query": "person that is friends with more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1146", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1147", "domain": "socialnetwork"}
{"query": "birthplace of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_1148", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1149", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1150", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1151", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string min) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1152", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1153", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1154", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1155", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1156", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1157", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1158", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1159", "domain": "socialnetwork"}
{"query": "person that has more than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_1160", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1161", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1162", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1163", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1164", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1165", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1166", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1167", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1168", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_1169", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1170", "domain": "socialnetwork"}
{"query": "gender that is gender of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1171", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1172", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1173", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1174", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1175", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1176", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_1177", "domain": "socialnetwork"}
{"query": "person that person that alice is friends with is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1178", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1179", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1180", "domain": "socialnetwork"}
{"query": "end date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_1181", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1182", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1183", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1184", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1185", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1186", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1187", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1188", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1189", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1190", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1191", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1192", "domain": "socialnetwork"}
{"query": "gender that is gender of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1193", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1194", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1195", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1196", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1197", "domain": "socialnetwork"}
{"query": "start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_1198", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1199", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1200", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1201", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1202", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1203", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1204", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1205", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1206", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1207", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1208", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1209", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1210", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1211", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1212", "domain": "socialnetwork"}
{"query": "person that has less than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_1213", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1214", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1215", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1216", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1217", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1218", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1219", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1220", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1221", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1222", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1223", "domain": "socialnetwork"}
{"query": "person that has less than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_1224", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1225", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1226", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1227", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1228", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1229", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1230", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1231", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1232", "domain": "socialnetwork"}
{"query": "person that has more than two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_1233", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1234", "domain": "socialnetwork"}
{"query": "person that has the largest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1235", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1236", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1237", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1238", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1239", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1240", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1241", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1242", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1243", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1244", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1245", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1246", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1247", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1248", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1249", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1250", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1251", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1252", "domain": "socialnetwork"}
{"query": "end date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_1253", "domain": "socialnetwork"}
{"query": "job title of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_1254", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1255", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1256", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1257", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1258", "domain": "socialnetwork"}
{"query": "person that at most two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1259", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1260", "domain": "socialnetwork"}
{"query": "person whose gender is male or female", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_1261", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1262", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1263", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1264", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1265", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1266", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1267", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1268", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1269", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1270", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1271", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1272", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1273", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1274", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1275", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1276", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1277", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1278", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1279", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1280", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1281", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1282", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1283", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1284", "domain": "socialnetwork"}
{"query": "field of study of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1285", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1286", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1287", "domain": "socialnetwork"}
{"query": "person that has at least two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_1288", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1289", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1290", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1291", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1292", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1293", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1294", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1295", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1296", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1297", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1298", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1299", "domain": "socialnetwork"}
{"query": "person whose height is at least 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1300", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_1301", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1302", "domain": "socialnetwork"}
{"query": "student whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1303", "domain": "socialnetwork"}
{"query": "person that is friends with person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1304", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1305", "domain": "socialnetwork"}
{"query": "city that is birthplace of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1306", "domain": "socialnetwork"}
{"query": "person that has the most number of gender", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string gender)))", "qid": "socialnetwork_train_1307", "domain": "socialnetwork"}
{"query": "student whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1308", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1309", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1310", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1311", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1312", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_train_1313", "domain": "socialnetwork"}
{"query": "field of study of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_1314", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1315", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1316", "domain": "socialnetwork"}
{"query": "person whose gender is not male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_1317", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1318", "domain": "socialnetwork"}
{"query": "gender that is gender of alice and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) en.person.alice) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1319", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1320", "domain": "socialnetwork"}
{"query": "person whose gender is male or female", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_1321", "domain": "socialnetwork"}
{"query": "person whose height is larger than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1322", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1323", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_1324", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1325", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1326", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1327", "domain": "socialnetwork"}
{"query": "person that has the least number of relationship status", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_1328", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1329", "domain": "socialnetwork"}
{"query": "person whose height is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1330", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1331", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1332", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1333", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1334", "domain": "socialnetwork"}
{"query": "start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_1335", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1336", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1337", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1338", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1339", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1340", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1341", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1342", "domain": "socialnetwork"}
{"query": "gender that is gender of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1343", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1344", "domain": "socialnetwork"}
{"query": "person that is friends with person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1345", "domain": "socialnetwork"}
{"query": "person whose birthplace is not new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_1346", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1347", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1348", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1349", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1350", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1351", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_1352", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1353", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1354", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1355", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1356", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1357", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1358", "domain": "socialnetwork"}
{"query": "person that has more than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_1359", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1360", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1361", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1362", "domain": "socialnetwork"}
{"query": "field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_1363", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1364", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1365", "domain": "socialnetwork"}
{"query": "person that person whose height is 180 cm is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1366", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1367", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1368", "domain": "socialnetwork"}
{"query": "gender that is gender of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1369", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1370", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1371", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1372", "domain": "socialnetwork"}
{"query": "person that has at most two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "qid": "socialnetwork_train_1373", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1374", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1375", "domain": "socialnetwork"}
{"query": "person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1376", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1377", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1378", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "qid": "socialnetwork_train_1379", "domain": "socialnetwork"}
{"query": "start date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1380", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1381", "domain": "socialnetwork"}
{"query": "gender that is gender of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1382", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1383", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1384", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1385", "domain": "socialnetwork"}
{"query": "employer of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_1386", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1387", "domain": "socialnetwork"}
{"query": "job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1388", "domain": "socialnetwork"}
{"query": "university of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_1389", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1390", "domain": "socialnetwork"}
{"query": "student whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1391", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1392", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1393", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1394", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1395", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1396", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1397", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1398", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1399", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1400", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1401", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_1402", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1403", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1404", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1405", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1406", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1407", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1408", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1409", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1410", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1411", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1412", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1413", "domain": "socialnetwork"}
{"query": "person whose gender is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1414", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1415", "domain": "socialnetwork"}
{"query": "start date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_1416", "domain": "socialnetwork"}
{"query": "student that has the most number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1417", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1418", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1419", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1420", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1421", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1422", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1423", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1424", "domain": "socialnetwork"}
{"query": "person that is friends with person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1425", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1426", "domain": "socialnetwork"}
{"query": "university of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))", "qid": "socialnetwork_train_1427", "domain": "socialnetwork"}
{"query": "person whose height is at most height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1428", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1429", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1430", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1431", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1432", "domain": "socialnetwork"}
{"query": "job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1433", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1434", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1435", "domain": "socialnetwork"}
{"query": "person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_1436", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1437", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1438", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1439", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1440", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1441", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1442", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1443", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1444", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1445", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1446", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1447", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1448", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1449", "domain": "socialnetwork"}
{"query": "person that is friends with person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1450", "domain": "socialnetwork"}
{"query": "person that is friends with more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1451", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1452", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1453", "domain": "socialnetwork"}
{"query": "start date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_1454", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1455", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1456", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1457", "domain": "socialnetwork"}
{"query": "person whose relationship status is not single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_1458", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1459", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1460", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1461", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1462", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1463", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_1464", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1465", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1466", "domain": "socialnetwork"}
{"query": "gender that is not gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1467", "domain": "socialnetwork"}
{"query": "job title of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_1468", "domain": "socialnetwork"}
{"query": "person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_1469", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1470", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_1471", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1472", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1473", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1474", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1475", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1476", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1477", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1478", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1479", "domain": "socialnetwork"}
{"query": "person that has two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_1480", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1481", "domain": "socialnetwork"}
{"query": "person whose gender is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1482", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1483", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1484", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1485", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1486", "domain": "socialnetwork"}
{"query": "person that has two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1487", "domain": "socialnetwork"}
{"query": "person that has at most two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_1488", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1489", "domain": "socialnetwork"}
{"query": "person that has two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_1490", "domain": "socialnetwork"}
{"query": "field of study of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_1491", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1492", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1493", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1494", "domain": "socialnetwork"}
{"query": "person that is logged in and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1495", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1496", "domain": "socialnetwork"}
{"query": "number of university", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.university) (string !type))))", "qid": "socialnetwork_train_1497", "domain": "socialnetwork"}
{"query": "person that has two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1498", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1499", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1500", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1501", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1502", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1503", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1504", "domain": "socialnetwork"}
{"query": "gender that is gender of alice and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) en.person.alice) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1505", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1506", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1507", "domain": "socialnetwork"}
{"query": "person that is logged in and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1508", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1509", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1510", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1511", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1512", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1513", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1514", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1515", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1516", "domain": "socialnetwork"}
{"query": "person that person that alice is friends with is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1517", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1518", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1519", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1520", "domain": "socialnetwork"}
{"query": "start date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1521", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1522", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1523", "domain": "socialnetwork"}
{"query": "person whose gender is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1524", "domain": "socialnetwork"}
{"query": "person whose birthplace is city that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1525", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1526", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1527", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1528", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1529", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1530", "domain": "socialnetwork"}
{"query": "field of study of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1531", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1532", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1533", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1534", "domain": "socialnetwork"}
{"query": "student that has at most two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1535", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1536", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_1537", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1538", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1539", "domain": "socialnetwork"}
{"query": "person that is friends with more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1540", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1541", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1542", "domain": "socialnetwork"}
{"query": "relationship status that is not relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1543", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1544", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1545", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1546", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1547", "domain": "socialnetwork"}
{"query": "average height of person", "dcs": "(call SW.listValue (call SW.aggregate (string avg) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_1548", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1549", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1550", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1551", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1552", "domain": "socialnetwork"}
{"query": "start date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1553", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1554", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1555", "domain": "socialnetwork"}
{"query": "person that has two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1556", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1557", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1558", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1559", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1560", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1561", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1562", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1563", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1564", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1565", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1566", "domain": "socialnetwork"}
{"query": "start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_1567", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1568", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1569", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1570", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1571", "domain": "socialnetwork"}
{"query": "person that is friends with person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1572", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1573", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1574", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1575", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1576", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1577", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1578", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1579", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1580", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1581", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1582", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1583", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1584", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1585", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of alice and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) en.person.alice) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_1586", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1587", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1588", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1589", "domain": "socialnetwork"}
{"query": "person that has the most number of birthplace", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string birthplace)))", "qid": "socialnetwork_train_1590", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1591", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1592", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1593", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1594", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_1595", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1596", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1597", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1598", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1599", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1600", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1601", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1602", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1603", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1604", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1605", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1606", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1607", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1608", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1609", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1610", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1611", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1612", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1613", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1614", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1615", "domain": "socialnetwork"}
{"query": "person that has the smallest birthdate", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1616", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1617", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1618", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1619", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1620", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1621", "domain": "socialnetwork"}
{"query": "person that has at least two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_1622", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1623", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1624", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1625", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1626", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1627", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1628", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_1629", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1630", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1631", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1632", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1633", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1634", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1635", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1636", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1637", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1638", "domain": "socialnetwork"}
{"query": "person whose birthplace is not new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_1639", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1640", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1641", "domain": "socialnetwork"}
{"query": "end date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_1642", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1643", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1644", "domain": "socialnetwork"}
{"query": "university of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))", "qid": "socialnetwork_train_1645", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1646", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1647", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1648", "domain": "socialnetwork"}
{"query": "person that has at most two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_1649", "domain": "socialnetwork"}
{"query": "university of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_1650", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1651", "domain": "socialnetwork"}
{"query": "field of study of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_1652", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1653", "domain": "socialnetwork"}
{"query": "average height of person", "dcs": "(call SW.listValue (call SW.aggregate (string avg) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_1654", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1655", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_1656", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1657", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1658", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1659", "domain": "socialnetwork"}
{"query": "university of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))", "qid": "socialnetwork_train_1660", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1661", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1662", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1663", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1664", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1665", "domain": "socialnetwork"}
{"query": "gender that is gender of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1666", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1667", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1668", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1669", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1670", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1671", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1672", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1673", "domain": "socialnetwork"}
{"query": "number of gender", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.gender) (string !type))))", "qid": "socialnetwork_train_1674", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1675", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1676", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1677", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1678", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1679", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1680", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1681", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1682", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1683", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1684", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1685", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1686", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1687", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1688", "domain": "socialnetwork"}
{"query": "person whose height is smaller than 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1689", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1690", "domain": "socialnetwork"}
{"query": "person whose height is larger than 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1691", "domain": "socialnetwork"}
{"query": "person that has at most two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_1692", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1693", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1694", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1695", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1696", "domain": "socialnetwork"}
{"query": "person that has the smallest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1697", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1698", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1699", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1700", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1701", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1702", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1703", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1704", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1705", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1706", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1707", "domain": "socialnetwork"}
{"query": "mckinsey or google", "dcs": "(call SW.listValue (call SW.concat en.company.mckinsey en.company.google))", "qid": "socialnetwork_train_1708", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1709", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1710", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1711", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1712", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1713", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1714", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1715", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1716", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1717", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1718", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1719", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1720", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1721", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1722", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1723", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1724", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1725", "domain": "socialnetwork"}
{"query": "field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_1726", "domain": "socialnetwork"}
{"query": "number of city", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.city) (string !type))))", "qid": "socialnetwork_train_1727", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_train_1728", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1729", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1730", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_1731", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1732", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1733", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1734", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1735", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1736", "domain": "socialnetwork"}
{"query": "person that has the smallest birthdate", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1737", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1738", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1739", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1740", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1741", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1742", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1743", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1744", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1745", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1746", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1747", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1748", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1749", "domain": "socialnetwork"}
{"query": "person that is friends with two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1750", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1751", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_1752", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1753", "domain": "socialnetwork"}
{"query": "person that has less than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_1754", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1755", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1756", "domain": "socialnetwork"}
{"query": "job title of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_1757", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1758", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1759", "domain": "socialnetwork"}
{"query": "person that has the least number of relationship status", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_1760", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1761", "domain": "socialnetwork"}
{"query": "start date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1762", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1763", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1764", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1765", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1766", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1767", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1768", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1769", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1770", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1771", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1772", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1773", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1774", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1775", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1776", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1777", "domain": "socialnetwork"}
{"query": "person that has less than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_1778", "domain": "socialnetwork"}
{"query": "person that is logged in and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1779", "domain": "socialnetwork"}
{"query": "person that is friends with more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1780", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1781", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_1782", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1783", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1784", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1785", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1786", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1787", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1788", "domain": "socialnetwork"}
{"query": "start date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1789", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1790", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1791", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1792", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1793", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1794", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1795", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1796", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1797", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1798", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1799", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1800", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1801", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1802", "domain": "socialnetwork"}
{"query": "person whose relationship status is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1803", "domain": "socialnetwork"}
{"query": "student whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1804", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1805", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1806", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1807", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1808", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1809", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_1810", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1811", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1812", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1813", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1814", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1815", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1816", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1817", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1818", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1819", "domain": "socialnetwork"}
{"query": "person that has less than two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_train_1820", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1821", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1822", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1823", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1824", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1825", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1826", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1827", "domain": "socialnetwork"}
{"query": "person whose height is at least height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1828", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1829", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1830", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1831", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1832", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1833", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1834", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1835", "domain": "socialnetwork"}
{"query": "number of city", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.city) (string !type))))", "qid": "socialnetwork_train_1836", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1837", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1838", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1839", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1840", "domain": "socialnetwork"}
{"query": "relationship status that is not relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1841", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1842", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1843", "domain": "socialnetwork"}
{"query": "person that the least number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1844", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1845", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1846", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1847", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1848", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1849", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1850", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1851", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1852", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1853", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1854", "domain": "socialnetwork"}
{"query": "gender that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1855", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1856", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1857", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1858", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1859", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1860", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1861", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1862", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1863", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1864", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1865", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1866", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1867", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1868", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1869", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1870", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1871", "domain": "socialnetwork"}
{"query": "student that has less than two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1872", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1873", "domain": "socialnetwork"}
{"query": "field of study of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1874", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1875", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1876", "domain": "socialnetwork"}
{"query": "person whose birthplace is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1877", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1878", "domain": "socialnetwork"}
{"query": "male or female", "dcs": "(call SW.listValue (call SW.concat en.gender.male en.gender.female))", "qid": "socialnetwork_train_1879", "domain": "socialnetwork"}
{"query": "person that is friends with alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1880", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1881", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1882", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1883", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1884", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1885", "domain": "socialnetwork"}
{"query": "person that has the smallest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1886", "domain": "socialnetwork"}
{"query": "person whose height is at most 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_1887", "domain": "socialnetwork"}
{"query": "person that has at most two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_1888", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1889", "domain": "socialnetwork"}
{"query": "university of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_train_1890", "domain": "socialnetwork"}
{"query": "person that person that alice is friends with is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1891", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1892", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1893", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1894", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1895", "domain": "socialnetwork"}
{"query": "person whose birthdate is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1896", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1897", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1898", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1899", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1900", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1901", "domain": "socialnetwork"}
{"query": "person that has two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_1902", "domain": "socialnetwork"}
{"query": "person whose birthdate is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1903", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1904", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1905", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1906", "domain": "socialnetwork"}
{"query": "end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_1907", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1908", "domain": "socialnetwork"}
{"query": "person that has at least two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_1909", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1910", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1911", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1912", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1913", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1914", "domain": "socialnetwork"}
{"query": "person that is logged in and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1915", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1916", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1917", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1918", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1919", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1920", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1921", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1922", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1923", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1924", "domain": "socialnetwork"}
{"query": "birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_1925", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1926", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1927", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1928", "domain": "socialnetwork"}
{"query": "person that is logged in and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1929", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_1930", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1931", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1932", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1933", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1934", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1935", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1936", "domain": "socialnetwork"}
{"query": "person that at most two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1937", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1938", "domain": "socialnetwork"}
{"query": "person whose height is not 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_1939", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1940", "domain": "socialnetwork"}
{"query": "person that is logged in and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1941", "domain": "socialnetwork"}
{"query": "end date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_1942", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1943", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1944", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1945", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1946", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1947", "domain": "socialnetwork"}
{"query": "person that is friends with more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1948", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1949", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1950", "domain": "socialnetwork"}
{"query": "gender that is gender of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string min) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1951", "domain": "socialnetwork"}
{"query": "person that has at most two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_1952", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1953", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1954", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1955", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1956", "domain": "socialnetwork"}
{"query": "person that is friends with at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1957", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1958", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1959", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1960", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1961", "domain": "socialnetwork"}
{"query": "person that person whose height is 180 cm is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1962", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1963", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1964", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1965", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1966", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york or beijing", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_1967", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1968", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1969", "domain": "socialnetwork"}
{"query": "person that has two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_1970", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1971", "domain": "socialnetwork"}
{"query": "employer of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_1972", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1973", "domain": "socialnetwork"}
{"query": "person whose height is at least height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1974", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1975", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1976", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1977", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1978", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1979", "domain": "socialnetwork"}
{"query": "person that person whose height is 180 cm is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1980", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1981", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1982", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1983", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1984", "domain": "socialnetwork"}
{"query": "city that is not birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1985", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1986", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1987", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1988", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1989", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1990", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1991", "domain": "socialnetwork"}
{"query": "person that is logged in and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1992", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_1993", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1994", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1995", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1996", "domain": "socialnetwork"}
{"query": "person that two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_1997", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1998", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_1999", "domain": "socialnetwork"}
{"query": "person whose gender is male and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2000", "domain": "socialnetwork"}
{"query": "city that is birthplace of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string max) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2001", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2002", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2003", "domain": "socialnetwork"}
{"query": "job title of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2004", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2005", "domain": "socialnetwork"}
{"query": "end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_2006", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2007", "domain": "socialnetwork"}
{"query": "job title of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_2008", "domain": "socialnetwork"}
{"query": "person whose birthdate is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2009", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2010", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2011", "domain": "socialnetwork"}
{"query": "person whose height is at least height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2012", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2013", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2014", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2015", "domain": "socialnetwork"}
{"query": "person whose relationship status is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2016", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2017", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2018", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_2019", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2020", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2021", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2022", "domain": "socialnetwork"}
{"query": "2004 or 2010", "dcs": "(call SW.listValue (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))", "qid": "socialnetwork_train_2023", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2024", "domain": "socialnetwork"}
{"query": "person that less than two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2025", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2026", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2027", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2028", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2029", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2030", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2031", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2032", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2033", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2034", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2035", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2036", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2037", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2038", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2039", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2040", "domain": "socialnetwork"}
{"query": "city that is birthplace of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string max) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2041", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2042", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_2043", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2044", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2045", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2046", "domain": "socialnetwork"}
{"query": "person that less than two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2047", "domain": "socialnetwork"}
{"query": "number of company", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.company) (string !type))))", "qid": "socialnetwork_train_2048", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2049", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2050", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2051", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2052", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2053", "domain": "socialnetwork"}
{"query": "employee whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2054", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2055", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2056", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2057", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2058", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2059", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2060", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2061", "domain": "socialnetwork"}
{"query": "employee that has less than two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2062", "domain": "socialnetwork"}
{"query": "end date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_2063", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2064", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2065", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2066", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2067", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_2068", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2069", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2070", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2071", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2072", "domain": "socialnetwork"}
{"query": "gender that is gender of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2073", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york or beijing", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2074", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2075", "domain": "socialnetwork"}
{"query": "university of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_2076", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2077", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2078", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2079", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2080", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2081", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2082", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2083", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2084", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2085", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2086", "domain": "socialnetwork"}
{"query": "person whose birthdate is start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_2087", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2088", "domain": "socialnetwork"}
{"query": "person that two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2089", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2090", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2091", "domain": "socialnetwork"}
{"query": "start date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_2092", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2093", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2094", "domain": "socialnetwork"}
{"query": "person whose birthdate is start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_train_2095", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2096", "domain": "socialnetwork"}
{"query": "person that is friends with person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2097", "domain": "socialnetwork"}
{"query": "person whose birthplace is not new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_2098", "domain": "socialnetwork"}
{"query": "person whose relationship status is single or married", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_2099", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2100", "domain": "socialnetwork"}
{"query": "person whose gender is male and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2101", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2102", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2103", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2104", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2105", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2106", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2107", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2108", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2109", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2110", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2111", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2112", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2113", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2114", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2115", "domain": "socialnetwork"}
{"query": "person whose height is at most 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2116", "domain": "socialnetwork"}
{"query": "student whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2117", "domain": "socialnetwork"}
{"query": "number of field", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.field) (string !type))))", "qid": "socialnetwork_train_2118", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2119", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2120", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2121", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2122", "domain": "socialnetwork"}
{"query": "employer of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_train_2123", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2124", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2125", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2126", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2127", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2128", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2129", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2130", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2131", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2132", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2133", "domain": "socialnetwork"}
{"query": "start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_2134", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2135", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2136", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2137", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2138", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2139", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2140", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2141", "domain": "socialnetwork"}
{"query": "new york or beijing", "dcs": "(call SW.listValue (call SW.concat en.city.new_york en.city.bejing))", "qid": "socialnetwork_train_2142", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2143", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_2144", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2145", "domain": "socialnetwork"}
{"query": "job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2146", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2147", "domain": "socialnetwork"}
{"query": "city that is not birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2148", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2149", "domain": "socialnetwork"}
{"query": "person whose birthplace is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2150", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2151", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2152", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2153", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2154", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2155", "domain": "socialnetwork"}
{"query": "number of relationship status", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.relationship_status) (string !type))))", "qid": "socialnetwork_train_2156", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2157", "domain": "socialnetwork"}
{"query": "job title of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2158", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2159", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2160", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2161", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2162", "domain": "socialnetwork"}
{"query": "person that person whose height is 180 cm is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2163", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2164", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2165", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2166", "domain": "socialnetwork"}
{"query": "gender that is gender of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string max) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2167", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2168", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2169", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2170", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2171", "domain": "socialnetwork"}
{"query": "person whose gender is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2172", "domain": "socialnetwork"}
{"query": "person whose height is smaller than 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2173", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2174", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2175", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2176", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2177", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2178", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2179", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2180", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2181", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2182", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2183", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2184", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2185", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2186", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2187", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2188", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2189", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2190", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2191", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2192", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2193", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2194", "domain": "socialnetwork"}
{"query": "student that has less than two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2195", "domain": "socialnetwork"}
{"query": "start date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2196", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2197", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2198", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2199", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2200", "domain": "socialnetwork"}
{"query": "person that is friends with person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2201", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2202", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2203", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2204", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2205", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2206", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2207", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2208", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_2209", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2210", "domain": "socialnetwork"}
{"query": "person that has more than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2211", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2212", "domain": "socialnetwork"}
{"query": "university of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_2213", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2214", "domain": "socialnetwork"}
{"query": "person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2215", "domain": "socialnetwork"}
{"query": "person whose height is at most height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2216", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2217", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2218", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2219", "domain": "socialnetwork"}
{"query": "software engineer or program manager", "dcs": "(call SW.listValue (call SW.concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_2220", "domain": "socialnetwork"}
{"query": "person that has the least number of gender", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string gender)))", "qid": "socialnetwork_train_2221", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2222", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2223", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2224", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2225", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2226", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2227", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2228", "domain": "socialnetwork"}
{"query": "person whose relationship status is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_2229", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2230", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2231", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2232", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2233", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2234", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2235", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2236", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2237", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2238", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2239", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_2240", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2241", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2242", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2243", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2244", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2245", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2246", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2247", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2248", "domain": "socialnetwork"}
{"query": "person that has the most number of relationship status", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string relationship_status)))", "qid": "socialnetwork_train_2249", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2250", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2251", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2252", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2253", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2254", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2255", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2256", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2257", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2258", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2259", "domain": "socialnetwork"}
{"query": "person that the most number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2260", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2261", "domain": "socialnetwork"}
{"query": "end date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2262", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2263", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2264", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2265", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2266", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2267", "domain": "socialnetwork"}
{"query": "gender that is gender of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2268", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2269", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2270", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2271", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2272", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2273", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2274", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2275", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2276", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2277", "domain": "socialnetwork"}
{"query": "start date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2278", "domain": "socialnetwork"}
{"query": "person that has more than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2279", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2280", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2281", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2282", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2283", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2284", "domain": "socialnetwork"}
{"query": "relationship status that is not relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2285", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2286", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2287", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2288", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2289", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2290", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2291", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2292", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2293", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2294", "domain": "socialnetwork"}
{"query": "employer of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2295", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2296", "domain": "socialnetwork"}
{"query": "person whose relationship status is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_2297", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2298", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2299", "domain": "socialnetwork"}
{"query": "relationship status that is not relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2300", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2301", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2302", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2303", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2304", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2305", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2306", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2307", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2308", "domain": "socialnetwork"}
{"query": "software engineer or program manager", "dcs": "(call SW.listValue (call SW.concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_2309", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2310", "domain": "socialnetwork"}
{"query": "student whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2311", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2312", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2313", "domain": "socialnetwork"}
{"query": "student whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2314", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2315", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2316", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2317", "domain": "socialnetwork"}
{"query": "person whose gender is not male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_2318", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2319", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2320", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2321", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2322", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2323", "domain": "socialnetwork"}
{"query": "start date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2324", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2325", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2326", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2327", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2328", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2329", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2330", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2331", "domain": "socialnetwork"}
{"query": "employee whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2332", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2333", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2334", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2335", "domain": "socialnetwork"}
{"query": "180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_2336", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2337", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2338", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2339", "domain": "socialnetwork"}
{"query": "person whose height is smaller than 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2340", "domain": "socialnetwork"}
{"query": "person that has two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_2341", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2342", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2343", "domain": "socialnetwork"}
{"query": "person that has less than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_2344", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2345", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2346", "domain": "socialnetwork"}
{"query": "person that has the smallest birthdate", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_2347", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2348", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2349", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2350", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2351", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2352", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2353", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2354", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2355", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2356", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2357", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2358", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2359", "domain": "socialnetwork"}
{"query": "person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2360", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2361", "domain": "socialnetwork"}
{"query": "student whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2362", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2363", "domain": "socialnetwork"}
{"query": "end date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2364", "domain": "socialnetwork"}
{"query": "birthplace of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2365", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2366", "domain": "socialnetwork"}
{"query": "job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2367", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2368", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2369", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2370", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2371", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2372", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2373", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2374", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_2375", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2376", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2377", "domain": "socialnetwork"}
{"query": "person that has two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_2378", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2379", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2380", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2381", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2382", "domain": "socialnetwork"}
{"query": "person that is friends with person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2383", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2384", "domain": "socialnetwork"}
{"query": "person that has less than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_2385", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2386", "domain": "socialnetwork"}
{"query": "gender that is gender of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2387", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2388", "domain": "socialnetwork"}
{"query": "person that is logged in and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2389", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2390", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2391", "domain": "socialnetwork"}
{"query": "person that is friends with person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2392", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2393", "domain": "socialnetwork"}
{"query": "person whose birthplace is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2394", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2395", "domain": "socialnetwork"}
{"query": "person whose height is at most height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2396", "domain": "socialnetwork"}
{"query": "person that is friends with person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2397", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2398", "domain": "socialnetwork"}
{"query": "person that has the least number of relationship status", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_2399", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2400", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2401", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2402", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2403", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2404", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2405", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2406", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2407", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2408", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2409", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2410", "domain": "socialnetwork"}
{"query": "person that has the smallest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_train_2411", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2412", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2413", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2414", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2415", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2416", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2417", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2418", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2419", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2420", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2421", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2422", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2423", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2424", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2425", "domain": "socialnetwork"}
{"query": "person that is friends with person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2426", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2427", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2428", "domain": "socialnetwork"}
{"query": "job title of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2429", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2430", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2431", "domain": "socialnetwork"}
{"query": "person that is friends with person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2432", "domain": "socialnetwork"}
{"query": "university of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))", "qid": "socialnetwork_train_2433", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2434", "domain": "socialnetwork"}
{"query": "person whose height is not 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_2435", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2436", "domain": "socialnetwork"}
{"query": "person that has at least two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_2437", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2438", "domain": "socialnetwork"}
{"query": "person whose height is at most height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2439", "domain": "socialnetwork"}
{"query": "person whose height is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.getProperty en.person.alice (string height))))", "qid": "socialnetwork_train_2440", "domain": "socialnetwork"}
{"query": "person that the least number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2441", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2442", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2443", "domain": "socialnetwork"}
{"query": "person that has at most two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "qid": "socialnetwork_train_2444", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2445", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2446", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2447", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2448", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2449", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2450", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2451", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2452", "domain": "socialnetwork"}
{"query": "person that employee whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2453", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2454", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2455", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2456", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2457", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2458", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2459", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2460", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2461", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2462", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2463", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2464", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2465", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2466", "domain": "socialnetwork"}
{"query": "person that has the largest birthdate", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_2467", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2468", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york or beijing", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2469", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2470", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2471", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2472", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2473", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2474", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2475", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2476", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2477", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2478", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2479", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2480", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2481", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2482", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2483", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2484", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2485", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2486", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2487", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2488", "domain": "socialnetwork"}
{"query": "end date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_2489", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2490", "domain": "socialnetwork"}
{"query": "end date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_2491", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2492", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2493", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2494", "domain": "socialnetwork"}
{"query": "person that at least two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2495", "domain": "socialnetwork"}
{"query": "person whose relationship status is not single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_2496", "domain": "socialnetwork"}
{"query": "city that is birthplace of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2497", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2498", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2499", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2500", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2501", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2502", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2503", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2504", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2505", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2506", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2507", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2508", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2509", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2510", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2511", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2512", "domain": "socialnetwork"}
{"query": "person that is logged in and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2513", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2514", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2515", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2516", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2517", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2518", "domain": "socialnetwork"}
{"query": "person that is friends with person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2519", "domain": "socialnetwork"}
{"query": "start date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2520", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2521", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2522", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2523", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2524", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2525", "domain": "socialnetwork"}
{"query": "height of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_2526", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2527", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2528", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2529", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2530", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2531", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2532", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2533", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2534", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2535", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2536", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2537", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2538", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2539", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2540", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2541", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2542", "domain": "socialnetwork"}
{"query": "start date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2543", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2544", "domain": "socialnetwork"}
{"query": "person whose height is larger than 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2545", "domain": "socialnetwork"}
{"query": "person that is friends with at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2546", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2547", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2548", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2549", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2550", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2551", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2552", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2553", "domain": "socialnetwork"}
{"query": "person that has more than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2554", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2555", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2556", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2557", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2558", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2559", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2560", "domain": "socialnetwork"}
{"query": "person that is logged in and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2561", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2562", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2563", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2564", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2565", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2566", "domain": "socialnetwork"}
{"query": "birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_2567", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2568", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2569", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2570", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2571", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2572", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2573", "domain": "socialnetwork"}
{"query": "number of gender", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.gender) (string !type))))", "qid": "socialnetwork_train_2574", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2575", "domain": "socialnetwork"}
{"query": "person that is logged in and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2576", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2577", "domain": "socialnetwork"}
{"query": "job title of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_2578", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2579", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2580", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2581", "domain": "socialnetwork"}
{"query": "gender that is gender of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2582", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2583", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2584", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2585", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2586", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2587", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2588", "domain": "socialnetwork"}
{"query": "end date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_2589", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2590", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2591", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2592", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2593", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2594", "domain": "socialnetwork"}
{"query": "person whose height is smaller than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2595", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2596", "domain": "socialnetwork"}
{"query": "person whose gender is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.getProperty en.person.alice (string gender))))", "qid": "socialnetwork_train_2597", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2598", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2599", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2600", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2601", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2602", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2603", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2604", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2605", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2606", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2607", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2608", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2609", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2610", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2611", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2612", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2613", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2614", "domain": "socialnetwork"}
{"query": "person whose gender is gender that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2615", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2616", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2617", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "qid": "socialnetwork_train_2618", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2619", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2620", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2621", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2622", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2623", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2624", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2625", "domain": "socialnetwork"}
{"query": "person whose birthdate is start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_2626", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2627", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2628", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2629", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2630", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2631", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2632", "domain": "socialnetwork"}
{"query": "person that is friends with person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2633", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2634", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2635", "domain": "socialnetwork"}
{"query": "person that is friends with at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2636", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2637", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2638", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2639", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2640", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2641", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2642", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2643", "domain": "socialnetwork"}
{"query": "computer science or history", "dcs": "(call SW.listValue (call SW.concat en.field.computer_science en.field.history))", "qid": "socialnetwork_train_2644", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2645", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2646", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2647", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2648", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2649", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2650", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2651", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2652", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2653", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2654", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2655", "domain": "socialnetwork"}
{"query": "city that is birthplace of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string max) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2656", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2657", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2658", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2659", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2660", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2661", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2662", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2663", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2664", "domain": "socialnetwork"}
{"query": "gender that is gender of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2665", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2666", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_2667", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2668", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2669", "domain": "socialnetwork"}
{"query": "student whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2670", "domain": "socialnetwork"}
{"query": "employee whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2671", "domain": "socialnetwork"}
{"query": "person whose birthplace is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2672", "domain": "socialnetwork"}
{"query": "number of job title", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.job_title) (string !type))))", "qid": "socialnetwork_train_2673", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2674", "domain": "socialnetwork"}
{"query": "birthplace of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2675", "domain": "socialnetwork"}
{"query": "person whose height is at least height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2676", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2677", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2678", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2679", "domain": "socialnetwork"}
{"query": "male or female", "dcs": "(call SW.listValue (call SW.concat en.gender.male en.gender.female))", "qid": "socialnetwork_train_2680", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2681", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2682", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2683", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2684", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2685", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2686", "domain": "socialnetwork"}
{"query": "student whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2687", "domain": "socialnetwork"}
{"query": "start date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2688", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2689", "domain": "socialnetwork"}
{"query": "person whose gender is male and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2690", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2691", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2692", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2693", "domain": "socialnetwork"}
{"query": "brown university or ucla", "dcs": "(call SW.listValue (call SW.concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_2694", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2695", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2696", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2697", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2698", "domain": "socialnetwork"}
{"query": "person whose height is at most 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2699", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2700", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2701", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2702", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2703", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2704", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2705", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string max) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2706", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2707", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2708", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2709", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2710", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2711", "domain": "socialnetwork"}
{"query": "person that person whose height is 180 cm is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2712", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2713", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2714", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2715", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2716", "domain": "socialnetwork"}
{"query": "person whose birthplace is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2717", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2718", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_2719", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2720", "domain": "socialnetwork"}
{"query": "employee that has less than two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2721", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2722", "domain": "socialnetwork"}
{"query": "field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_2723", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2724", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2725", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2726", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2727", "domain": "socialnetwork"}
{"query": "employee that has less than two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2728", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2729", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2730", "domain": "socialnetwork"}
{"query": "number of field", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.field) (string !type))))", "qid": "socialnetwork_train_2731", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2732", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2733", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2734", "domain": "socialnetwork"}
{"query": "field of study of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_2735", "domain": "socialnetwork"}
{"query": "start date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2736", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2737", "domain": "socialnetwork"}
{"query": "gender that is gender of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2738", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2739", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2740", "domain": "socialnetwork"}
{"query": "person whose gender is not male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_2741", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2742", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2743", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2744", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2745", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2746", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2747", "domain": "socialnetwork"}
{"query": "person whose height is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2748", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2749", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2750", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2751", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2752", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2753", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2754", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2755", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2756", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2757", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2758", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2759", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2760", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2761", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2762", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2763", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2764", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2765", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2766", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2767", "domain": "socialnetwork"}
{"query": "person whose height is at least 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2768", "domain": "socialnetwork"}
{"query": "job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2769", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2770", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2771", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2772", "domain": "socialnetwork"}
{"query": "person that less than two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2773", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2774", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_2775", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2776", "domain": "socialnetwork"}
{"query": "student that has at most two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2777", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2778", "domain": "socialnetwork"}
{"query": "gender that is gender of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string max) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2779", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2780", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2781", "domain": "socialnetwork"}
{"query": "end date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2782", "domain": "socialnetwork"}
{"query": "person whose height is at most 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2783", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2784", "domain": "socialnetwork"}
{"query": "person whose height is at most 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2785", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2786", "domain": "socialnetwork"}
{"query": "person whose relationship status is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2787", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2788", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_2789", "domain": "socialnetwork"}
{"query": "person that is friends with alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2790", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2791", "domain": "socialnetwork"}
{"query": "person that person that alice is friends with is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2792", "domain": "socialnetwork"}
{"query": "person whose birthdate is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2793", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2794", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2795", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2796", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2797", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2798", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2799", "domain": "socialnetwork"}
{"query": "person whose height is at most 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2800", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2801", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2802", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2803", "domain": "socialnetwork"}
{"query": "student whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2804", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2805", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2806", "domain": "socialnetwork"}
{"query": "university of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_train_2807", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2808", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2809", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2810", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2811", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2812", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2813", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2814", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2815", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2816", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2817", "domain": "socialnetwork"}
{"query": "person that has more than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2818", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2819", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2820", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2821", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2822", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2823", "domain": "socialnetwork"}
{"query": "end date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2824", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2825", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2826", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2827", "domain": "socialnetwork"}
{"query": "student whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2828", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2829", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2830", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2831", "domain": "socialnetwork"}
{"query": "person that has more than two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2832", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2833", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2834", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2835", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2836", "domain": "socialnetwork"}
{"query": "person whose gender is male or female", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_2837", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2838", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2839", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2840", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2841", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2842", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2843", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2844", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2845", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2846", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2847", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2848", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2849", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2850", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2851", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2852", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2853", "domain": "socialnetwork"}
{"query": "start date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2854", "domain": "socialnetwork"}
{"query": "person that has at least two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_2855", "domain": "socialnetwork"}
{"query": "gender that is gender of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string min) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2856", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2857", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2858", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2859", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2860", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2861", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2862", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2863", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2864", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2865", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2866", "domain": "socialnetwork"}
{"query": "person that is friends with person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2867", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2868", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2869", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2870", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2871", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2872", "domain": "socialnetwork"}
{"query": "start date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2873", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2874", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2875", "domain": "socialnetwork"}
{"query": "person whose height is not 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_2876", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2877", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2878", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2879", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2880", "domain": "socialnetwork"}
{"query": "end date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_2881", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2882", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2883", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2884", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2885", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2886", "domain": "socialnetwork"}
{"query": "person that is friends with less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2887", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2888", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2889", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2890", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2891", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2892", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2893", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2894", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2895", "domain": "socialnetwork"}
{"query": "person that has two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_2896", "domain": "socialnetwork"}
{"query": "person that has the largest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_train_2897", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2898", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2899", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2900", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2901", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2902", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2903", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2904", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2905", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2906", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2907", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2908", "domain": "socialnetwork"}
{"query": "person whose height is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2909", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2910", "domain": "socialnetwork"}
{"query": "person that has more than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2911", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2912", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2913", "domain": "socialnetwork"}
{"query": "person that has more than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2914", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2915", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2916", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2917", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2918", "domain": "socialnetwork"}
{"query": "student whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2919", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2920", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2921", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2922", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2923", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2924", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2925", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2926", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2927", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2928", "domain": "socialnetwork"}
{"query": "city that is not birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2929", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2930", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2931", "domain": "socialnetwork"}
{"query": "start date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2932", "domain": "socialnetwork"}
{"query": "person that has two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_2933", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2934", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2935", "domain": "socialnetwork"}
{"query": "relationship status of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string relationship_status)))", "qid": "socialnetwork_train_2936", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2937", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2938", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2939", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2940", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2941", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2942", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2943", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2944", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2945", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2946", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2947", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2948", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2949", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2950", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2951", "domain": "socialnetwork"}
{"query": "relationship status that is not relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2952", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2953", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2954", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2955", "domain": "socialnetwork"}
{"query": "person that is logged in and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2956", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2957", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2958", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2959", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2960", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2961", "domain": "socialnetwork"}
{"query": "end date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2962", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2963", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2964", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2965", "domain": "socialnetwork"}
{"query": "employer of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2966", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2967", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2968", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2969", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2970", "domain": "socialnetwork"}
{"query": "job title of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_2971", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2972", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2973", "domain": "socialnetwork"}
{"query": "student whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2974", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2975", "domain": "socialnetwork"}
{"query": "end date of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2976", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2977", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2978", "domain": "socialnetwork"}
{"query": "person that at most two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2979", "domain": "socialnetwork"}
{"query": "number of university", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.university) (string !type))))", "qid": "socialnetwork_train_2980", "domain": "socialnetwork"}
{"query": "end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_2981", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2982", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2983", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2984", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2985", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2986", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_2987", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2988", "domain": "socialnetwork"}
{"query": "employee whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2989", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_2990", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2991", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2992", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2993", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2994", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2995", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2996", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_2997", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2998", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2999", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3000", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3001", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3002", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3003", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3004", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3005", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3006", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_3007", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3008", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3009", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3010", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3011", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3012", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3013", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3014", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3015", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3016", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3017", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3018", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3019", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3020", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3021", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3022", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3023", "domain": "socialnetwork"}
{"query": "person that has two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_3024", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3025", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3026", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3027", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3028", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3029", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3030", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3031", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3032", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3033", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3034", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3035", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3036", "domain": "socialnetwork"}
{"query": "end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_3037", "domain": "socialnetwork"}
{"query": "student that has at most two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3038", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3039", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3040", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3041", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3042", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3043", "domain": "socialnetwork"}
{"query": "person that is friends with the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string friend) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3044", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3045", "domain": "socialnetwork"}
{"query": "person that is logged in and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3046", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3047", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3048", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3049", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3050", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3051", "domain": "socialnetwork"}
{"query": "person whose birthplace is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3052", "domain": "socialnetwork"}
{"query": "person that has the smallest birthdate", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_3053", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3054", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3055", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3056", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3057", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3058", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_3059", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3060", "domain": "socialnetwork"}
{"query": "person that is friends with person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3061", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3062", "domain": "socialnetwork"}
{"query": "number of university", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.university) (string !type))))", "qid": "socialnetwork_train_3063", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_3064", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3065", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3066", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3067", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3068", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3069", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3070", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3071", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3072", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3073", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3074", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3075", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3076", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3077", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3078", "domain": "socialnetwork"}
{"query": "student that has at most two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3079", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3080", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3081", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3082", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3083", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3084", "domain": "socialnetwork"}
{"query": "person that has the least number of relationship status", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_3085", "domain": "socialnetwork"}
{"query": "field of study of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_3086", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3087", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3088", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3089", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3090", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3091", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3092", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3093", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3094", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3095", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3096", "domain": "socialnetwork"}
{"query": "person that not is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_3097", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_3098", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3099", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3100", "domain": "socialnetwork"}
{"query": "new york or beijing", "dcs": "(call SW.listValue (call SW.concat en.city.new_york en.city.bejing))", "qid": "socialnetwork_train_3101", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3102", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3103", "domain": "socialnetwork"}
{"query": "person whose height is at most height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_3104", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_3105", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3106", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3107", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3108", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3109", "domain": "socialnetwork"}
{"query": "person that employee whose job title is not software engineer is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3110", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3111", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3112", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3113", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3114", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3115", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3116", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3117", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3118", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3119", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3120", "domain": "socialnetwork"}
{"query": "person whose relationship status is single or married", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_3121", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3122", "domain": "socialnetwork"}
{"query": "student that has at most two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3123", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3124", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3125", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3126", "domain": "socialnetwork"}
{"query": "person whose birthdate is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3127", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3128", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3129", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3130", "domain": "socialnetwork"}
{"query": "city that is not birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3131", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3132", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3133", "domain": "socialnetwork"}
{"query": "number of field", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.field) (string !type))))", "qid": "socialnetwork_train_3134", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3135", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3136", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3137", "domain": "socialnetwork"}
{"query": "person that more than two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3138", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3139", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3140", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3141", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3142", "domain": "socialnetwork"}
{"query": "university of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_3143", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3144", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3145", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of alice and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) en.person.alice) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_3146", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3147", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3148", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3149", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3150", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3151", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3152", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3153", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3154", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3155", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3156", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3157", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3158", "domain": "socialnetwork"}
{"query": "person that has two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_3159", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3160", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3161", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3162", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3163", "domain": "socialnetwork"}
{"query": "person that is logged in and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3164", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3165", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3166", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3167", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3168", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3169", "domain": "socialnetwork"}
{"query": "end date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3170", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3171", "domain": "socialnetwork"}
{"query": "number of university", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.university) (string !type))))", "qid": "socialnetwork_train_3172", "domain": "socialnetwork"}
{"query": "person that has at least two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_3173", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3174", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3175", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3176", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3177", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3178", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3179", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3180", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3181", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3182", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3183", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3184", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3185", "domain": "socialnetwork"}
{"query": "employer of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_3186", "domain": "socialnetwork"}
{"query": "person whose birthdate is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_3187", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3188", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3189", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3190", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_3191", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3192", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3193", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3194", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3195", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3196", "domain": "socialnetwork"}
{"query": "person that is logged in and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3197", "domain": "socialnetwork"}
{"query": "gender that is gender of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3198", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3199", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3200", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3201", "domain": "socialnetwork"}
{"query": "job title of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3202", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3203", "domain": "socialnetwork"}
{"query": "gender that is gender of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string min) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3204", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3205", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3206", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3207", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3208", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3209", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3210", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3211", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3212", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3213", "domain": "socialnetwork"}
{"query": "end date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3214", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_3215", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3216", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3217", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3218", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3219", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3220", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3221", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3222", "domain": "socialnetwork"}
{"query": "number of gender", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.gender) (string !type))))", "qid": "socialnetwork_train_3223", "domain": "socialnetwork"}
{"query": "person that has at most two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_3224", "domain": "socialnetwork"}
{"query": "person whose relationship status is not single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_3225", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3226", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3227", "domain": "socialnetwork"}
{"query": "start date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_3228", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3229", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3230", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_3231", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3232", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_3233", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3234", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3235", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3236", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3237", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_train_3238", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3239", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3240", "domain": "socialnetwork"}
{"query": "person that has the most number of relationship status", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string relationship_status)))", "qid": "socialnetwork_train_3241", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3242", "domain": "socialnetwork"}
{"query": "job title of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3243", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3244", "domain": "socialnetwork"}
{"query": "person whose birthdate is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3245", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3246", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3247", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3248", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_3249", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3250", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3251", "domain": "socialnetwork"}
{"query": "person whose height is larger than 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3252", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3253", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3254", "domain": "socialnetwork"}
{"query": "person whose height is smaller than 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3255", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3256", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3257", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3258", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3259", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3260", "domain": "socialnetwork"}
{"query": "person that is friends with person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3261", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3262", "domain": "socialnetwork"}
{"query": "person that is logged in and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3263", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3264", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3265", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3266", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3267", "domain": "socialnetwork"}
{"query": "student whose field of study is field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3268", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3269", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3270", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_3271", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3272", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3273", "domain": "socialnetwork"}
{"query": "gender that is gender of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string min) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3274", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3275", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3276", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3277", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_3278", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3279", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3280", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3281", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3282", "domain": "socialnetwork"}
{"query": "student whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3283", "domain": "socialnetwork"}
{"query": "start date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_3284", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_3285", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3286", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3287", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3288", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3289", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3290", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3291", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3292", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3293", "domain": "socialnetwork"}
{"query": "person whose height is at least 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3294", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3295", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3296", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3297", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3298", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3299", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3300", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3301", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3302", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3303", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3304", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3305", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3306", "domain": "socialnetwork"}
{"query": "person that is friends with person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3307", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3308", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3309", "domain": "socialnetwork"}
{"query": "city that is birthplace of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string max) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3310", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3311", "domain": "socialnetwork"}
{"query": "person that is friends with person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3312", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3313", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3314", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3315", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3316", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3317", "domain": "socialnetwork"}
{"query": "person that is friends with person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3318", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3319", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3320", "domain": "socialnetwork"}
{"query": "end date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3321", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3322", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3323", "domain": "socialnetwork"}
{"query": "employee that has less than two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3324", "domain": "socialnetwork"}
{"query": "field of study of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_3325", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3326", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3327", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3328", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3329", "domain": "socialnetwork"}
{"query": "city that is birthplace of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string min) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3330", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3331", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3332", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_3333", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3334", "domain": "socialnetwork"}
{"query": "brown university or ucla", "dcs": "(call SW.listValue (call SW.concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_3335", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3336", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3337", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3338", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3339", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3340", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3341", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3342", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3343", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3344", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3345", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3346", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3347", "domain": "socialnetwork"}
{"query": "student that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3348", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3349", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3350", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3351", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3352", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3353", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3354", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3355", "domain": "socialnetwork"}
{"query": "university of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))", "qid": "socialnetwork_train_3356", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3357", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3358", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3359", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3360", "domain": "socialnetwork"}
{"query": "birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_3361", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3362", "domain": "socialnetwork"}
{"query": "height of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_3363", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3364", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3365", "domain": "socialnetwork"}
{"query": "person that is logged in and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3366", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3367", "domain": "socialnetwork"}
{"query": "person that has more than two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_3368", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3369", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3370", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3371", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3372", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3373", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3374", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3375", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3376", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3377", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3378", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3379", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3380", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3381", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3382", "domain": "socialnetwork"}
{"query": "end date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_3383", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3384", "domain": "socialnetwork"}
{"query": "field of study of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_3385", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3386", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3387", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3388", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3389", "domain": "socialnetwork"}
{"query": "end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_3390", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3391", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3392", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3393", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3394", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3395", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_train_3396", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3397", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3398", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3399", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3400", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3401", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3402", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3403", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3404", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3405", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3406", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3407", "domain": "socialnetwork"}
{"query": "software engineer or program manager", "dcs": "(call SW.listValue (call SW.concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_3408", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3409", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3410", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3411", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3412", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string min) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3413", "domain": "socialnetwork"}
{"query": "gender that is gender of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3414", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3415", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3416", "domain": "socialnetwork"}
{"query": "person whose height is smaller than 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3417", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3418", "domain": "socialnetwork"}
{"query": "end date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3419", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3420", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3421", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3422", "domain": "socialnetwork"}
{"query": "field of study of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_3423", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3424", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3425", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3426", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3427", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3428", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3429", "domain": "socialnetwork"}
{"query": "person whose height is at most 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3430", "domain": "socialnetwork"}
{"query": "start date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_3431", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3432", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3433", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_3434", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3435", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3436", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3437", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3438", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3439", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3440", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3441", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3442", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_3443", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3444", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3445", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3446", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3447", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3448", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3449", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3450", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3451", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3452", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3453", "domain": "socialnetwork"}
{"query": "person that is friends with less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3454", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose job title is software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_3455", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3456", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3457", "domain": "socialnetwork"}
{"query": "person whose height is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3458", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3459", "domain": "socialnetwork"}
{"query": "person whose birthdate is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3460", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3461", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3462", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3463", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3464", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3465", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3466", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3467", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3468", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3469", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3470", "domain": "socialnetwork"}
{"query": "person that person that alice is friends with is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3471", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3472", "domain": "socialnetwork"}
{"query": "end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_3473", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3474", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3475", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3476", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3477", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3478", "domain": "socialnetwork"}
{"query": "person whose relationship status is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3479", "domain": "socialnetwork"}
{"query": "start date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_3480", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3481", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3482", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3483", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3484", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3485", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3486", "domain": "socialnetwork"}
{"query": "job title of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3487", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3488", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3489", "domain": "socialnetwork"}
{"query": "gender that is gender of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3490", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3491", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3492", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3493", "domain": "socialnetwork"}
{"query": "person that has the largest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_train_3494", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_3495", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3496", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3497", "domain": "socialnetwork"}
{"query": "person that has more than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_3498", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose field of study is computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_3499", "domain": "socialnetwork"}
{"query": "person whose height is smaller than 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3500", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3501", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3502", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3503", "domain": "socialnetwork"}
{"query": "job title of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3504", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_3505", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3506", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3507", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3508", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3509", "domain": "socialnetwork"}
{"query": "end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_3510", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3511", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_3512", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3513", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_train_3514", "domain": "socialnetwork"}
{"query": "average height of person", "dcs": "(call SW.listValue (call SW.aggregate (string avg) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_3515", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3516", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3517", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3518", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_3519", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3520", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_3521", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3522", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3523", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3524", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3525", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3526", "domain": "socialnetwork"}
{"query": "person whose relationship status is relationship status that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3527", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3528", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3529", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3530", "domain": "socialnetwork"}
{"query": "person that is friends with person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3531", "domain": "socialnetwork"}
{"query": "person that student whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3532", "domain": "socialnetwork"}
{"query": "person that at least two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_train_3533", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_train_3534", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_0", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_1", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_2", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_3", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_4", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_5", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_6", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_7", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_8", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_9", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_10", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_11", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_12", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_13", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_14", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_15", "domain": "socialnetwork"}
{"query": "student whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_16", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_17", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_18", "domain": "socialnetwork"}
{"query": "city that is birthplace of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string max) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_19", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_20", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_21", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_22", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_23", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_24", "domain": "socialnetwork"}
{"query": "student whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_25", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_26", "domain": "socialnetwork"}
{"query": "end date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_test_27", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_28", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_29", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_30", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_31", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_32", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_33", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_34", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_35", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_36", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_37", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_38", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_39", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_40", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_41", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_42", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_43", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_44", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_45", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_46", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_47", "domain": "socialnetwork"}
{"query": "person that has less than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_test_48", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_49", "domain": "socialnetwork"}
{"query": "birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_test_50", "domain": "socialnetwork"}
{"query": "person whose birthdate is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_test_51", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_52", "domain": "socialnetwork"}
{"query": "start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_test_53", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_54", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_55", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_56", "domain": "socialnetwork"}
{"query": "birthplace of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_test_57", "domain": "socialnetwork"}
{"query": "person that the least number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_58", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_59", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_60", "domain": "socialnetwork"}
{"query": "gender that is gender of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_61", "domain": "socialnetwork"}
{"query": "student whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_62", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_63", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_64", "domain": "socialnetwork"}
{"query": "person that is logged in and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_65", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_66", "domain": "socialnetwork"}
{"query": "city that is birthplace of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_67", "domain": "socialnetwork"}
{"query": "student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_68", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_69", "domain": "socialnetwork"}
{"query": "city that is birthplace of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_70", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_71", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_72", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_73", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_74", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_75", "domain": "socialnetwork"}
{"query": "gender that is gender of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (string max) (call SW.reverse (string gender)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_76", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_77", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_78", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_79", "domain": "socialnetwork"}
{"query": "student whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_80", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_81", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_82", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the most number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string max) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_83", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_84", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_85", "domain": "socialnetwork"}
{"query": "person that student whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_86", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_87", "domain": "socialnetwork"}
{"query": "student that has less than two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_88", "domain": "socialnetwork"}
{"query": "student that has the most number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_89", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_90", "domain": "socialnetwork"}
{"query": "employer of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_test_91", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_92", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_93", "domain": "socialnetwork"}
{"query": "person that the most number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_94", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_95", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_96", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_97", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_98", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_99", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_100", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_101", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_102", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_103", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_104", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_105", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_106", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_107", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_108", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_109", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_110", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_111", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_112", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_113", "domain": "socialnetwork"}
{"query": "person that has the smallest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_test_114", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_115", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_116", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_117", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_118", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_119", "domain": "socialnetwork"}
{"query": "person that has at least two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_test_120", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_121", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_122", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_123", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_124", "domain": "socialnetwork"}
{"query": "height of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string height)))", "qid": "socialnetwork_test_125", "domain": "socialnetwork"}
{"query": "person that is logged in and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_126", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_127", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_128", "domain": "socialnetwork"}
{"query": "student whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_129", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_130", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_131", "domain": "socialnetwork"}
{"query": "student that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_132", "domain": "socialnetwork"}
{"query": "employee that has the smallest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_133", "domain": "socialnetwork"}
{"query": "student whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_134", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_135", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_136", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_137", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_138", "domain": "socialnetwork"}
{"query": "job title of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_test_139", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_140", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_141", "domain": "socialnetwork"}
{"query": "person whose height is smaller than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_142", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_143", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_144", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_test_145", "domain": "socialnetwork"}
{"query": "person that has two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_test_146", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_147", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_148", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_149", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_150", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_151", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_152", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_153", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_154", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_155", "domain": "socialnetwork"}
{"query": "employee whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_156", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_test_157", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_158", "domain": "socialnetwork"}
{"query": "student that has less than two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_159", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_160", "domain": "socialnetwork"}
{"query": "gender of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string gender)))", "qid": "socialnetwork_test_161", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_test_162", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_163", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_164", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_165", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_166", "domain": "socialnetwork"}
{"query": "employee that has the largest start date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_167", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_168", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_169", "domain": "socialnetwork"}
{"query": "person that employee whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_170", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_171", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_172", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_173", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_174", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_175", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_176", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_177", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_178", "domain": "socialnetwork"}
{"query": "birthplace of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_test_179", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_180", "domain": "socialnetwork"}
{"query": "employer of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_test_181", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_182", "domain": "socialnetwork"}
{"query": "person that alice is friends with and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_183", "domain": "socialnetwork"}
{"query": "person whose height is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_184", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_185", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_186", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_187", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_188", "domain": "socialnetwork"}
{"query": "student whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_189", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_190", "domain": "socialnetwork"}
{"query": "employee whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_191", "domain": "socialnetwork"}
{"query": "person whose birthplace is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_192", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_193", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_194", "domain": "socialnetwork"}
{"query": "person whose height is larger than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_195", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_196", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_197", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_198", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_199", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_200", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_201", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_202", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_203", "domain": "socialnetwork"}
{"query": "person that has at least two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_test_204", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_205", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_test_206", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_207", "domain": "socialnetwork"}
{"query": "person that has less than two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_test_208", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_209", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_210", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_211", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_212", "domain": "socialnetwork"}
{"query": "end date of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_test_213", "domain": "socialnetwork"}
{"query": "student whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_214", "domain": "socialnetwork"}
{"query": "student whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_215", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_216", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_217", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_218", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_219", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_220", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_221", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_222", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_223", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_224", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_225", "domain": "socialnetwork"}
{"query": "start date of employee alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_test_226", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_227", "domain": "socialnetwork"}
{"query": "person that is friends with person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_228", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_229", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_230", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_231", "domain": "socialnetwork"}
{"query": "city that is birthplace of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_232", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_233", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_234", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_235", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_236", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_237", "domain": "socialnetwork"}
{"query": "person that is friends with person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_238", "domain": "socialnetwork"}
{"query": "person whose height is larger than 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_239", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_240", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_241", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_242", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_243", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_test_244", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_245", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_246", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_247", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_248", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_249", "domain": "socialnetwork"}
{"query": "student that has at most two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_250", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_251", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_test_252", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_253", "domain": "socialnetwork"}
{"query": "person that person that is logged in is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_254", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_255", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_256", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_257", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_258", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_259", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_260", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_261", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_262", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_263", "domain": "socialnetwork"}
{"query": "student whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_264", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_265", "domain": "socialnetwork"}
{"query": "person that is friends with person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_266", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_267", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_268", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_269", "domain": "socialnetwork"}
{"query": "number of company", "dcs": "(call SW.listValue (call .size (call SW.getProperty (call SW.singleton en.company) (string !type))))", "qid": "socialnetwork_test_270", "domain": "socialnetwork"}
{"query": "student whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_271", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_272", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_273", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_274", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_275", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_276", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_277", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_278", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_279", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_280", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_281", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_282", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_283", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_284", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_test_285", "domain": "socialnetwork"}
{"query": "person that is friends with the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (string friend) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_286", "domain": "socialnetwork"}
{"query": "person that not is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_test_287", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_288", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_289", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_290", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_291", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_292", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_293", "domain": "socialnetwork"}
{"query": "gender that is gender of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_294", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_295", "domain": "socialnetwork"}
{"query": "person that person whose height is 180 cm is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_296", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_297", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_298", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_299", "domain": "socialnetwork"}
{"query": "person that is friends with alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_300", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_301", "domain": "socialnetwork"}
{"query": "student whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_302", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_303", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_304", "domain": "socialnetwork"}
{"query": "person whose height is smaller than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_305", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_306", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_307", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_308", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_309", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_310", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_311", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_312", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_313", "domain": "socialnetwork"}
{"query": "student whose start date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_314", "domain": "socialnetwork"}
{"query": "student whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_315", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_316", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_317", "domain": "socialnetwork"}
{"query": "person whose height is at least height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_318", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_test_319", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_320", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_321", "domain": "socialnetwork"}
{"query": "student whose university is not brown university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_322", "domain": "socialnetwork"}
{"query": "person that employee whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_323", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_324", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_325", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_326", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_327", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_328", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_329", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_330", "domain": "socialnetwork"}
{"query": "university of student alice whose field of study is computer science", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_test_331", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_332", "domain": "socialnetwork"}
{"query": "student whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_333", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_334", "domain": "socialnetwork"}
{"query": "gender that is not gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_335", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_336", "domain": "socialnetwork"}
{"query": "employee that has at most two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_337", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_338", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_339", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_340", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_341", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_342", "domain": "socialnetwork"}
{"query": "gender that is gender of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_343", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_344", "domain": "socialnetwork"}
{"query": "gender that is gender of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_345", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_346", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_347", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_348", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_349", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_test_350", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_351", "domain": "socialnetwork"}
{"query": "person that is friends with alice and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_352", "domain": "socialnetwork"}
{"query": "student whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_353", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_354", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york or beijing", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_test_355", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_356", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_357", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_358", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_359", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_360", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_361", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_362", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_363", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_364", "domain": "socialnetwork"}
{"query": "person that person whose gender is male is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_365", "domain": "socialnetwork"}
{"query": "student whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_366", "domain": "socialnetwork"}
{"query": "employee whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_367", "domain": "socialnetwork"}
{"query": "person that has two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_test_368", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_369", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_370", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_371", "domain": "socialnetwork"}
{"query": "city that is not birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_test_372", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_373", "domain": "socialnetwork"}
{"query": "university of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_test_374", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_375", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_376", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_377", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_378", "domain": "socialnetwork"}
{"query": "person that has at least two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_test_379", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_380", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_381", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_382", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_383", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_384", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_385", "domain": "socialnetwork"}
{"query": "start date of student alice whose university is brown university", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_test_386", "domain": "socialnetwork"}
{"query": "employee whose job title is job title of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_387", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_388", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_389", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_390", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_test_391", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_test_392", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_393", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_394", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_395", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_396", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_397", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_398", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_399", "domain": "socialnetwork"}
{"query": "person that student whose end date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_400", "domain": "socialnetwork"}
{"query": "city that is birthplace of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_401", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_402", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_403", "domain": "socialnetwork"}
{"query": "person that student whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_404", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_405", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_406", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_407", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_408", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_409", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_410", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_411", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_412", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_413", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_414", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_415", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_416", "domain": "socialnetwork"}
{"query": "start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_417", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_418", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_419", "domain": "socialnetwork"}
{"query": "person that student whose end date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_420", "domain": "socialnetwork"}
{"query": "person that has less than two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_test_421", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_422", "domain": "socialnetwork"}
{"query": "person that is logged in and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_423", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_424", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_425", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_426", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_427", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_428", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_429", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_430", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_431", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_432", "domain": "socialnetwork"}
{"query": "student whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_433", "domain": "socialnetwork"}
{"query": "person that is friends with person whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_434", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_435", "domain": "socialnetwork"}
{"query": "person that alice or bob is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_436", "domain": "socialnetwork"}
{"query": "person that is friends with more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_437", "domain": "socialnetwork"}
{"query": "person that person that is friends with alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_438", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_439", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_440", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_441", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_442", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_443", "domain": "socialnetwork"}
{"query": "city that is birthplace of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_444", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_445", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_446", "domain": "socialnetwork"}
{"query": "person whose gender is male and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_447", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_448", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_449", "domain": "socialnetwork"}
{"query": "person whose height is larger than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_450", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_451", "domain": "socialnetwork"}
{"query": "start date of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_test_452", "domain": "socialnetwork"}
{"query": "student whose end date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_453", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_454", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_455", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_456", "domain": "socialnetwork"}
{"query": "person that at least two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_457", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_458", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_459", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_460", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_461", "domain": "socialnetwork"}
{"query": "end date of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_test_462", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_463", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_464", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_465", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_466", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_467", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_test_468", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_469", "domain": "socialnetwork"}
{"query": "start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_470", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_471", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_472", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of alice or bob", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_473", "domain": "socialnetwork"}
{"query": "employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_474", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_475", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_476", "domain": "socialnetwork"}
{"query": "student whose end date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_477", "domain": "socialnetwork"}
{"query": "person that has more than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_test_478", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_479", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_480", "domain": "socialnetwork"}
{"query": "person that is logged in and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_481", "domain": "socialnetwork"}
{"query": "person whose birthplace is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) (call SW.getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_test_482", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_483", "domain": "socialnetwork"}
{"query": "person that has more than two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_test_484", "domain": "socialnetwork"}
{"query": "gender that is not gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_485", "domain": "socialnetwork"}
{"query": "student that has the least number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_486", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_487", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_488", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_489", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_490", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_491", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_492", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_493", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_494", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_495", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_496", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_497", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_498", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_499", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_500", "domain": "socialnetwork"}
{"query": "person that at least two person is friends with", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_501", "domain": "socialnetwork"}
{"query": "person whose gender is male and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_test_502", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_503", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_504", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_505", "domain": "socialnetwork"}
{"query": "employee whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_506", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_507", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_508", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose university is brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_test_509", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_510", "domain": "socialnetwork"}
{"query": "student whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_511", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_512", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_513", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_514", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_515", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_516", "domain": "socialnetwork"}
{"query": "person whose height is larger than 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_test_517", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_518", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_519", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_520", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_521", "domain": "socialnetwork"}
{"query": "person that person that is friends with alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_522", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_523", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_524", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_525", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_526", "domain": "socialnetwork"}
{"query": "field of study of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_test_527", "domain": "socialnetwork"}
{"query": "employee that has the least number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_528", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_529", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_530", "domain": "socialnetwork"}
{"query": "student that has the least number of university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string university))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_531", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_532", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_533", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_534", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_535", "domain": "socialnetwork"}
{"query": "employer of employee alice whose job title is software engineer", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_test_536", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_test_537", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_538", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_539", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_540", "domain": "socialnetwork"}
{"query": "person whose birthdate is end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_test_541", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (string min) (call SW.reverse (string relationship_status)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_542", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_543", "domain": "socialnetwork"}
{"query": "brown university or ucla", "dcs": "(call SW.listValue (call SW.concat en.university.brown en.university.ucla))", "qid": "socialnetwork_test_544", "domain": "socialnetwork"}
{"query": "person whose height is not 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_test_545", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_546", "domain": "socialnetwork"}
{"query": "employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_547", "domain": "socialnetwork"}
{"query": "person that has at most two gender", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "qid": "socialnetwork_test_548", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_549", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_550", "domain": "socialnetwork"}
{"query": "employee whose start date is end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_551", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_552", "domain": "socialnetwork"}
{"query": "person whose birthdate is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_test_553", "domain": "socialnetwork"}
{"query": "employee whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_554", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_555", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_556", "domain": "socialnetwork"}
{"query": "person that has at most two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_test_557", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_558", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_559", "domain": "socialnetwork"}
{"query": "person that not is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_test_560", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_561", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_562", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_563", "domain": "socialnetwork"}
{"query": "employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))", "qid": "socialnetwork_test_564", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_565", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_566", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_567", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_568", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_569", "domain": "socialnetwork"}
{"query": "gender that is gender of at least two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string >=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_570", "domain": "socialnetwork"}
{"query": "city that is birthplace of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string min) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_571", "domain": "socialnetwork"}
{"query": "single or married", "dcs": "(call SW.listValue (call SW.concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_test_572", "domain": "socialnetwork"}
{"query": "person that has more than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_test_573", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_test_574", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_575", "domain": "socialnetwork"}
{"query": "student whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_576", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_577", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_578", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_579", "domain": "socialnetwork"}
{"query": "employee whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_580", "domain": "socialnetwork"}
{"query": "city that is birthplace of alice and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) en.person.alice) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_test_581", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_582", "domain": "socialnetwork"}
{"query": "person whose birthdate is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_test_583", "domain": "socialnetwork"}
{"query": "height of alice", "dcs": "(call SW.listValue (call SW.getProperty en.person.alice (string height)))", "qid": "socialnetwork_test_584", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_585", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_586", "domain": "socialnetwork"}
{"query": "person whose birthplace is not new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_test_587", "domain": "socialnetwork"}
{"query": "employee whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_588", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_589", "domain": "socialnetwork"}
{"query": "gender that is gender of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_590", "domain": "socialnetwork"}
{"query": "person that has more than two birthplace", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_test_591", "domain": "socialnetwork"}
{"query": "student that has less than two field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string field_of_study) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_592", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_593", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_594", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_595", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_596", "domain": "socialnetwork"}
{"query": "person that has the most number of birthplace", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (string birthplace)))", "qid": "socialnetwork_test_597", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_598", "domain": "socialnetwork"}
{"query": "person that is friends with student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_599", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_600", "domain": "socialnetwork"}
{"query": "end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_test_601", "domain": "socialnetwork"}
{"query": "person whose relationship status is not single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_test_602", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_603", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_604", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is relationship status of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_test_605", "domain": "socialnetwork"}
{"query": "person that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_test_606", "domain": "socialnetwork"}
{"query": "student whose university is brown university or ucla", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.concat en.university.brown en.university.ucla))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_607", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_608", "domain": "socialnetwork"}
{"query": "person that employee whose start date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_609", "domain": "socialnetwork"}
{"query": "employer of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_test_610", "domain": "socialnetwork"}
{"query": "person that is friends with at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_611", "domain": "socialnetwork"}
{"query": "employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_612", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_613", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_614", "domain": "socialnetwork"}
{"query": "student that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_615", "domain": "socialnetwork"}
{"query": "student whose end date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_616", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_617", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_618", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_619", "domain": "socialnetwork"}
{"query": "person whose gender is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.getProperty en.person.alice (string gender))))", "qid": "socialnetwork_test_620", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_621", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_622", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_623", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_624", "domain": "socialnetwork"}
{"query": "person that employee whose start date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_625", "domain": "socialnetwork"}
{"query": "person that student whose start date is at most 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_626", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_627", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_628", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_629", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_630", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_631", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_632", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_633", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_634", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_635", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_636", "domain": "socialnetwork"}
{"query": "person whose birthdate is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_test_637", "domain": "socialnetwork"}
{"query": "employee that has less than two job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string job_title) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_638", "domain": "socialnetwork"}
{"query": "person whose height is at least 180 cm or 200 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (call SW.concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_test_639", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_640", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_641", "domain": "socialnetwork"}
{"query": "employee whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_642", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_643", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_644", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_645", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_646", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_647", "domain": "socialnetwork"}
{"query": "student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_648", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of more than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string >) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_649", "domain": "socialnetwork"}
{"query": "person that is friends with two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_650", "domain": "socialnetwork"}
{"query": "end date of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_test_651", "domain": "socialnetwork"}
{"query": "person that student whose start date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_652", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_653", "domain": "socialnetwork"}
{"query": "employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_654", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_655", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_test_656", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_657", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose start date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_658", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_659", "domain": "socialnetwork"}
{"query": "employee whose end date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_660", "domain": "socialnetwork"}
{"query": "person whose height is larger than 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_661", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_662", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_663", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_664", "domain": "socialnetwork"}
{"query": "person whose birthdate is start date of student alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_test_665", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_666", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_667", "domain": "socialnetwork"}
{"query": "student that has less than two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_668", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_669", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_670", "domain": "socialnetwork"}
{"query": "gender that is not gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_671", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_672", "domain": "socialnetwork"}
{"query": "student whose end date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_673", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_674", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_675", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_676", "domain": "socialnetwork"}
{"query": "job title of employee alice whose employer is mckinsey", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_test_677", "domain": "socialnetwork"}
{"query": "person that is friends with person whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_678", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_679", "domain": "socialnetwork"}
{"query": "student that has the most number of field of study", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string field_of_study))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_680", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_681", "domain": "socialnetwork"}
{"query": "person whose height is not 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_test_682", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_683", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_684", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_test_685", "domain": "socialnetwork"}
{"query": "employee whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_686", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_687", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_688", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_689", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_690", "domain": "socialnetwork"}
{"query": "student whose start date is larger than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_691", "domain": "socialnetwork"}
{"query": "person whose birthplace is new york and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_692", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthplace of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_test_693", "domain": "socialnetwork"}
{"query": "total height of person", "dcs": "(call SW.listValue (call SW.aggregate (string sum) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_test_694", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_695", "domain": "socialnetwork"}
{"query": "person that student whose field of study is not computer science is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_696", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_697", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_698", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_699", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_700", "domain": "socialnetwork"}
{"query": "person that employee whose employer is not mckinsey is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_701", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_702", "domain": "socialnetwork"}
{"query": "person that the most number of person is friends with", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string max) (call SW.reverse (string friend)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_703", "domain": "socialnetwork"}
{"query": "student whose start date is larger than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_704", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_705", "domain": "socialnetwork"}
{"query": "person whose birthdate is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_test_706", "domain": "socialnetwork"}
{"query": "employee that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_707", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_708", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_709", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_710", "domain": "socialnetwork"}
{"query": "university that is university of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.university) (string !type)) (call SW.reverse (string university)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_711", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_712", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_713", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_714", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_715", "domain": "socialnetwork"}
{"query": "field that is field of study of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.field) (string !type)) (call SW.reverse (string field_of_study)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_716", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_717", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_718", "domain": "socialnetwork"}
{"query": "person that person whose relationship status is single is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_719", "domain": "socialnetwork"}
{"query": "employee whose end date is end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_720", "domain": "socialnetwork"}
{"query": "employee whose end date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_721", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_722", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_723", "domain": "socialnetwork"}
{"query": "person that has the smallest height", "dcs": "(call SW.listValue (call SW.superlative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string min) (call SW.ensureNumericProperty (string height))))", "qid": "socialnetwork_test_724", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_725", "domain": "socialnetwork"}
{"query": "student whose end date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_726", "domain": "socialnetwork"}
{"query": "employee whose start date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_727", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_728", "domain": "socialnetwork"}
{"query": "person whose birthdate is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_729", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_730", "domain": "socialnetwork"}
{"query": "city that is birthplace of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_731", "domain": "socialnetwork"}
{"query": "person whose height is larger than height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_732", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_733", "domain": "socialnetwork"}
{"query": "person that person that is friends with alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_734", "domain": "socialnetwork"}
{"query": "person that has more than two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_test_735", "domain": "socialnetwork"}
{"query": "person whose height is at most 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string <=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_736", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_737", "domain": "socialnetwork"}
{"query": "city that is birthplace of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_738", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_739", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is birthdate of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_test_740", "domain": "socialnetwork"}
{"query": "person whose gender is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_741", "domain": "socialnetwork"}
{"query": "student whose start date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_742", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_743", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_744", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_745", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_746", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_747", "domain": "socialnetwork"}
{"query": "person that is friends with student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_748", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_749", "domain": "socialnetwork"}
{"query": "student that has the largest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string max) (call SW.ensureNumericProperty (string education_end_date)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_750", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_751", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_752", "domain": "socialnetwork"}
{"query": "person that person whose birthplace is new york is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_753", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_754", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is gender of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call SW.reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_test_755", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_756", "domain": "socialnetwork"}
{"query": "employee whose end date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_757", "domain": "socialnetwork"}
{"query": "employee whose end date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_758", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_759", "domain": "socialnetwork"}
{"query": "person that is friends with student whose start date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_760", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_761", "domain": "socialnetwork"}
{"query": "employee whose start date is at least end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_762", "domain": "socialnetwork"}
{"query": "total height of person", "dcs": "(call SW.listValue (call SW.aggregate (string sum) (call SW.getProperty (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_test_763", "domain": "socialnetwork"}
{"query": "student whose start date is at most end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_764", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_765", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_766", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_767", "domain": "socialnetwork"}
{"query": "student whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_768", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_769", "domain": "socialnetwork"}
{"query": "employee that has the most number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_770", "domain": "socialnetwork"}
{"query": "employee that has the least number of job title", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string min) (string job_title))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_771", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_772", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_773", "domain": "socialnetwork"}
{"query": "student whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_774", "domain": "socialnetwork"}
{"query": "student whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_775", "domain": "socialnetwork"}
{"query": "person that is friends with student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_776", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_777", "domain": "socialnetwork"}
{"query": "person whose gender is male and whose birthplace is new york", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_778", "domain": "socialnetwork"}
{"query": "person that alice not is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_test_779", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_780", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_781", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_782", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_783", "domain": "socialnetwork"}
{"query": "city that is birthplace of the least number of person", "dcs": "(call SW.listValue (call SW.countSuperlative (call SW.getProperty (call SW.singleton en.city) (string !type)) (string min) (call SW.reverse (string birthplace)) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_784", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose job title is not software engineer", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_785", "domain": "socialnetwork"}
{"query": "student whose end date is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_786", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_787", "domain": "socialnetwork"}
{"query": "student whose field of study is computer science or history", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string =) (call SW.concat en.field.computer_science en.field.history))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_788", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_789", "domain": "socialnetwork"}
{"query": "employee whose start date is start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_790", "domain": "socialnetwork"}
{"query": "person that student whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_791", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_792", "domain": "socialnetwork"}
{"query": "person that student whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_793", "domain": "socialnetwork"}
{"query": "employee whose end date is at least 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_794", "domain": "socialnetwork"}
{"query": "company that is employer of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.company) (string !type)) (call SW.reverse (string employer)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_795", "domain": "socialnetwork"}
{"query": "employee that has the smallest end date", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.superlative (var s) (string min) (call SW.ensureNumericProperty (string employment_end_date)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_796", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose gender is male", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_797", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_798", "domain": "socialnetwork"}
{"query": "person that has at least two relationship status", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_799", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_800", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_801", "domain": "socialnetwork"}
{"query": "city that is birthplace of student whose university is not brown university", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_802", "domain": "socialnetwork"}
{"query": "gender that is gender of person that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_803", "domain": "socialnetwork"}
{"query": "person that is friends with person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_804", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_805", "domain": "socialnetwork"}
{"query": "person whose birthdate is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_806", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_807", "domain": "socialnetwork"}
{"query": "person whose birthdate is 2004 and that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call SW.reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_808", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_809", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_810", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_811", "domain": "socialnetwork"}
{"query": "student whose start date is at most start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_812", "domain": "socialnetwork"}
{"query": "employee whose start date is at least birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_813", "domain": "socialnetwork"}
{"query": "university of student alice whose end date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_test_814", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_815", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_816", "domain": "socialnetwork"}
{"query": "person that person whose birthdate is 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_817", "domain": "socialnetwork"}
{"query": "person whose relationship status is not single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_test_818", "domain": "socialnetwork"}
{"query": "student whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_819", "domain": "socialnetwork"}
{"query": "computer science or history", "dcs": "(call SW.listValue (call SW.concat en.field.computer_science en.field.history))", "qid": "socialnetwork_test_820", "domain": "socialnetwork"}
{"query": "employee whose end date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_821", "domain": "socialnetwork"}
{"query": "person that person that is friends with alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_822", "domain": "socialnetwork"}
{"query": "person whose height is height of alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (call SW.getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_823", "domain": "socialnetwork"}
{"query": "gender that is gender of less than two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_824", "domain": "socialnetwork"}
{"query": "city that is birthplace of person that alice is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_825", "domain": "socialnetwork"}
{"query": "employee whose start date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_826", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_827", "domain": "socialnetwork"}
{"query": "person that is friends with employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_828", "domain": "socialnetwork"}
{"query": "person that employee whose end date is at least 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_829", "domain": "socialnetwork"}
{"query": "person that employee whose end date is not 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_830", "domain": "socialnetwork"}
{"query": "person whose birthdate is at least 2004 or 2010", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string birthdate)) (string >=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_831", "domain": "socialnetwork"}
{"query": "person that employee whose start date is larger than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_832", "domain": "socialnetwork"}
{"query": "employee that has less than two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_833", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and that is friends with alice", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_834", "domain": "socialnetwork"}
{"query": "person whose gender is person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string gender) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_835", "domain": "socialnetwork"}
{"query": "person that student whose university is not brown university is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string !=) en.university.brown)) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_836", "domain": "socialnetwork"}
{"query": "person that is friends with alice and whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_837", "domain": "socialnetwork"}
{"query": "person whose relationship status is single and that is logged in", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_test_838", "domain": "socialnetwork"}
{"query": "employee whose start date is smaller than end date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_839", "domain": "socialnetwork"}
{"query": "student whose field of study is not computer science", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_840", "domain": "socialnetwork"}
{"query": "gender that is gender of at most two person", "dcs": "(call SW.listValue (call SW.countComparative (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string <=) (number 2) (call SW.getProperty (call SW.singleton en.person) (string !type))))", "qid": "socialnetwork_test_841", "domain": "socialnetwork"}
{"query": "person that student whose end date is smaller than 2004 is friends with", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_842", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_843", "domain": "socialnetwork"}
{"query": "student whose university is university of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string university) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string university)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_844", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose end date is larger than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_845", "domain": "socialnetwork"}
{"query": "city that is birthplace of employee whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_846", "domain": "socialnetwork"}
{"query": "employee whose job title is software engineer or program manager", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string job_title) (string =) (call SW.concat en.job_title.software_engineer en.job_title.program_manager))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_847", "domain": "socialnetwork"}
{"query": "employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))", "qid": "socialnetwork_test_848", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_849", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose start date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_850", "domain": "socialnetwork"}
{"query": "employee whose end date is at most start date of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_851", "domain": "socialnetwork"}
{"query": "employee whose end date is at most 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_852", "domain": "socialnetwork"}
{"query": "gender that is gender of person whose relationship status is single", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_853", "domain": "socialnetwork"}
{"query": "employee whose end date is at least start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >=) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_854", "domain": "socialnetwork"}
{"query": "employee that has at most two employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string employer) (string <=) (number 2))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_855", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose end date is not 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_856", "domain": "socialnetwork"}
{"query": "employee whose end date is 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_end_date) (string =) (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_857", "domain": "socialnetwork"}
{"query": "employee whose end date is smaller than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string <) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_858", "domain": "socialnetwork"}
{"query": "person whose height is at least 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.ensureNumericProperty (string height)) (string >=) (call SW.ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_859", "domain": "socialnetwork"}
{"query": "employee whose employer is employer of employee alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employer)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_860", "domain": "socialnetwork"}
{"query": "student whose start date is at most 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_861", "domain": "socialnetwork"}
{"query": "employee whose start date is larger than start date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_start_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_862", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of student whose start date is at least 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string >=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_863", "domain": "socialnetwork"}
{"query": "person that alice is friends with and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (call SW.reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_864", "domain": "socialnetwork"}
{"query": "student whose end date is larger than 2004 or 2010", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string >) (call SW.ensureNumericEntity (call SW.concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_865", "domain": "socialnetwork"}
{"query": "gender that is gender of employee whose employer is not mckinsey", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string !=) en.company.mckinsey)) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_866", "domain": "socialnetwork"}
{"query": "person whose birthdate is start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_test_867", "domain": "socialnetwork"}
{"query": "employee whose employer is mckinsey or google", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employer) (string =) (call SW.concat en.company.mckinsey en.company.google))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_868", "domain": "socialnetwork"}
{"query": "gender that is gender of student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.gender) (string !type)) (call SW.reverse (string gender)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student))))", "qid": "socialnetwork_test_869", "domain": "socialnetwork"}
{"query": "student that has at most two university", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countComparative (var s) (string university) (string <=) (number 2))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_870", "domain": "socialnetwork"}
{"query": "alice or bob", "dcs": "(call SW.listValue (call SW.concat en.person.alice en.person.bob))", "qid": "socialnetwork_test_871", "domain": "socialnetwork"}
{"query": "student whose end date is smaller than 2004", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_end_date)) (string <) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_872", "domain": "socialnetwork"}
{"query": "employee that has the most number of employer", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.countSuperlative (var s) (string max) (string employer))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_873", "domain": "socialnetwork"}
{"query": "person whose height is 180 cm and whose end date is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_874", "domain": "socialnetwork"}
{"query": "job title that is job title of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.job_title) (string !type)) (call SW.reverse (string job_title)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_875", "domain": "socialnetwork"}
{"query": "student whose start date is at most birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string education_start_date)) (string <=) (call SW.ensureNumericEntity (call SW.getProperty en.person.alice (string birthdate))))) (call SW.domain (string student))) (string student)))", "qid": "socialnetwork_test_876", "domain": "socialnetwork"}
{"query": "relationship status that is relationship status of employee whose start date is at most 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.relationship_status) (string !type)) (call SW.reverse (string relationship_status)) (string =) (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_start_date)) (string <=) (call SW.ensureNumericEntity (date 2004 -1 -1)))) (call SW.domain (string employee))) (string employee))))", "qid": "socialnetwork_test_877", "domain": "socialnetwork"}
{"query": "person whose birthdate is start date of employee alice", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string birthdate) (string =) (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_test_878", "domain": "socialnetwork"}
{"query": "employer of employee alice whose start date is 2004", "dcs": "(call SW.listValue (call SW.getProperty (call SW.filter (call SW.getProperty en.person.alice (call SW.reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_test_879", "domain": "socialnetwork"}
{"query": "employee whose start date is birthdate of alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (string employment_start_date) (string =) (call SW.getProperty en.person.alice (string birthdate)))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_880", "domain": "socialnetwork"}
{"query": "person that is logged in and whose birthdate is 2004", "dcs": "(call SW.listValue (call SW.filter (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_881", "domain": "socialnetwork"}
{"query": "employee whose end date is larger than end date of student alice", "dcs": "(call SW.listValue (call SW.getProperty ((lambda s (call SW.filter (var s) (call SW.ensureNumericProperty (string employment_end_date)) (string >) (call SW.ensureNumericEntity (call SW.getProperty (call SW.getProperty en.person.alice (call SW.reverse (string student))) (string education_end_date))))) (call SW.domain (string employee))) (string employee)))", "qid": "socialnetwork_test_882", "domain": "socialnetwork"}
{"query": "city that is birthplace of person whose height is 180 cm", "dcs": "(call SW.listValue (call SW.filter (call SW.getProperty (call SW.singleton en.city) (string !type)) (call SW.reverse (string birthplace)) (string =) (call SW.filter (call SW.getProperty (call SW.singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_883", "domain": "socialnetwork"}
