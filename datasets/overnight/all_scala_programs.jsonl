{"qid": "socialnetwork_train_158", "query": "student whose end date is birthdate of alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val studentsFinishingOnAlicesBirthday = api.people.filter(_.education.exists(_.exists(_.endDate == alice.birthdate)))\n    studentsFinishingOnAlicesBirthday"}
{"qid": "socialnetwork_train_234", "query": "city that is birthplace of student whose university is not brown university", "scala": "def answer():\n    val nonBrownStudents = api.people.filter(_.education.exists(_.forall(_.university != \"en.university.brown\")))\n    val birthplaces = nonBrownStudents.map(_.birthplace).toSet\n    birthplaces"}
{"qid": "socialnetwork_train_260", "query": "person whose gender is male and whose birthdate is 2004", "scala": "def answer():\n    val peopleBornIn2004 = api.people.filter(_.birthdate == 2004)\n    val malesBornIn2004 = peopleBornIn2004.filter(_.gender == Gender.Male)\n    malesBornIn2004"}
{"qid": "socialnetwork_train_304", "query": "employee whose end date is larger than end date of employee alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val employeesWhoEndedAfterAlice = api.people.filter(_.employment.exists(_.exists(emp => alice.employment.exists(_.exists(_.endDate < emp.endDate))))))\n    employeesWhoEndedAfterAlice"}
{"qid": "socialnetwork_train_402", "query": "employee that has the largest start date", "scala": "def answer():\n    val latestStartDate = api.people.flatMap(_.employment).flatMap(_.map(_.startDate)).flatten.max\n    val employeesStartingLatest = api.people.filter(_.employment.exists(_.exists(_.startDate == latestStartDate)))\n    employeesStartingLatest"}
{"qid": "socialnetwork_train_471", "query": "person that is friends with student whose start date is not 2004", "scala": "def answer():\n    val friendsOfStudents = api.people.filter(_.friends.exists(_.exists(_.education.exists(_.exists(_.startDate != 2004)))))\n    friendsOfStudents"}
{"qid": "socialnetwork_train_485", "query": "relationship status that is relationship status of student whose start date is at most 2004", "scala": "def answer():\n    val students = api.people.filter(_.education.exists(_.exists(_.startDate <= 2004)))\n    val relationshipStatuses = students.map(_.relationshipStatus).toSet\n    relationshipStatuses"}
{"qid": "socialnetwork_train_527", "query": "employee whose start date is at least 2004", "scala": "def answer():\n    val employeesStarting2004AndLater = api.people.filter(_.employment.exists(_.exists(_.startDate >= 2004)))\n    employeesStarting2004AndLater"}
{"qid": "socialnetwork_train_799", "query": "person whose height is 180 cm and that is logged in", "scala": "def answer():\n    val loggedInTallPeople = api.people.filter(person => person.height == 180 && person.loggedIn)\n    loggedInTallPeople"}
{"qid": "socialnetwork_train_813", "query": "employee whose end date is larger than 2004 or 2010", "scala": "def answer():\n    val employees = api.people.filter(_.employment.exists(_.exists(e => e.endDate > 2004 || e.endDate > 2010)))\n    employees"}
{"qid": "socialnetwork_train_930", "query": "person whose gender is male and whose birthplace is new york", "scala": "def answer():\n    val malesBornInNewYork = api.people.filter(_.gender == Gender.Male).filter(_.birthplace == \"en.city.new_york\")\n    malesBornInNewYork"}
{"qid": "socialnetwork_train_1051", "query": "person whose height is at least 180 cm", "scala": "def answer():\n    val tallPeople = api.people.filter(_.height >= 180)\n    tallPeople"}
{"qid": "socialnetwork_train_1063", "query": "person whose birthdate is smaller than start date of student alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val peopleBornBeforeAliceStartedSchool = api.people.filter(person => alice.education.exists(_.exists(_.startDate > person.birthdate))))\n    peopleBornBeforeAliceStartedSchool"}
{"qid": "socialnetwork_train_1217", "query": "person whose height is 180 cm and whose start date is 2004", "scala": "def answer():\n    val peopleStartedIn2004 = api.people.filter(_.startDate == 2004)\n    val tallPeopleStartedIn2004 = peopleStartedIn2004.filter(_.height == 180)\n    tallPeopleStartedIn2004"}
{"qid": "socialnetwork_train_1260", "query": "person whose birthplace is new york and that alice is friends with", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val friendsWithBirthplaceNY = alice.friends.filter(_.birthplace == \"en.city.new_york\")\n    friendsWithBirthplaceNY"}
{"qid": "socialnetwork_train_1294", "query": "person that student whose end date is smaller than 2004 is friends with", "scala": "def answer():\n    val studentsGraduatedBefore2004 = api.people.filter(_.education.exists(_.exists(_.endDate < 2004)))\n    val friendsOfStudents = studentsGraduatedBefore2004.flatMap(_.friends.getOrElse(List()))\n    friendsOfStudents"}
{"qid": "socialnetwork_train_1399", "query": "city that is birthplace of student whose end date is larger than 2004", "scala": "def answer():\n    val peopleFinishedSchoolAfter2004 = api.people.filter(_.education.exists(_.exists(_.endDate > 2004)))\n    val birthplaces = peopleFinishedSchoolAfter2004.map(_.birthplace).toSet\n    birthplaces"}
{"qid": "socialnetwork_train_1403", "query": "employee whose start date is at most 2004 or 2010", "scala": "def answer():\n    val employeesStartedWorkingBy2004Or2010 = api.people.filter(_.employment.exists(_.exists(e => e.startDate <= 2004 || e.startDate <= 2010)))\n    employeesStartedWorkingBy2004Or2010"}
{"qid": "socialnetwork_train_1415", "query": "city that is birthplace of employee whose start date is larger than 2004", "scala": "def answer():\n    val employeesStartedAfter2004 = api.people.filter(_.employment.exists(_.exists(_.startDate > 2004)))\n    val birthplaces = employeesStartedAfter2004.map(_.birthplace).toSet\n    birthplaces"}
{"qid": "socialnetwork_train_1529", "query": "student whose end date is start date of employee alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val studentsEndedWhenAliceStarted = api.people.filter(_.education.exists(_.exists(edu => alice.employment.exists(_.exists(_.startDate == edu.endDate))))))\n    studentsEndedWhenAliceStarted"}
{"qid": "socialnetwork_train_1530", "query": "person whose height is 180 cm and that is logged in", "scala": "def answer():\n    val onlinePeople = api.people.filter(_.loggedIn)\n    val tallPeople = onlinePeople.filter(_.height == 180)\n    tallPeople"}
{"qid": "socialnetwork_train_1565", "query": "city that is birthplace of alice or bob", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val bob = api.findPersonById(\"en.person.bob\")\n    val birthplaces = List(alice.birthplace, bob.birthplace)\n    birthplaces"}
{"qid": "socialnetwork_train_1586", "query": "relationship status that is relationship status of alice and that is relationship status of alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    alice.relationshipStatus"}
{"qid": "socialnetwork_train_1690", "query": "person whose height is 180 cm and whose start date is 2004", "scala": "def answer():\n    val tallPeople = api.people.filter(_.height == 180)\n    val peopleWithStartDate2004 = tallPeople.filter(_.education.exists(_.exists(_.startDate == 2004)))\n    peopleWithStartDate2004"}
{"qid": "socialnetwork_train_1744", "query": "employee whose end date is smaller than 2004 or 2010", "scala": "def answer():\n    val employees = api.people.filter(_.employment.exists(_.exists(e => e.endDate < 2004 || e.endDate < 2010)))\n    employees"}
{"qid": "socialnetwork_train_1839", "query": "student whose start date is at most 2004", "scala": "def answer():\n    val students = api.people.filter(_.education.exists(_.exists(_.startDate <= 2004)))\n    students"}
{"qid": "socialnetwork_train_1860", "query": "student whose start date is end date of employee alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val studentsStartedWhenAliceQuit = api.people.filter(_.education.exists(_.exists(edu => alice.employment.exists(_.exists(_.endDate == edu.startDate))))))\n    studentsStartedWhenAliceQuit"}
{"qid": "socialnetwork_train_1973", "query": "relationship status that is relationship status of more than two person", "scala": "def answer():\n    val relationshipStatusCounts = api.people.groupBy(_.relationshipStatus).mapValues(_.size)\n    val relationshipStatusMoreThanTwo = relationshipStatusCounts.filter(_._2 > 2).keys.toList\n    relationshipStatusMoreThanTwo"}
{"qid": "socialnetwork_train_1981", "query": "relationship status that is relationship status of student whose start date is at least 2004", "scala": "def answer():\n    val students = api.people.filter(_.education.exists(_.exists(_.startDate >= 2004)))\n    val relationshipStatuses = students.map(_.relationshipStatus).toSet\n    relationshipStatuses"}
{"qid": "socialnetwork_train_2009", "query": "person whose birthdate is person whose height is 180 cm", "scala": "def answer():\n    val tallPeople = api.people.filter(_.height == 180)\n    val peopleWithSameBirthdate = api.people.filter(p => tallPeople.exists(_.birthdate == p.birthdate))\n    peopleWithSameBirthdate"}
{"qid": "socialnetwork_train_2041", "query": "city that is birthplace of the most number of person", "scala": "def answer():\n    val birthplaceCounts = api.people.groupBy(_.birthplace).mapValues(_.size)\n    val cityWithMostPeople = birthplaceCounts.maxBy(_._2)._1\n    cityWithMostPeople"}
{"qid": "socialnetwork_train_2070", "query": "employee whose start date is smaller than start date of employee alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val peopleStartedToWorkBeforeAlice = api.people.filter(_.employment.exists(_.exists(emp => alice.employment.exists(_.exists(_.startDate > emp.startDate))))))\n    peopleStartedToWorkBeforeAlice"}
{"qid": "socialnetwork_train_2270", "query": "student whose start date is birthdate of alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val studentsStartedOnAlicesBirthday = api.people.filter(_.education.exists(_.exists(_.startDate == alice.birthdate)))\n    studentsStartedOnAlicesBirthday"}
{"qid": "socialnetwork_train_2313", "query": "gender that is gender of student whose start date is at most 2004", "scala": "def answer():\n    val students = api.people.filter(_.education.exists(_.exists(_.startDate <= 2004)))\n    val genders = students.map(_.gender).toSet\n    genders"}
{"qid": "socialnetwork_train_2324", "query": "start date of student alice whose field of study is computer science", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val startingDates = alice.education.flatMap(_.filter(_.fieldOfStudy == \"en.field.computer_science\").map(_.startDate))\n    startingDates"}
{"qid": "socialnetwork_train_2334", "query": "person that student whose end date is smaller than 2004 is friends with", "scala": "def answer():\n    val peopleCompletedStudiesBefore2004 = api.people.filter(_.education.exists(_.exists(_.endDate < 2004)))\n    val friendsOfPeopleCompletedStudiesBefore2004 = peopleCompletedStudiesBefore2004.flatMap(_.friends.getOrElse(List()))\n    friendsOfPeopleCompletedStudiesBefore2004"}
{"qid": "socialnetwork_train_2484", "query": "gender that is gender of student whose end date is larger than 2004", "scala": "def answer():\n    val students = api.people.filter(_.education.exists(_.exists(_.endDate > 2004)))\n    val genders = students.map(_.gender).toSet\n    genders"}
{"qid": "socialnetwork_train_2529", "query": "employee whose start date is smaller than end date of employee alice", "scala": "def answer(): \n    val alice = api.findPersonById(\"en.person.alice\")\n    val aliceQuitDate = alice.employment.flatMap(_.map(_.endDate)).flatten.max\n    val employeesHiredBeforeAliceQuit = api.people.filter(_.employment.exists(_.exists(_.startDate < aliceQuitDate)))\n    employeesHiredBeforeAliceQuit"}
{"qid": "socialnetwork_train_2537", "query": "city that is birthplace of employee whose start date is smaller than 2004", "scala": "def answer():\n    val employeesStartedBefore2004 = api.people.filter(_.employment.exists(_.exists(_.startDate < 2004)))\n    val birthplaces = employeesStartedBefore2004.map(_.birthplace).toSet\n    birthplaces"}
{"qid": "socialnetwork_train_2541", "query": "person whose height is 180 cm and whose employer is mckinsey", "scala": "def answer():\n    val mckinseyEmployees = api.people.filter(_.employment.exists(_.exists(_.employer == \"en.company.mckinsey\")))\n    val tallEmployees = mckinseyEmployees.filter(_.height == 180)\n    tallEmployees"}
{"qid": "socialnetwork_train_2546", "query": "person that is friends with at least two person", "scala": "def answer():\n    val peopleWithAtLeastTwoFriends = api.people.filter(_.friends.exists(_.length >= 2))\n    peopleWithAtLeastTwoFriends"}
{"qid": "socialnetwork_train_2586", "query": "relationship status that is relationship status of person whose height is 180 cm", "scala": "def answer():\n    val tallPeople = api.people.filter(_.height == 180)\n    val relationshipStatusOfTallPeople = tallPeople.map(_.relationshipStatus)\n    relationshipStatusOfTallPeople"}
{"qid": "socialnetwork_train_2717", "query": "person whose birthplace is person whose height is 180 cm", "scala": "def answer():\n    val tallPeople = api.people.filter(_.height == 180)\n    val peopleWithSameBirthplace = api.people.filter(p => tallPeople.exists(_.birthplace == p.birthplace))\n    peopleWithSameBirthplace"}
{"qid": "socialnetwork_train_2751", "query": "city that is birthplace of student whose university is not brown university", "scala": "def answer():\n    val cities = api.people.filter(_.education.exists(_.exists(_.university != \"en.university.brown\"))).map(_.birthplace)\n    cities"}
{"qid": "socialnetwork_train_2763", "query": "employee whose end date is larger than end date of student alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val employeesWhoEndedAfterAlice = api.people.filter(_.employment.exists(_.exists(emp => alice.education.exists(_.exists(_.endDate < emp.endDate))))))\n    employeesWhoEndedAfterAlice"}
{"qid": "socialnetwork_train_2854", "query": "start date of student alice whose field of study is computer science", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val startDates = alice.education.flatMap(_.filter(_.fieldOfStudy == \"en.field.computer_science\").map(_.startDate))\n    startDates"}
{"qid": "socialnetwork_train_3152", "query": "person that is friends with employee whose end date is not 2004", "scala": "def answer():\n    val people = api.people.filter(person => person.friends.exists(_.exists(friend => friend.employment.exists(_.exists(_.endDate != 2004)))))\n    people"}
{"qid": "socialnetwork_train_3337", "query": "gender that is gender of person whose birthdate is 2004", "scala": "def answer():\n    val peopleBornIn2004 = api.people.filter(_.birthdate == 2004)\n    val genders = peopleBornIn2004.map(_.gender).toSet\n    genders"}
{"qid": "socialnetwork_train_3407", "query": "employee whose end date is at most birthdate of alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val peopleStoppedWorkingBeforeAliceBirth = api.people.filter(_.employment.exists(_.exists(_.endDate <= alice.birthdate)))\n    peopleStoppedWorkingBeforeAliceBirth"}
{"qid": "socialnetwork_train_3433", "query": "city that is birthplace of student whose end date is smaller than 2004", "scala": "def answer():\n    val studentsGraduatedBefore2004 = api.people.filter(_.education.exists(_.exists(_.endDate < 2004)))\n    val birthplaces = studentsGraduatedBefore2004.map(_.birthplace).toSet\n    birthplaces"}
{"qid": "socialnetwork_test_71", "query": "student whose field of study is not computer science", "scala": "def answer():\n    val studentsNotStudyingCS = api.people.filter(_.education.exists(_.exists(_.fieldOfStudy != \"en.field.computer_science\")))\n    studentsNotStudyingCS"}
{"qid": "socialnetwork_test_75", "query": "person that is friends with student whose start date is larger than 2004", "scala": "def answer():\n    val studentsFriends = api.people.filter(_.friends.exists(_.exists(_.education.exists(_.exists(_.startDate > 2004)))))\n    studentsFriends"}
{"qid": "socialnetwork_test_122", "query": "gender that is gender of student whose end date is smaller than 2004", "scala": "def answer():\n    val peopleFinishedSchoolBefore2004 = api.people.filter(_.education.exists(_.exists(_.endDate < 2004)))\n    val genders = peopleFinishedSchoolBefore2004.map(_.gender).toSet\n    genders"}
{"qid": "socialnetwork_test_291", "query": "city that is birthplace of student whose end date is not 2004", "scala": "def answer():\n    val studentsWhoDidNotEndIn2004 = api.people.filter(_.education.exists(_.forall(_.endDate != 2004)))\n    val birthplaces = studentsWhoDidNotEndIn2004.map(_.birthplace).toSet\n    birthplaces"}
{"qid": "socialnetwork_test_390", "query": "employee whose start date is smaller than 2004", "scala": "def answer():\n    val employeesJoinedBefore2004 = api.people.filter(_.employment.exists(_.exists(_.startDate < 2004)))\n    employeesJoinedBefore2004"}
{"qid": "socialnetwork_test_611", "query": "person that is friends with at most two person", "scala": "def answer():\n    val peopleWithFewFriends = api.people.filter(_.friends.exists(_.length <= 2))\n    peopleWithFewFriends"}
{"qid": "socialnetwork_test_667", "query": "person that is friends with student whose end date is larger than 2004", "scala": "def answer():\n    val friendsOfStudents = api.people.filter(_.friends.exists(_.exists(_.education.exists(_.exists(_.endDate > 2004)))))\n    friendsOfStudents"}
{"qid": "socialnetwork_test_728", "query": "person whose relationship status is single and whose height is 180 cm", "scala": "def answer():\n    val singlePeople = api.people.filter(_.relationshipStatus == RelationshipStatus.Single)\n    val tallSinglePeople = singlePeople.filter(_.height == 180)\n    tallSinglePeople"}
{"qid": "socialnetwork_test_757", "query": "employee whose end date is at least birthdate of alice", "scala": "def answer():\n    val alice = api.findPersonById(\"en.person.alice\")\n    val peopleStoppedWorkingAfterAliceBirth = api.people.filter(_.employment.exists(_.exists(_.endDate >= alice.birthdate)))\n    peopleStoppedWorkingAfterAliceBirth"}
{"qid": "socialnetwork_test_786", "query": "student whose end date is at least 2004 or 2010", "scala": "def answer():\n    val students = api.people.filter(_.education.exists(_.exists(e => e.endDate >= 2004 || e.endDate >= 2010)))\n    students"}
