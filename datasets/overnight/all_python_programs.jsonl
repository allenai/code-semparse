{"qid": "socialnetwork_train_158", "query": "student whose end date is birthdate of alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    students_finishing_on_alices_birthday = []\n    for person in api.people:\n        if person.education and any(e.end_date == alice.birthdate for e in person.education):\n            students_finishing_on_alices_birthday.append(person)\n    return students_finishing_on_alices_birthday", "python_oneline": "def answer():\n    return [person for person in api.people if person.education and any(e.end_date == api.find_person_by_id(\"en.person.alice\").birthdate for e in person.education)]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    students_finishing_on_alices_birthday = []\n    for person in api.people:\n        if person.education and any(e.end_date == alice.birthdate for e in person.education):\n            students_finishing_on_alices_birthday.append(person)\n    return students_finishing_on_alices_birthday", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    students_finishing_on_alices_birthday = []\n    for person in api.people:\n        if person.education:\n            for e in person.education:\n                if e.end_date == alice.birthdate:\n                    students_finishing_on_alices_birthday.append(person)\n    return students_finishing_on_alices_birthday", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.education and any(e.end_date == api.find_person_by_id(\"en.person.alice\").birthdate for e in person.education)]"}
{"qid": "socialnetwork_train_234", "query": "city that is birthplace of student whose university is not brown university", "python": "def answer():\n    non_brown_students = [person for person in api.people if person.education and all(e.university != \"en.university.brown\" for e in person.education)]\n    birthplaces = set([student.birthplace for student in non_brown_students])\n    return birthplaces", "python_oneline": "def answer():\n    return set([student.birthplace for student in api.people if student.education and all(e.university != \"en.university.brown\" for e in student.education)])", "python_multiline": "def answer():\n    non_brown_students = [person for person in api.people if person.education and all(e.university != \"en.university.brown\" for e in person.education)]\n    birthplaces = set([student.birthplace for student in non_brown_students])\n    return birthplaces", "python_multiline_discarded": "def answer():\n    non_brown_students = [person for person in api.people if person.education and all(e.university != \"en.university.brown\" for e in person.education)]\n    birthplaces = set([student.birthplace for student in non_brown_students])\n    return birthplaces", "python_oneline_discarded": "def answer():\n    return set([student.birthplace for student in api.people if student.education and all(e.university != \"en.university.brown\" for e in student.education)])"}
{"qid": "socialnetwork_train_260", "query": "person whose gender is male and whose birthdate is 2004", "python": "def answer():\n    people_born_in_2004 = [person for person in api.people if person.birthdate == 2004]\n    males_born_in_2004 = [person for person in people_born_in_2004 if person.gender == Gender.male]\n    return males_born_in_2004", "python_oneline": "def answer():\n    return [person for person in api.people if person.birthdate == 2004 and person.gender == Gender.male]", "python_multiline": "def answer():\n    people_born_in_2004 = [person for person in api.people if person.birthdate == 2004]\n    males_born_in_2004 = [person for person in people_born_in_2004 if person.gender == Gender.male]\n    return males_born_in_2004", "python_multiline_discarded": "def answer():\n    people_born_in_2004 = [person for person in api.people if person.birthdate == 2004]\n    males_born_in_2004 = [person for person in people_born_in_2004 if person.gender == Gender.male]\n    return males_born_in_2004", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.birthdate == 2004 and person.gender == Gender.male]"}
{"qid": "socialnetwork_train_304", "query": "employee whose end date is larger than end date of employee alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    employees_who_ended_after_alice = []\n    for person in api.people:\n        if person.employment and any(employment.end_date > alice_employment.end_date for alice_employment in alice.employment for employment in person.employment):\n            employees_who_ended_after_alice.append(person)\n    return employees_who_ended_after_alice", "python_oneline": "def answer():\n    return [person for person in api.people if person.employment and any(employment.end_date > alice_employment.end_date for alice_employment in api.find_person_by_id(\"en.person.alice\").employment for employment in person.employment)]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    employees_who_ended_after_alice = []\n    for person in api.people:\n        if person.employment and any(employment.end_date > alice_employment.end_date for alice_employment in alice.employment for employment in person.employment):\n            employees_who_ended_after_alice.append(person)\n    return employees_who_ended_after_alice", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    employees_who_ended_after_alice = []\n    for person in api.people:\n        if person.employment:\n            for alice_employment in alice.employment:\n                for employment in person.employment:\n                    if employment.end_date > alice_employment.end_date:\n                        employees_who_ended_after_alice.append(person)\n                        break\n    return employees_who_ended_after_alice", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.employment and any(employment.end_date > alice_employment.end_date for alice_employment in api.find_person_by_id(\"en.person.alice\").employment for employment in person.employment)]"}
{"qid": "socialnetwork_train_402", "query": "employee that has the largest start date", "python": "def answer():\n    latest_start_date = max(e.start_date for person in api.people for e in person.employment if e.start_date is not None)\n    employees_starting_latest = [person for person in api.people if any(e.start_date == latest_start_date for e in person.employment)]\n    return employees_starting_latest", "python_oneline": "def answer():\n    return [person for person in api.people if any(e.start_date == max(e.start_date for person in api.people for e in person.employment if e.start_date is not None) for e in person.employment)]", "python_multiline": "def answer():\n    latest_start_date = max(e.start_date for person in api.people for e in person.employment if e.start_date is not None)\n    employees_starting_latest = [person for person in api.people if any(e.start_date == latest_start_date for e in person.employment)]\n    return employees_starting_latest", "python_multiline_discarded": "def answer():\n    latest_start_date = max(e.start_date for person in api.people for e in person.employment if e.start_date is not None)\n    employees_starting_latest = [person for person in api.people if any(e.start_date == latest_start_date for e in person.employment)]\n    return employees_starting_latest", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if any(e.start_date == max(e.start_date for person in api.people for e in person.employment if e.start_date is not None) for e in person.employment)]"}
{"qid": "socialnetwork_train_471", "query": "person that is friends with student whose start date is not 2004", "python": "def answer():\n    friends_of_students = []\n    for person in api.people:\n        for friend in person.friends:\n            if any(education.start_date != 2004 for education in friend.education):\n                friends_of_students.append(person)\n                break\n    return friends_of_students", "python_oneline": "def answer():\n    return [person for person in api.people if any(education.start_date != 2004 for friend in person.friends for education in friend.education)]", "python_multiline": "def answer():\n    friends_of_students = []\n    for person in api.people:\n        for friend in person.friends:\n            if any(education.start_date != 2004 for education in friend.education):\n                friends_of_students.append(person)\n                break\n    return friends_of_students", "python_multiline_discarded": "def answer():\n    friends_of_students = []\n    for person in api.people:\n        for friend in person.friends:\n            for education in friend.education:\n                if education.start_date != 2004:\n                    friends_of_students.append(person)\n                    break\n    return friends_of_students", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if any(education.start_date != 2004 for friend in person.friends for education in friend.education)]"}
{"qid": "socialnetwork_train_485", "query": "relationship status that is relationship status of student whose start date is at most 2004", "python": "def answer():\n    students = [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]\n    relationship_statuses = set([student.relationship_status for student in students])\n    return relationship_statuses", "python_oneline": "def answer():\n    return set([student.relationship_status for student in [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]])", "python_multiline": "def answer():\n    students = [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]\n    relationship_statuses = set([student.relationship_status for student in students])\n    return relationship_statuses", "python_multiline_discarded": "def answer():\n    students = [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]\n    relationship_statuses = set([student.relationship_status for student in students])\n    return relationship_statuses", "python_oneline_discarded": "def answer():\n    return set([student.relationship_status for student in [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]])"}
{"qid": "socialnetwork_train_527", "query": "employee whose start date is at least 2004", "python": "def answer():\n    employees_starting_2004_and_later = []\n    for person in api.people:\n        if person.employment and any(e.start_date >= 2004 for e in person.employment):\n            employees_starting_2004_and_later.append(person)\n    return employees_starting_2004_and_later", "python_oneline": "def answer():\n    return [person for person in api.people if person.employment and any(e.start_date >= 2004 for e in person.employment)]", "python_multiline": "def answer():\n    employees_starting_2004_and_later = []\n    for person in api.people:\n        if person.employment and any(e.start_date >= 2004 for e in person.employment):\n            employees_starting_2004_and_later.append(person)\n    return employees_starting_2004_and_later", "python_multiline_discarded": "def answer():\n    employees_starting_2004_and_later = []\n    for person in api.people:\n        if person.employment:\n            for e in person.employment:\n                if e.start_date >= 2004:\n                    employees_starting_2004_and_later.append(person)\n                    break\n    return employees_starting_2004_and_later", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.employment and any(e.start_date >= 2004 for e in person.employment)]"}
{"qid": "socialnetwork_train_799", "query": "person whose height is 180 cm and that is logged in", "python": "def answer():\n    logged_in_tall_people = [person for person in api.people if person.height == 180 and person.logged_in]\n    return logged_in_tall_people"}
{"qid": "socialnetwork_train_813", "query": "employee whose end date is larger than 2004 or 2010", "python": "def answer():\n    employees = [person for person in api.people if person.employment and any(e.end_date > 2004 or e.end_date > 2010 for e in person.employment)]\n    return employees", "python_oneline": "def answer():\n    return [person for person in api.people if person.employment and any(e.end_date > 2004 or e.end_date > 2010 for e in person.employment)]", "python_multiline": "def answer():\n    employees = [person for person in api.people if person.employment and any(e.end_date > 2004 or e.end_date > 2010 for e in person.employment)]\n    return employees", "python_multiline_discarded": "def answer():\n    employees = [person for person in api.people if person.employment and any(e.end_date > 2004 or e.end_date > 2010 for e in person.employment)]\n    return employees", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.employment and any(e.end_date > 2004 or e.end_date > 2010 for e in person.employment)]"}
{"qid": "socialnetwork_train_930", "query": "person whose gender is male and whose birthplace is new york", "python": "def answer():\n    males_born_in_new_york = [person for person in api.people if person.gender == Gender.male and person.birthplace == \"en.city.new_york\"]\n    return males_born_in_new_york", "python_oneline": "def answer():\n    return [person for person in api.people if person.gender == Gender.male and person.birthplace == \"en.city.new_york\"]", "python_multiline": "def answer():\n    males_born_in_new_york = [person for person in api.people if person.gender == Gender.male and person.birthplace == \"en.city.new_york\"]\n    return males_born_in_new_york", "python_multiline_discarded": "def answer():\n    males = [person for person in api.people if person.gender == Gender.male]\n    males_born_in_new_york = [person for person in males if person.birthplace == \"en.city.new_york\"]\n    return males_born_in_new_york", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.gender == Gender.male and person.birthplace == \"en.city.new_york\"]"}
{"qid": "socialnetwork_train_1051", "query": "person whose height is at least 180 cm", "python": "def answer():\n    tall_people = [person for person in api.people if person.height >= 180]\n    return tall_people", "python_oneline": "def answer():\n    return [person for person in api.people if person.height >= 180]", "python_multiline": "def answer():\n    tall_people = [person for person in api.people if person.height >= 180]\n    return tall_people", "python_multiline_discarded": "def answer():\n    tall_people = [person for person in api.people if person.height >= 180]\n    return tall_people", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.height >= 180]"}
{"qid": "socialnetwork_train_1063", "query": "person whose birthdate is smaller than start date of student alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    people_born_before_alice_started_school = []\n    for person in api.people:\n        if any(person.birthdate < education.start_date for education in alice.education):\n            people_born_before_alice_started_school.append(person)\n    return people_born_before_alice_started_school"}
{"qid": "socialnetwork_train_1217", "query": "person whose height is 180 cm and whose start date is 2004", "python": "def answer():\n    people_started_in_2004 = [person for person in api.people if person.start_date == 2004]\n    tall_people_started_in_2004 = [person for person in people_started_in_2004 if person.height == 180]\n    return tall_people_started_in_2004"}
{"qid": "socialnetwork_train_1260", "query": "person whose birthplace is new york and that alice is friends with", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    friends_with_birthplace_ny = []\n    for friend in alice.friends:\n        if friend.birthplace == \"en.city.new_york\":\n            friends_with_birthplace_ny.append(friend)\n    return friends_with_birthplace_ny", "python_oneline": "def answer():\n    return [friend for friend in api.find_person_by_id(\"en.person.alice\").friends if friend.birthplace == \"en.city.new_york\"]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    friends_with_birthplace_ny = []\n    for friend in alice.friends:\n        if friend.birthplace == \"en.city.new_york\":\n            friends_with_birthplace_ny.append(friend)\n    return friends_with_birthplace_ny", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    friends_with_birthplace_ny = []\n    for friend in alice.friends:\n        if friend.birthplace == \"en.city.new_york\":\n            friends_with_birthplace_ny.append(friend)\n    return friends_with_birthplace_ny", "python_oneline_discarded": "def answer():\n    return [friend for friend in api.find_person_by_id(\"en.person.alice\").friends if friend.birthplace == \"en.city.new_york\"]"}
{"qid": "socialnetwork_train_1294", "query": "person that student whose end date is smaller than 2004 is friends with", "python": "def answer():\n    students_graduated_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    friends_of_students = []\n    for student in students_graduated_before_2004:\n        for friend in student.friends:\n            friends_of_students.append(friend)\n    return friends_of_students", "python_oneline": "def answer():\n    return [friend for student in [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)] for friend in student.friends]", "python_multiline": "def answer():\n    students_graduated_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    friends_of_students = []\n    for student in students_graduated_before_2004:\n        for friend in student.friends:\n            friends_of_students.append(friend)\n    return friends_of_students", "python_multiline_discarded": "def answer():\n    students_graduated_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    friends_of_students = []\n    for student in students_graduated_before_2004:\n        for friend in student.friends:\n            friends_of_students.append(friend)\n    return friends_of_students", "python_oneline_discarded": "def answer():\n    return [friend for student in [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)] for friend in student.friends]"}
{"qid": "socialnetwork_train_1399", "query": "city that is birthplace of student whose end date is larger than 2004", "python": "def answer():\n    people_finished_school_after_2004 = [person for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)]\n    birthplaces = set([person.birthplace for person in people_finished_school_after_2004])\n    return birthplaces", "python_oneline": "def answer():\n    return set([person.birthplace for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)])", "python_multiline": "def answer():\n    people_finished_school_after_2004 = [person for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)]\n    birthplaces = set([person.birthplace for person in people_finished_school_after_2004])\n    return birthplaces", "python_multiline_discarded": "def answer():\n    people_finished_school_after_2004 = [person for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)]\n    birthplaces = set([person.birthplace for person in people_finished_school_after_2004])\n    return birthplaces", "python_oneline_discarded": "def answer():\n    return set([person.birthplace for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)])"}
{"qid": "socialnetwork_train_1403", "query": "employee whose start date is at most 2004 or 2010", "python": "def answer():\n    employees_started_working_by_2004_or_2010 = [person for person in api.people if person.employment and any(e.start_date <= 2004 or e.start_date <= 2010 for e in person.employment)]\n    return employees_started_working_by_2004_or_2010", "python_oneline": "def answer():\n    return [person for person in api.people if person.employment and any(e.start_date <= 2004 or e.start_date <= 2010 for e in person.employment)]", "python_multiline": "def answer():\n    employees_started_working_by_2004_or_2010 = [person for person in api.people if person.employment and any(e.start_date <= 2004 or e.start_date <= 2010 for e in person.employment)]\n    return employees_started_working_by_2004_or_2010", "python_multiline_discarded": "def answer():\n    employees_started_working_by_2004_or_2010 = []\n    for person in api.people:\n        if person.employment:\n            for e in person.employment:\n                if e.start_date <= 2004 or e.start_date <= 2010:\n                    employees_started_working_by_2004_or_2010.append(person)\n    return employees_started_working_by_2004_or_2010", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.employment and any(e.start_date <= 2004 or e.start_date <= 2010 for e in person.employment)]"}
{"qid": "socialnetwork_train_1415", "query": "city that is birthplace of employee whose start date is larger than 2004", "python": "def answer():\n    employees_started_after_2004 = [person for person in api.people if person.employment and any(e.start_date > 2004 for e in person.employment)]\n    birthplaces = set([employee.birthplace for employee in employees_started_after_2004])\n    return birthplaces", "python_oneline": "def answer():\n    return set([employee.birthplace for employee in api.people if employee.employment and any(e.start_date > 2004 for e in employee.employment)])", "python_multiline": "def answer():\n    employees_started_after_2004 = [person for person in api.people if person.employment and any(e.start_date > 2004 for e in person.employment)]\n    birthplaces = set([employee.birthplace for employee in employees_started_after_2004])\n    return birthplaces", "python_multiline_discarded": "def answer():\n    employees_started_after_2004 = [person for person in api.people if person.employment and any(e.start_date > 2004 for e in person.employment)]\n    birthplaces = set([employee.birthplace for employee in employees_started_after_2004])\n    return birthplaces", "python_oneline_discarded": "def answer():\n    return set([employee.birthplace for employee in api.people if employee.employment and any(e.start_date > 2004 for e in employee.employment)])"}
{"qid": "socialnetwork_train_1529", "query": "student whose end date is start date of employee alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    students_ended_when_alice_started = []\n    for person in api.people:\n        if person.education and any(e.end_date == alice_employment.start_date for alice_employment in alice.employment for e in person.education):\n            students_ended_when_alice_started.append(person)\n    return students_ended_when_alice_started"}
{"qid": "socialnetwork_train_1530", "query": "person whose height is 180 cm and that is logged in", "python": "def answer():\n    online_people = [person for person in api.people if person.logged_in]\n    tall_people = [person for person in online_people if person.height == 180]\n    return tall_people"}
{"qid": "socialnetwork_train_1565", "query": "city that is birthplace of alice or bob", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    bob = api.find_person_by_id(\"en.person.bob\")\n    birthplaces = [alice.birthplace, bob.birthplace]\n    return birthplaces", "python_oneline": "def answer():\n    return [api.find_person_by_id(\"en.person.alice\").birthplace, api.find_person_by_id(\"en.person.bob\").birthplace]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    bob = api.find_person_by_id(\"en.person.bob\")\n    birthplaces = [alice.birthplace, bob.birthplace]\n    return birthplaces", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    bob = api.find_person_by_id(\"en.person.bob\")\n    alice_birthplace = alice.birthplace\n    bob_birthplace = bob.birthplace\n    birthplaces = [alice_birthplace, bob_birthplace]\n    return birthplaces", "python_oneline_discarded": "def answer():\n    return [api.find_person_by_id(\"en.person.alice\").birthplace, api.find_person_by_id(\"en.person.bob\").birthplace]"}
{"qid": "socialnetwork_train_1586", "query": "relationship status that is relationship status of alice and that is relationship status of alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    return alice.relationship_status"}
{"qid": "socialnetwork_train_1690", "query": "person whose height is 180 cm and whose start date is 2004", "python": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    people_with_start_date_2004 = [person for person in tall_people if person.education and any(e.start_date == 2004 for e in person.education)]\n    return people_with_start_date_2004", "python_oneline": "def answer():\n    return [person for person in api.people if person.height == 180 and person.education and any(e.start_date == 2004 for e in person.education)]", "python_multiline": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    people_with_start_date_2004 = [person for person in tall_people if person.education and any(e.start_date == 2004 for e in person.education)]\n    return people_with_start_date_2004", "python_multiline_discarded": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    people_with_start_date_2004 = []\n    for person in tall_people:\n        if person.education:\n            for e in person.education:\n                if e.start_date == 2004:\n                    people_with_start_date_2004.append(person)\n    return people_with_start_date_2004", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.height == 180 and person.education and any(e.start_date == 2004 for e in person.education)]"}
{"qid": "socialnetwork_train_1744", "query": "employee whose end date is smaller than 2004 or 2010", "python": "def answer():\n    employees = [person for person in api.people if person.employment and any(e.end_date < 2004 or e.end_date < 2010 for e in person.employment)]\n    return employees", "python_oneline": "def answer():\n    return [person for person in api.people if person.employment and any(e.end_date < 2004 or e.end_date < 2010 for e in person.employment)]", "python_multiline": "def answer():\n    employees = [person for person in api.people if person.employment and any(e.end_date < 2004 or e.end_date < 2010 for e in person.employment)]\n    return employees", "python_multiline_discarded": "def answer():\n    employees = [person for person in api.people if person.employment and any(e.end_date < 2004 or e.end_date < 2010 for e in person.employment)]\n    return employees", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.employment and any(e.end_date < 2004 or e.end_date < 2010 for e in person.employment)]"}
{"qid": "socialnetwork_train_1839", "query": "student whose start date is at most 2004", "python": "def answer():\n    students = []\n    for person in api.people:\n        if person.education and any(e.start_date <= 2004 for e in person.education):\n            students.append(person)\n    return students", "python_oneline": "def answer():\n    return [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]", "python_multiline": "def answer():\n    students = []\n    for person in api.people:\n        if person.education and any(e.start_date <= 2004 for e in person.education):\n            students.append(person)\n    return students", "python_multiline_discarded": "def answer():\n    students = []\n    for person in api.people:\n        if person.education:\n            for e in person.education:\n                if e.start_date <= 2004:\n                    students.append(person)\n                    break\n    return students", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]"}
{"qid": "socialnetwork_train_1860", "query": "student whose start date is end date of employee alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    students_started_when_alice_quit = []\n    for person in api.people:\n        if person.education and any(e.start_date == alice_employment.end_date for alice_employment in alice.employment for e in person.education):\n            students_started_when_alice_quit.append(person)\n    return students_started_when_alice_quit"}
{"qid": "socialnetwork_train_1973", "query": "relationship status that is relationship status of more than two person", "python": "def answer():\n    relationship_status_counts = {}\n    for person in api.people:\n        relationship_status_counts[person.relationship_status] = relationship_status_counts.get(person.relationship_status, 0) + 1\n    relationship_status_more_than_two = [status for status, count in relationship_status_counts.items() if count > 2]\n    return relationship_status_more_than_two", "python_oneline": "def answer():\n    return [status for status, count in {person.relationship_status: sum(1 for p in api.people if p.relationship_status == person.relationship_status) for person in api.people}.items() if count > 2]", "python_multiline": "def answer():\n    relationship_status_counts = {}\n    for person in api.people:\n        relationship_status_counts[person.relationship_status] = relationship_status_counts.get(person.relationship_status, 0) + 1\n    relationship_status_more_than_two = [status for status, count in relationship_status_counts.items() if count > 2]\n    return relationship_status_more_than_two", "python_multiline_discarded": "def answer():\n    relationship_status_counts = {}\n    for person in api.people:\n        if person.relationship_status in relationship_status_counts:\n            relationship_status_counts[person.relationship_status] += 1\n        else:\n            relationship_status_counts[person.relationship_status] = 1\n    relationship_status_more_than_two = []\n    for status, count in relationship_status_counts.items():\n        if count > 2:\n            relationship_status_more_than_two.append(status)\n    return relationship_status_more_than_two", "python_oneline_discarded": "def answer():\n    return [status for status, count in {person.relationship_status: sum(1 for p in api.people if p.relationship_status == person.relationship_status) for person in api.people}.items() if count > 2]"}
{"qid": "socialnetwork_train_1981", "query": "relationship status that is relationship status of student whose start date is at least 2004", "python": "def answer():\n    students = [person for person in api.people if person.education and any(e.start_date >= 2004 for e in person.education)]\n    relationship_statuses = set([student.relationship_status for student in students])\n    return relationship_statuses"}
{"qid": "socialnetwork_train_2009", "query": "person whose birthdate is person whose height is 180 cm", "python": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    people_with_same_birthdate = [person for person in api.people if person.birthdate in [p.birthdate for p in tall_people]]\n    return people_with_same_birthdate", "python_oneline": "def answer():\n    return [person for person in api.people if person.birthdate in [p.birthdate for p in api.people if p.height == 180]]", "python_multiline": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    people_with_same_birthdate = [person for person in api.people if person.birthdate in [p.birthdate for p in tall_people]]\n    return people_with_same_birthdate", "python_multiline_discarded": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    tall_people_birthdates = [p.birthdate for p in tall_people]\n    people_with_same_birthdate = [person for person in api.people if person.birthdate in tall_people_birthdates]\n    return people_with_same_birthdate", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.birthdate in [p.birthdate for p in api.people if p.height == 180]]"}
{"qid": "socialnetwork_train_2041", "query": "city that is birthplace of the most number of person", "python": "def answer():\n    # city that most number of persons born\n    birthplace_counts = {}\n    for person in api.people:\n        birthplace_counts[person.birthplace] = birthplace_counts.get(person.birthplace, 0) + 1\n    return max(birthplace_counts, key=birthplace_counts.get)", "python_oneline": "def answer():\n    return max(api.people, key=lambda person: sum(1 for p in api.people if p.birthplace == person.birthplace)).birthplace", "python_multiline": "def answer():\n    # city that most number of persons born\n    birthplace_counts = {}\n    for person in api.people:\n        birthplace_counts[person.birthplace] = birthplace_counts.get(person.birthplace, 0) + 1\n    return max(birthplace_counts, key=birthplace_counts.get)", "python_multiline_discarded": "def answer():\n    birthplace_counts = {}\n    for person in api.people:\n        if person.birthplace in birthplace_counts:\n            birthplace_counts[person.birthplace] += 1\n        else:\n            birthplace_counts[person.birthplace] = 1\n    max_birthplace = max(birthplace_counts, key=birthplace_counts.get)\n    return max_birthplace", "python_oneline_discarded": "def answer():\n    return max(api.people, key=lambda person: sum(1 for p in api.people if p.birthplace == person.birthplace)).birthplace"}
{"qid": "socialnetwork_train_2070", "query": "employee whose start date is smaller than start date of employee alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    people_started_to_work_before_alice = []\n    for person in api.people:\n        for employment in person.employment:\n            if any(employment.start_date < alice_employment.start_date for alice_employment in alice.employment):\n                people_started_to_work_before_alice.append(person)\n                break\n    return people_started_to_work_before_alice", "python_oneline": "def answer():\n    return [person for person in api.people if any(employment.start_date < alice_employment.start_date for alice_employment in api.find_person_by_id(\"en.person.alice\").employment for employment in person.employment)]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    people_started_to_work_before_alice = []\n    for person in api.people:\n        for employment in person.employment:\n            if any(employment.start_date < alice_employment.start_date for alice_employment in alice.employment):\n                people_started_to_work_before_alice.append(person)\n                break\n    return people_started_to_work_before_alice", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    people_started_to_work_before_alice = []\n    for person in api.people:\n        for employment in person.employment:\n            for alice_employment in alice.employment:\n                if employment.start_date < alice_employment.start_date:\n                    people_started_to_work_before_alice.append(person)\n                    break\n    return people_started_to_work_before_alice", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if any(employment.start_date < alice_employment.start_date for alice_employment in api.find_person_by_id(\"en.person.alice\").employment for employment in person.employment)]"}
{"qid": "socialnetwork_train_2270", "query": "student whose start date is birthdate of alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    students_started_on_alices_birthday = []\n    for person in api.people:\n        if person.education and any(e.start_date == alice.birthdate for e in person.education):\n            students_started_on_alices_birthday.append(person)\n    return students_started_on_alices_birthday", "python_oneline": "def answer():\n    return [person for person in api.people if person.education and any(e.start_date == api.find_person_by_id(\"en.person.alice\").birthdate for e in person.education)]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    students_started_on_alices_birthday = []\n    for person in api.people:\n        if person.education and any(e.start_date == alice.birthdate for e in person.education):\n            students_started_on_alices_birthday.append(person)\n    return students_started_on_alices_birthday", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    students_started_on_alices_birthday = []\n    for person in api.people:\n        if person.education:\n            for e in person.education:\n                if e.start_date == alice.birthdate:\n                    students_started_on_alices_birthday.append(person)\n    return students_started_on_alices_birthday", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.education and any(e.start_date == api.find_person_by_id(\"en.person.alice\").birthdate for e in person.education)]"}
{"qid": "socialnetwork_train_2313", "query": "gender that is gender of student whose start date is at most 2004", "python": "def answer():\n    students = [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]\n    genders = set([student.gender for student in students])\n    return genders", "python_oneline": "def answer():\n    return set([student.gender for student in [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]])", "python_multiline": "def answer():\n    students = [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]\n    genders = set([student.gender for student in students])\n    return genders", "python_multiline_discarded": "def answer():\n    students = [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]\n    student_genders = [student.gender for student in students]\n    unique_genders = set(student_genders)\n    return unique_genders", "python_oneline_discarded": "def answer():\n    return set([student.gender for student in [person for person in api.people if person.education and any(e.start_date <= 2004 for e in person.education)]])"}
{"qid": "socialnetwork_train_2324", "query": "start date of student alice whose field of study is computer science", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    starting_dates = []\n    for education in alice.education:\n        if education.field_of_study == \"en.field.computer_science\":\n            starting_dates.append(education.start_date)\n    return starting_dates\n", "python_oneline": "def answer():\n    return [education.start_date for education in api.find_person_by_id(\"en.person.alice\").education if education.field_of_study == \"en.field.computer_science\"]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    starting_dates = []\n    for education in alice.education:\n        if education.field_of_study == \"en.field.computer_science\":\n            starting_dates.append(education.start_date)\n    return starting_dates\n", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    starting_dates = []\n    for education in alice.education:\n        if education.field_of_study == \"en.field.computer_science\":\n            starting_dates.append(education.start_date)\n    return starting_dates", "python_oneline_discarded": "def answer():\n    return [education.start_date for education in api.find_person_by_id(\"en.person.alice\").education if education.field_of_study == \"en.field.computer_science\"]"}
{"qid": "socialnetwork_train_2334", "query": "person that student whose end date is smaller than 2004 is friends with", "python": "def answer():\n    people_completed_studies_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    friends_of_people_completed_studies_before_2004 = [friend for person in people_completed_studies_before_2004 for friend in person.friends]\n    return friends_of_people_completed_studies_before_2004", "python_oneline": "def answer():\n    return [friend for person in api.people if person.education and any(e.end_date < 2004 for e in person.education) for friend in person.friends]", "python_multiline": "def answer():\n    people_completed_studies_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    friends_of_people_completed_studies_before_2004 = [friend for person in people_completed_studies_before_2004 for friend in person.friends]\n    return friends_of_people_completed_studies_before_2004", "python_multiline_discarded": "def answer():\n    people_completed_studies_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    friends_of_people_completed_studies_before_2004 = []\n    for person in people_completed_studies_before_2004:\n        for friend in person.friends:\n            friends_of_people_completed_studies_before_2004.append(friend)\n    return friends_of_people_completed_studies_before_2004", "python_oneline_discarded": "def answer():\n    return [friend for person in api.people if person.education and any(e.end_date < 2004 for e in person.education) for friend in person.friends]"}
{"qid": "socialnetwork_train_2484", "query": "gender that is gender of student whose end date is larger than 2004", "python": "def answer():\n    students = [person for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)]\n    genders = set([student.gender for student in students])\n    return genders", "python_oneline": "def answer():\n    return set([student.gender for student in [person for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)]])", "python_multiline": "def answer():\n    students = [person for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)]\n    genders = set([student.gender for student in students])\n    return genders", "python_multiline_discarded": "def answer():\n    students = [person for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)]\n    student_genders = [student.gender for student in students]\n    unique_genders = set(student_genders)\n    return unique_genders", "python_oneline_discarded": "def answer():\n    return set([student.gender for student in [person for person in api.people if person.education and any(e.end_date > 2004 for e in person.education)]])"}
{"qid": "socialnetwork_train_2529", "query": "employee whose start date is smaller than end date of employee alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    alice_quit_date = max(e.end_date for e in alice.employment if e.end_date is not None)\n    employees_hired_before_alice_quit = [person for person in api.people if any(e.start_date < alice_quit_date for e in person.employment)]\n    return employees_hired_before_alice_quit", "python_oneline": "def answer():\n    return [person for person in api.people if any(e.start_date < max(e.end_date for e in api.find_person_by_id(\"en.person.alice\").employment if e.end_date is not None) for e in person.employment)]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    alice_quit_date = max(e.end_date for e in alice.employment if e.end_date is not None)\n    employees_hired_before_alice_quit = [person for person in api.people if any(e.start_date < alice_quit_date for e in person.employment)]\n    return employees_hired_before_alice_quit", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    alice_quit_date = max(e.end_date for e in alice.employment if e.end_date is not None)\n    employees_hired_before_alice_quit = [person for person in api.people if any(e.start_date < alice_quit_date for e in person.employment)]\n    return employees_hired_before_alice_quit", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if any(e.start_date < max(e.end_date for e in api.find_person_by_id(\"en.person.alice\").employment if e.end_date is not None) for e in person.employment)]"}
{"qid": "socialnetwork_train_2537", "query": "city that is birthplace of employee whose start date is smaller than 2004", "python": "def answer():\n    employees_started_before_2004 = [person for person in api.people if person.employment and any(e.start_date < 2004 for e in person.employment)]\n    birthplaces = set([employee.birthplace for employee in employees_started_before_2004])\n    return birthplaces", "python_oneline": "def answer():\n    return set([employee.birthplace for employee in api.people if employee.employment and any(e.start_date < 2004 for e in employee.employment)])", "python_multiline": "def answer():\n    employees_started_before_2004 = [person for person in api.people if person.employment and any(e.start_date < 2004 for e in person.employment)]\n    birthplaces = set([employee.birthplace for employee in employees_started_before_2004])\n    return birthplaces", "python_multiline_discarded": "def answer():\n    employees_started_before_2004 = [person for person in api.people if person.employment and any(e.start_date < 2004 for e in person.employment)]\n    birthplaces = set([employee.birthplace for employee in employees_started_before_2004])\n    return birthplaces", "python_oneline_discarded": "def answer():\n    return set([employee.birthplace for employee in api.people if employee.employment and any(e.start_date < 2004 for e in employee.employment)])"}
{"qid": "socialnetwork_train_2541", "query": "person whose height is 180 cm and whose employer is mckinsey", "python": "def answer():\n    mckinsey_employees = [person for person in api.people if\n                          person.employment and any(e.employer == \"en.company.mckinsey\" for e in person.employment)]\n    tall_employees = [employee for employee in mckinsey_employees if employee.height == 180]\n    return tall_employees", "python_oneline": "def answer():\n    return [employee for employee in api.people if employee.employment and any(e.employer == \"en.company.mckinsey\" for e in employee.employment) and employee.height == 180]", "python_multiline": "def answer():\n    mckinsey_employees = [person for person in api.people if\n                          person.employment and any(e.employer == \"en.company.mckinsey\" for e in person.employment)]\n    tall_employees = [employee for employee in mckinsey_employees if employee.height == 180]\n    return tall_employees", "python_multiline_discarded": "def answer():\n    mckinsey_employees = [person for person in api.people if person.employment and any(e.employer == \"en.company.mckinsey\" for e in person.employment)]\n    tall_employees = [employee for employee in mckinsey_employees if employee.height == 180]\n    return tall_employees", "python_oneline_discarded": "def answer():\n    return [employee for employee in api.people if employee.employment and any(e.employer == \"en.company.mckinsey\" for e in employee.employment) and employee.height == 180]"}
{"qid": "socialnetwork_train_2546", "query": "person that is friends with at least two person", "python": "def answer():\n    people_with_at_least_two_friends = [person for person in api.people if len(person.friends) >= 2]\n    return people_with_at_least_two_friends"}
{"qid": "socialnetwork_train_2586", "query": "relationship status that is relationship status of person whose height is 180 cm", "python": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    relationship_status_of_tall_people = [person.relationship_status for person in tall_people]\n    return relationship_status_of_tall_people", "python_oneline": "def answer():\n    return [person.relationship_status for person in api.people if person.height == 180]", "python_multiline": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    relationship_status_of_tall_people = [person.relationship_status for person in tall_people]\n    return relationship_status_of_tall_people", "python_multiline_discarded": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    relationship_status_of_tall_people = [person.relationship_status for person in tall_people]\n    return relationship_status_of_tall_people", "python_oneline_discarded": "def answer():\n    return [person.relationship_status for person in api.people if person.height == 180]"}
{"qid": "socialnetwork_train_2717", "query": "person whose birthplace is person whose height is 180 cm", "python": "def answer():\n    tall_people = [person for person in api.people if person.height == 180]\n    people_with_same_birthplace = [person for person in api.people if person.birthplace in [p.birthplace for p in tall_people]]\n    return people_with_same_birthplace"}
{"qid": "socialnetwork_train_2751", "query": "city that is birthplace of student whose university is not brown university", "python": "def answer():\n    cities = []\n    for person in api.people:\n        if person.education and any(e.university != \"en.university.brown\" for e in person.education):\n            cities.append(person.birthplace)\n    return cities", "python_oneline": "def answer():\n    return [person.birthplace for person in api.people if person.education and any(e.university != \"en.university.brown\" for e in person.education)]", "python_multiline": "def answer():\n    cities = []\n    for person in api.people:\n        if person.education and any(e.university != \"en.university.brown\" for e in person.education):\n            cities.append(person.birthplace)\n    return cities", "python_multiline_discarded": "def answer():\n    cities = []\n    for person in api.people:\n        if person.education:\n            if any(e.university != \"en.university.brown\" for e in person.education):\n                cities.append(person.birthplace)\n    return cities", "python_oneline_discarded": "def answer():\n    return [person.birthplace for person in api.people if person.education and any(e.university != \"en.university.brown\" for e in person.education)]"}
{"qid": "socialnetwork_train_2763", "query": "employee whose end date is larger than end date of student alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    employees_who_ended_after_alice = []\n    for person in api.people:\n        if person.employment and any(employment.end_date > alice_education.end_date for alice_education in alice.education for employment in person.employment):\n            employees_who_ended_after_alice.append(person)\n    return employees_who_ended_after_alice"}
{"qid": "socialnetwork_train_2854", "query": "start date of student alice whose field of study is computer science", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    start_dates = []\n    for education in alice.education:\n        if education.field_of_study == \"en.field.computer_science\":\n            start_dates.append(education.start_date)\n    return start_dates", "python_oneline": "def answer():\n    return [education.start_date for education in api.find_person_by_id(\"en.person.alice\").education if education.field_of_study == \"en.field.computer_science\"]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    start_dates = []\n    for education in alice.education:\n        if education.field_of_study == \"en.field.computer_science\":\n            start_dates.append(education.start_date)\n    return start_dates", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    alice_education = alice.education\n    computer_science_education = []\n    for education in alice_education:\n        if education.field_of_study == \"en.field.computer_science\":\n            computer_science_education.append(education)\n    start_dates = []\n    for education in computer_science_education:\n        start_dates.append(education.start_date)\n    return start_dates", "python_oneline_discarded": "def answer():\n    return [education.start_date for education in api.find_person_by_id(\"en.person.alice\").education if education.field_of_study == \"en.field.computer_science\"]"}
{"qid": "socialnetwork_train_3152", "query": "person that is friends with employee whose end date is not 2004", "python": "def answer():\n    people = []\n    for person in api.people:\n        friends_who_didnt_quit_at_2004 = [friend for friend in person.friends if friend.employment and any(e.end_date != 2004 for e in friend.employment)]\n        if len(friends_who_didnt_quit_at_2004) > 0:\n            people.append(person)\n    return people\n", "python_oneline": "def answer():\n    return [person for person in api.people if any(friend.employment and any(e.end_date != 2004 for e in friend.employment) for friend in person.friends)]", "python_multiline": "def answer():\n    people = []\n    for person in api.people:\n        friends_who_didnt_quit_at_2004 = [friend for friend in person.friends if friend.employment and any(e.end_date != 2004 for e in friend.employment)]\n        if len(friends_who_didnt_quit_at_2004) > 0:\n            people.append(person)\n    return people\n", "python_multiline_discarded": "def answer():\n    people = []\n    for person in api.people:\n        friends_who_didnt_quit_at_2004 = []\n        for friend in person.friends:\n            if friend.employment:\n                if any(e.end_date != 2004 for e in friend.employment):\n                    friends_who_didnt_quit_at_2004.append(friend)\n        if len(friends_who_didnt_quit_at_2004) > 0:\n            people.append(person)\n    return people", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if any(friend.employment and any(e.end_date != 2004 for e in friend.employment) for friend in person.friends)]"}
{"qid": "socialnetwork_train_3337", "query": "gender that is gender of person whose birthdate is 2004", "python": "def answer():\n    people_born_in_2004 = [person for person in api.people if person.birthdate == 2004]\n    genders = set([person.gender for person in people_born_in_2004])\n    return genders", "python_oneline": "def answer():\n    return set([person.gender for person in api.people if person.birthdate == 2004])", "python_multiline": "def answer():\n    people_born_in_2004 = [person for person in api.people if person.birthdate == 2004]\n    genders = set([person.gender for person in people_born_in_2004])\n    return genders", "python_multiline_discarded": "def answer():\n    people_born_in_2004 = [person for person in api.people if person.birthdate == 2004]\n    genders = set([person.gender for person in people_born_in_2004])\n    return genders", "python_oneline_discarded": "def answer():\n    return set([person.gender for person in api.people if person.birthdate == 2004])"}
{"qid": "socialnetwork_train_3407", "query": "employee whose end date is at most birthdate of alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    people_stopped_working_before_alice_birth = []\n    for person in api.people:\n        for employment in person.employment:\n            if employment.end_date <= alice.birthdate:\n                people_stopped_working_before_alice_birth.append(person)\n                break\n    return people_stopped_working_before_alice_birth", "python_oneline": "def answer():\n    return [person for person in api.people for employment in person.employment if employment.end_date <= api.find_person_by_id(\"en.person.alice\").birthdate]", "python_multiline": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    people_stopped_working_before_alice_birth = []\n    for person in api.people:\n        for employment in person.employment:\n            if employment.end_date <= alice.birthdate:\n                people_stopped_working_before_alice_birth.append(person)\n                break\n    return people_stopped_working_before_alice_birth", "python_multiline_discarded": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    people_stopped_working_before_alice_birth = []\n    for person in api.people:\n        for employment in person.employment:\n            if employment.end_date <= alice.birthdate:\n                people_stopped_working_before_alice_birth.append(person)\n                break\n    return people_stopped_working_before_alice_birth", "python_oneline_discarded": "def answer():\n    return [person for person in api.people for employment in person.employment if employment.end_date <= api.find_person_by_id(\"en.person.alice\").birthdate]"}
{"qid": "socialnetwork_train_3433", "query": "city that is birthplace of student whose end date is smaller than 2004", "python": "def answer():\n    students_graduated_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    birthplaces = set([student.birthplace for student in students_graduated_before_2004])\n    return birthplaces", "python_oneline": "def answer():\n    return set([student.birthplace for student in api.people if student.education and any(e.end_date < 2004 for e in student.education)])", "python_multiline": "def answer():\n    students_graduated_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    birthplaces = set([student.birthplace for student in students_graduated_before_2004])\n    return birthplaces", "python_multiline_discarded": "def answer():\n    students_graduated_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    birthplaces = set([student.birthplace for student in students_graduated_before_2004])\n    return birthplaces", "python_oneline_discarded": "def answer():\n    return set([student.birthplace for student in api.people if student.education and any(e.end_date < 2004 for e in student.education)])"}
{"qid": "socialnetwork_test_71", "query": "student whose field of study is not computer science", "python": "def answer():\n    students_not_studying_cs = []\n    for person in api.people:\n        if any(e.field_of_study != \"en.field.computer_science\" for e in person.education):\n            students_not_studying_cs.append(person)\n    return students_not_studying_cs"}
{"qid": "socialnetwork_test_75", "query": "person that is friends with student whose start date is larger than 2004", "python": "def answer():\n    students_friends = []\n    for person in api.people:\n        for friend in person.friends:\n            if friend.education and any(e.start_date > 2004 for e in friend.education):\n                students_friends.append(person)\n                break\n    return students_friends"}
{"qid": "socialnetwork_test_122", "query": "gender that is gender of student whose end date is smaller than 2004", "python": "def answer():\n    people_finished_school_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    genders = set([person.gender for person in people_finished_school_before_2004])\n    return genders", "python_oneline": "def answer():\n    return set([person.gender for person in [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]])", "python_multiline": "def answer():\n    people_finished_school_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    genders = set([person.gender for person in people_finished_school_before_2004])\n    return genders", "python_multiline_discarded": "def answer():\n    people_finished_school_before_2004 = [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]\n    genders = set([person.gender for person in people_finished_school_before_2004])\n    return genders", "python_oneline_discarded": "def answer():\n    return set([person.gender for person in [person for person in api.people if person.education and any(e.end_date < 2004 for e in person.education)]])"}
{"qid": "socialnetwork_test_291", "query": "city that is birthplace of student whose end date is not 2004", "python": "def answer():\n    students_who_did_not_end_in_2004 = [person for person in api.people if person.education and all(e.end_date != 2004 for e in person.education)]\n    birthplaces = set([student.birthplace for student in students_who_did_not_end_in_2004])\n    return birthplaces", "python_oneline": "def answer():\n    return set([student.birthplace for student in api.people if student.education and all(e.end_date != 2004 for e in student.education)])", "python_multiline": "def answer():\n    students_who_did_not_end_in_2004 = [person for person in api.people if person.education and all(e.end_date != 2004 for e in person.education)]\n    birthplaces = set([student.birthplace for student in students_who_did_not_end_in_2004])\n    return birthplaces", "python_multiline_discarded": "def answer():\n    students_who_did_not_end_in_2004 = [person for person in api.people if person.education and all(e.end_date != 2004 for e in person.education)]\n    birthplaces = set([student.birthplace for student in students_who_did_not_end_in_2004])\n    return birthplaces", "python_oneline_discarded": "def answer():\n    return set([student.birthplace for student in api.people if student.education and all(e.end_date != 2004 for e in student.education)])"}
{"qid": "socialnetwork_test_390", "query": "employee whose start date is smaller than 2004", "python": "def answer():\n    employees_joined_before_2004 = [person for person in api.people if person.employment and any(e.start_date < 2004 for e in person.employment)]\n    return employees_joined_before_2004"}
{"qid": "socialnetwork_test_611", "query": "person that is friends with at most two person", "python": "def answer():\n    people_with_few_friends = [person for person in api.people if len(person.friends) <= 2]\n    return people_with_few_friends", "python_oneline": "def answer():\n    return [person for person in api.people if len(person.friends) <= 2]", "python_multiline": "def answer():\n    people_with_few_friends = [person for person in api.people if len(person.friends) <= 2]\n    return people_with_few_friends", "python_multiline_discarded": "def answer():\n    people_with_few_friends = [person for person in api.people if len(person.friends) <= 2]\n    return people_with_few_friends", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if len(person.friends) <= 2]"}
{"qid": "socialnetwork_test_667", "query": "person that is friends with student whose end date is larger than 2004", "python": "def answer():\n    friends_of_students = []\n    for person in api.people:\n        for friend in person.friends:\n            if any(education.end_date > 2004 for education in friend.education):\n                friends_of_students.append(person)\n                break\n    return friends_of_students", "python_oneline": "def answer():\n    return [person for person in api.people if any(education.end_date > 2004 for friend in person.friends for education in friend.education)]", "python_multiline": "def answer():\n    friends_of_students = []\n    for person in api.people:\n        for friend in person.friends:\n            if any(education.end_date > 2004 for education in friend.education):\n                friends_of_students.append(person)\n                break\n    return friends_of_students", "python_multiline_discarded": "def answer():\n    friends_of_students = []\n    for person in api.people:\n        for friend in person.friends:\n            for education in friend.education:\n                if education.end_date > 2004:\n                    friends_of_students.append(person)\n                    break\n    return friends_of_students", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if any(education.end_date > 2004 for friend in person.friends for education in friend.education)]"}
{"qid": "socialnetwork_test_728", "query": "person whose relationship status is single and whose height is 180 cm", "python": "def answer():\n    single_people = [person for person in api.people if person.relationship_status == RelationshipStatus.single]\n    tall_single_people = [person for person in single_people if person.height == 180]\n    return tall_single_people", "python_oneline": "def answer():\n    return [person for person in api.people if person.relationship_status == RelationshipStatus.single and person.height == 180]", "python_multiline": "def answer():\n    single_people = [person for person in api.people if person.relationship_status == RelationshipStatus.single]\n    tall_single_people = [person for person in single_people if person.height == 180]\n    return tall_single_people", "python_multiline_discarded": "def answer():\n    single_people = [person for person in api.people if person.relationship_status == RelationshipStatus.single]\n    tall_single_people = [person for person in single_people if person.height == 180]\n    return tall_single_people", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.relationship_status == RelationshipStatus.single and person.height == 180]"}
{"qid": "socialnetwork_test_757", "query": "employee whose end date is at least birthdate of alice", "python": "def answer():\n    alice = api.find_person_by_id(\"en.person.alice\")\n    people_stopped_working_after_alice_birth = []\n    for person in api.people:\n        for employment in person.employment:\n            if employment.end_date >= alice.birthdate:\n                people_stopped_working_after_alice_birth.append(person)\n                break\n    return people_stopped_working_after_alice_birth"}
{"qid": "socialnetwork_test_786", "query": "student whose end date is at least 2004 or 2010", "python": "def answer():\n    students = []\n    for person in api.people:\n        if person.education and any(e.end_date >= 2004 or e.end_date >= 2010 for e in person.education):\n            students.append(person)\n    return students", "python_oneline": "def answer():\n    return [person for person in api.people if person.education and any(e.end_date >= 2004 or e.end_date >= 2010 for e in person.education)]", "python_multiline": "def answer():\n    students = []\n    for person in api.people:\n        if person.education and any(e.end_date >= 2004 or e.end_date >= 2010 for e in person.education):\n            students.append(person)\n    return students", "python_multiline_discarded": "def answer():\n    students = []\n    for person in api.people:\n        if person.education:\n            for e in person.education:\n                if e.end_date >= 2004 or e.end_date >= 2010:\n                    students.append(person)\n    return students", "python_oneline_discarded": "def answer():\n    return [person for person in api.people if person.education and any(e.end_date >= 2004 or e.end_date >= 2010 for e in person.education)]"}
