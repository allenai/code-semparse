{"qid": "socialnetwork_train_158", "query": "student whose end date is birthdate of alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let students_finishing_on_alices_birthday = [];\n    for (let person of api.people) {\n        if (person.education && person.education.some(e => e.end_date === alice.birthdate)) {\n            students_finishing_on_alices_birthday.push(person);\n        }\n    }\n    return students_finishing_on_alices_birthday;\n}"}
{"qid": "socialnetwork_train_234", "query": "city that is birthplace of student whose university is not brown university", "javascript": "function answer() {\n    let non_brown_students = api.people.filter(person => person.education && person.education.every(e => e.university !== \"en.university.brown\"));\n    let birthplaces = new Set(non_brown_students.map(student => student.birthplace));\n    return birthplaces;\n}"}
{"qid": "socialnetwork_train_260", "query": "person whose gender is male and whose birthdate is 2004", "javascript": "function answer() {\n    let people_born_in_2004 = api.people.filter(person => person.birthdate === 2004);\n    let males_born_in_2004 = people_born_in_2004.filter(person => person.gender === Gender.male);\n    return males_born_in_2004;\n}"}
{"qid": "socialnetwork_train_304", "query": "employee whose end date is larger than end date of employee alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let employees_who_ended_after_alice = [];\n    for (let person of api.people) {\n        if (person.employment && person.employment.some(employment => alice.employment.some(alice_employment => employment.end_date > alice_employment.end_date))) {\n            employees_who_ended_after_alice.push(person);\n        }\n    }\n    return employees_who_ended_after_alice;\n}"}
{"qid": "socialnetwork_train_402", "query": "employee that has the largest start date", "javascript": "function answer() {\n    let latest_start_date = Math.max(...api.people.flatMap(person => person.employment.map(e => e.start_date)).filter(date => date !== null));\n    let employees_starting_latest = api.people.filter(person => person.employment.some(e => e.start_date === latest_start_date));\n    return employees_starting_latest;\n}"}
{"qid": "socialnetwork_train_471", "query": "person that is friends with student whose start date is not 2004", "javascript": "function answer() {\n    let friends_of_students = [];\n    for (let person of api.people) {\n        for (let friend of person.friends) {\n            if (friend.education.some(education => education.start_date !== 2004)) {\n                friends_of_students.push(person);\n                break;\n            }\n        }\n    }\n    return friends_of_students;\n}"}
{"qid": "socialnetwork_train_485", "query": "relationship status that is relationship status of student whose start date is at most 2004", "javascript": "function answer() {\n    let students = api.people.filter(person => person.education && person.education.some(e => e.start_date <= 2004));\n    let relationship_statuses = new Set(students.map(student => student.relationship_status));\n    return relationship_statuses;\n}"}
{"qid": "socialnetwork_train_527", "query": "employee whose start date is at least 2004", "javascript": "function answer() {\n    let employees_starting_2004_and_later = [];\n    for (let person of api.people) {\n        if (person.employment && person.employment.some(e => e.start_date >= 2004)) {\n            employees_starting_2004_and_later.push(person);\n        }\n    }\n    return employees_starting_2004_and_later;\n}"}
{"qid": "socialnetwork_train_799", "query": "person whose height is 180 cm and that is logged in", "javascript": "function answer() {\n    let logged_in_tall_people = api.people.filter(person => person.height === 180 && person.logged_in);\n    return logged_in_tall_people;\n}"}
{"qid": "socialnetwork_train_813", "query": "employee whose end date is larger than 2004 or 2010", "javascript": "function answer() {\n    let employees = api.people.filter(person => person.employment && person.employment.some(e => e.end_date > 2004 || e.end_date > 2010));\n    return employees;\n}"}
{"qid": "socialnetwork_train_930", "query": "person whose gender is male and whose birthplace is new york", "javascript": "function answer() {\n    let males_born_in_new_york = api.people.filter(person => person.gender === Gender.male && person.birthplace === \"en.city.new_york\");\n    return males_born_in_new_york;\n}"}
{"qid": "socialnetwork_train_1051", "query": "person whose height is at least 180 cm", "javascript": "function answer() {\n    let tall_people = api.people.filter(person => person.height >= 180);\n    return tall_people;\n}"}
{"qid": "socialnetwork_train_1063", "query": "person whose birthdate is smaller than start date of student alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let people_born_before_alice_started_school = [];\n    for (let person of api.people) {\n        if (alice.education.some(education => person.birthdate < education.start_date)) {\n            people_born_before_alice_started_school.push(person);\n        }\n    }\n    return people_born_before_alice_started_school;\n}"}
{"qid": "socialnetwork_train_1217", "query": "person whose height is 180 cm and whose start date is 2004", "javascript": "function answer() {\n    let people_started_in_2004 = api.people.filter(person => person.start_date === 2004);\n    let tall_people_started_in_2004 = people_started_in_2004.filter(person => person.height === 180);\n    return tall_people_started_in_2004;\n}"}
{"qid": "socialnetwork_train_1260", "query": "person whose birthplace is new york and that alice is friends with", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let friends_with_birthplace_ny = [];\n    for (let friend of alice.friends) {\n        if (friend.birthplace === \"en.city.new_york\") {\n            friends_with_birthplace_ny.push(friend);\n        }\n    }\n    return friends_with_birthplace_ny;\n}"}
{"qid": "socialnetwork_train_1294", "query": "person that student whose end date is smaller than 2004 is friends with", "javascript": "function answer() {\n    let students_graduated_before_2004 = api.people.filter(person => person.education && person.education.some(e => e.end_date < 2004));\n    let friends_of_students = [];\n    students_graduated_before_2004.forEach(student => {\n        student.friends.forEach(friend => {\n            friends_of_students.push(friend);\n        });\n    });\n    return friends_of_students;\n}"}
{"qid": "socialnetwork_train_1399", "query": "city that is birthplace of student whose end date is larger than 2004", "javascript": "function answer() {\n    let people_finished_school_after_2004 = api.people.filter(person => person.education && person.education.some(e => e.end_date > 2004));\n    let birthplaces = new Set(people_finished_school_after_2004.map(person => person.birthplace));\n    return birthplaces;\n}"}
{"qid": "socialnetwork_train_1403", "query": "employee whose start date is at most 2004 or 2010", "javascript": "function answer() {\n    let employees_started_working_by_2004_or_2010 = api.people.filter(person => person.employment && person.employment.some(e => e.start_date <= 2004 || e.start_date <= 2010));\n    return employees_started_working_by_2004_or_2010;\n}"}
{"qid": "socialnetwork_train_1415", "query": "city that is birthplace of employee whose start date is larger than 2004", "javascript": "function answer() {\n    let employees_started_after_2004 = api.people.filter(person => person.employment && person.employment.some(e => e.start_date > 2004));\n    let birthplaces = new Set(employees_started_after_2004.map(employee => employee.birthplace));\n    return birthplaces;\n}"}
{"qid": "socialnetwork_train_1529", "query": "student whose end date is start date of employee alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let students_ended_when_alice_started = [];\n    for (let person of api.people) {\n        if (person.education && person.education.some(e => alice.employment.some(alice_employment => e.end_date === alice_employment.start_date))) {\n            students_ended_when_alice_started.push(person);\n        }\n    }\n    return students_ended_when_alice_started;\n}"}
{"qid": "socialnetwork_train_1530", "query": "person whose height is 180 cm and that is logged in", "javascript": "function answer() {\n    let online_people = api.people.filter(person => person.logged_in);\n    let tall_people = online_people.filter(person => person.height === 180);\n    return tall_people;\n}"}
{"qid": "socialnetwork_train_1565", "query": "city that is birthplace of alice or bob", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let bob = api.find_person_by_id(\"en.person.bob\");\n    let birthplaces = [alice.birthplace, bob.birthplace];\n    return birthplaces;\n}"}
{"qid": "socialnetwork_train_1586", "query": "relationship status that is relationship status of alice and that is relationship status of alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    return alice.relationship_status;\n}"}
{"qid": "socialnetwork_train_1690", "query": "person whose height is 180 cm and whose start date is 2004", "javascript": "function answer() {\n    let tall_people = api.people.filter(person => person.height === 180);\n    let people_with_start_date_2004 = tall_people.filter(person => person.education && person.education.some(e => e.start_date === 2004));\n    return people_with_start_date_2004;\n}"}
{"qid": "socialnetwork_train_1744", "query": "employee whose end date is smaller than 2004 or 2010", "javascript": "function answer() {\n    let employees = api.people.filter(person => person.employment && person.employment.some(e => e.end_date < 2004 || e.end_date < 2010));\n    return employees;\n}"}
{"qid": "socialnetwork_train_1839", "query": "student whose start date is at most 2004", "javascript": "function answer() {\n    let students = [];\n    for (let person of api.people) {\n        if (person.education && person.education.some(e => e.start_date <= 2004)) {\n            students.push(person);\n        }\n    }\n    return students;\n}"}
{"qid": "socialnetwork_train_1860", "query": "student whose start date is end date of employee alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let students_started_when_alice_quit = [];\n    for (let person of api.people) {\n        if (person.education && person.education.some(e => alice.employment.some(ae => e.start_date === ae.end_date))) {\n            students_started_when_alice_quit.push(person);\n        }\n    }\n    return students_started_when_alice_quit;\n}"}
{"qid": "socialnetwork_train_1973", "query": "relationship status that is relationship status of more than two person", "javascript": "function answer() {\n    let relationship_status_counts = {};\n    for (let person of api.people) {\n        relationship_status_counts[person.relationship_status] = (relationship_status_counts[person.relationship_status] || 0) + 1;\n    }\n    let relationship_status_more_than_two = Object.entries(relationship_status_counts).filter(([status, count]) => count > 2).map(([status, count]) => status);\n    return relationship_status_more_than_two;\n}"}
{"qid": "socialnetwork_train_1981", "query": "relationship status that is relationship status of student whose start date is at least 2004", "javascript": "function answer() {\n    let students = api.people.filter(person => person.education && person.education.some(e => e.start_date >= 2004));\n    let relationship_statuses = new Set(students.map(student => student.relationship_status));\n    return relationship_statuses;\n}"}
{"qid": "socialnetwork_train_2009", "query": "person whose birthdate is person whose height is 180 cm", "javascript": "function answer() {\n    let tall_people = api.people.filter(person => person.height === 180);\n    let people_with_same_birthdate = api.people.filter(person => tall_people.some(p => p.birthdate === person.birthdate));\n    return people_with_same_birthdate;\n}"}
{"qid": "socialnetwork_train_2041", "query": "city that is birthplace of the most number of person", "javascript": "function answer() {\n    let birthplace_counts = {};\n    for (let person of api.people) {\n        birthplace_counts[person.birthplace] = (birthplace_counts[person.birthplace] || 0) + 1;\n    }\n    return Object.keys(birthplace_counts).reduce((a, b) => birthplace_counts[a] > birthplace_counts[b] ? a : b);\n}"}
{"qid": "socialnetwork_train_2070", "query": "employee whose start date is smaller than start date of employee alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let people_started_to_work_before_alice = [];\n    for (let person of api.people) {\n        for (let employment of person.employment) {\n            if (alice.employment.some(alice_employment => employment.start_date < alice_employment.start_date)) {\n                people_started_to_work_before_alice.push(person);\n                break;\n            }\n        }\n    }\n    return people_started_to_work_before_alice;\n}"}
{"qid": "socialnetwork_train_2270", "query": "student whose start date is birthdate of alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let students_started_on_alices_birthday = [];\n    for (let person of api.people) {\n        if (person.education && person.education.some(e => e.start_date === alice.birthdate)) {\n            students_started_on_alices_birthday.push(person);\n        }\n    }\n    return students_started_on_alices_birthday;\n}"}
{"qid": "socialnetwork_train_2313", "query": "gender that is gender of student whose start date is at most 2004", "javascript": "function answer() {\n    let students = api.people.filter(person => person.education && person.education.some(e => e.start_date <= 2004));\n    let genders = new Set(students.map(student => student.gender));\n    return genders;\n}"}
{"qid": "socialnetwork_train_2324", "query": "start date of student alice whose field of study is computer science", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let starting_dates = [];\n    for (let education of alice.education) {\n        if (education.field_of_study === \"en.field.computer_science\") {\n            starting_dates.push(education.start_date);\n        }\n    }\n    return starting_dates;\n}"}
{"qid": "socialnetwork_train_2334", "query": "person that student whose end date is smaller than 2004 is friends with", "javascript": "function answer() {\n    let people_completed_studies_before_2004 = api.people.filter(person => person.education && person.education.some(e => e.end_date < 2004));\n    let friends_of_people_completed_studies_before_2004 = people_completed_studies_before_2004.flatMap(person => person.friends);\n    return friends_of_people_completed_studies_before_2004;\n}"}
{"qid": "socialnetwork_train_2484", "query": "gender that is gender of student whose end date is larger than 2004", "javascript": "function answer() {\n    let students = api.people.filter(person => person.education && person.education.some(e => e.end_date > 2004));\n    let genders = new Set(students.map(student => student.gender));\n    return genders;\n}"}
{"qid": "socialnetwork_train_2529", "query": "employee whose start date is smaller than end date of employee alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let alice_quit_date = Math.max(...alice.employment.map(e => e.end_date).filter(date => date !== null));\n    let employees_hired_before_alice_quit = api.people.filter(person => person.employment.some(e => e.start_date < alice_quit_date));\n    return employees_hired_before_alice_quit;\n}"}
{"qid": "socialnetwork_train_2537", "query": "city that is birthplace of employee whose start date is smaller than 2004", "javascript": "function answer() {\n    let employees_started_before_2004 = api.people.filter(person => person.employment && person.employment.some(e => e.start_date < 2004));\n    let birthplaces = new Set(employees_started_before_2004.map(employee => employee.birthplace));\n    return birthplaces;\n}"}
{"qid": "socialnetwork_train_2541", "query": "person whose height is 180 cm and whose employer is mckinsey", "javascript": "function answer() {\n    let mckinsey_employees = api.people.filter(person =>\n        person.employment && person.employment.some(e => e.employer === \"en.company.mckinsey\"));\n    let tall_employees = mckinsey_employees.filter(employee => employee.height === 180);\n    return tall_employees;\n}"}
{"qid": "socialnetwork_train_2546", "query": "person that is friends with at least two person", "javascript": "function answer() {\n    let people_with_at_least_two_friends = api.people.filter(person => person.friends.length >= 2);\n    return people_with_at_least_two_friends;\n}"}
{"qid": "socialnetwork_train_2586", "query": "relationship status that is relationship status of person whose height is 180 cm", "javascript": "function answer() {\n    let tall_people = api.people.filter(person => person.height === 180);\n    let relationship_status_of_tall_people = tall_people.map(person => person.relationship_status);\n    return relationship_status_of_tall_people;\n}"}
{"qid": "socialnetwork_train_2717", "query": "person whose birthplace is person whose height is 180 cm", "javascript": "function answer() {\n    let tall_people = api.people.filter(person => person.height === 180);\n    let people_with_same_birthplace = api.people.filter(person => tall_people.some(p => p.birthplace === person.birthplace));\n    return people_with_same_birthplace;\n}"}
{"qid": "socialnetwork_train_2751", "query": "city that is birthplace of student whose university is not brown university", "javascript": "function answer() {\n    let cities = [];\n    for (let person of api.people) {\n        if (person.education && person.education.some(e => e.university !== \"en.university.brown\")) {\n            cities.push(person.birthplace);\n        }\n    }\n    return cities;\n}"}
{"qid": "socialnetwork_train_2763", "query": "employee whose end date is larger than end date of student alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let employees_who_ended_after_alice = [];\n    for (let person of api.people) {\n        if (person.employment && person.employment.some(employment => alice.education.some(alice_education => employment.end_date > alice_education.end_date))) {\n            employees_who_ended_after_alice.push(person);\n        }\n    }\n    return employees_who_ended_after_alice;\n}"}
{"qid": "socialnetwork_train_2854", "query": "start date of student alice whose field of study is computer science", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let start_dates = [];\n    alice.education.forEach(education => {\n        if (education.field_of_study === \"en.field.computer_science\") {\n            start_dates.push(education.start_date);\n        }\n    });\n    return start_dates;\n}"}
{"qid": "socialnetwork_train_3152", "query": "person that is friends with employee whose end date is not 2004", "javascript": "function answer() {\n    let people = [];\n    for (let person of api.people) {\n        let friends_who_didnt_quit_at_2004 = person.friends.filter(friend => friend.employment && friend.employment.some(e => e.end_date !== 2004));\n        if (friends_who_didnt_quit_at_2004.length > 0) {\n            people.push(person);\n        }\n    }\n    return people;\n}"}
{"qid": "socialnetwork_train_3337", "query": "gender that is gender of person whose birthdate is 2004", "javascript": "function answer() {\n    let people_born_in_2004 = api.people.filter(person => person.birthdate === 2004);\n    let genders = new Set(people_born_in_2004.map(person => person.gender));\n    return genders;\n}"}
{"qid": "socialnetwork_train_3407", "query": "employee whose end date is at most birthdate of alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let people_stopped_working_before_alice_birth = [];\n    for (let person of api.people) {\n        for (let employment of person.employment) {\n            if (employment.end_date <= alice.birthdate) {\n                people_stopped_working_before_alice_birth.push(person);\n                break;\n            }\n        }\n    }\n    return people_stopped_working_before_alice_birth;\n}"}
{"qid": "socialnetwork_train_3433", "query": "city that is birthplace of student whose end date is smaller than 2004", "javascript": "function answer() {\n    let students_graduated_before_2004 = api.people.filter(person => person.education && person.education.some(e => e.end_date < 2004));\n    let birthplaces = new Set(students_graduated_before_2004.map(student => student.birthplace));\n    return birthplaces;\n}"}
{"qid": "socialnetwork_test_71", "query": "student whose field of study is not computer science", "javascript": "function answer() {\n    let students_not_studying_cs = [];\n    for (let person of api.people) {\n        if (person.education && person.education.some(e => e.field_of_study !== \"en.field.computer_science\")) {\n            students_not_studying_cs.push(person);\n        }\n    }\n    return students_not_studying_cs;\n}"}
{"qid": "socialnetwork_test_75", "query": "person that is friends with student whose start date is larger than 2004", "javascript": "function answer() {\n    let students_friends = [];\n    for (let person of api.people) {\n        for (let friend of person.friends) {\n            if (friend.education && friend.education.some(e => e.start_date > 2004)) {\n                students_friends.push(person);\n                break;\n            }\n        }\n    }\n    return students_friends;\n}"}
{"qid": "socialnetwork_test_122", "query": "gender that is gender of student whose end date is smaller than 2004", "javascript": "function answer() {\n    let people_finished_school_before_2004 = api.people.filter(person => person.education && person.education.some(e => e.end_date < 2004));\n    let genders = new Set(people_finished_school_before_2004.map(person => person.gender));\n    return genders;\n}"}
{"qid": "socialnetwork_test_291", "query": "city that is birthplace of student whose end date is not 2004", "javascript": "function answer() {\n    let students_who_did_not_end_in_2004 = api.people.filter(person => person.education && person.education.every(e => e.end_date !== 2004));\n    let birthplaces = new Set(students_who_did_not_end_in_2004.map(student => student.birthplace));\n    return birthplaces;\n}"}
{"qid": "socialnetwork_test_390", "query": "employee whose start date is smaller than 2004", "javascript": "function answer() {\n    let employees_joined_before_2004 = api.people.filter(person => person.employment && person.employment.some(e => e.start_date < 2004));\n    return employees_joined_before_2004;\n}"}
{"qid": "socialnetwork_test_611", "query": "person that is friends with at most two person", "javascript": "function answer() {\n    let people_with_few_friends = api.people.filter(person => person.friends.length <= 2);\n    return people_with_few_friends;\n}"}
{"qid": "socialnetwork_test_667", "query": "person that is friends with student whose end date is larger than 2004", "javascript": "function answer() {\n    let friends_of_students = [];\n    for (let person of api.people) {\n        for (let friend of person.friends) {\n            if (friend.education.some(education => education.end_date > 2004)) {\n                friends_of_students.push(person);\n                break;\n            }\n        }\n    }\n    return friends_of_students;\n}"}
{"qid": "socialnetwork_test_728", "query": "person whose relationship status is single and whose height is 180 cm", "javascript": "function answer() {\n    let single_people = api.people.filter(person => person.relationship_status === RelationshipStatus.single);\n    let tall_single_people = single_people.filter(person => person.height === 180);\n    return tall_single_people;\n}"}
{"qid": "socialnetwork_test_757", "query": "employee whose end date is at least birthdate of alice", "javascript": "function answer() {\n    let alice = api.find_person_by_id(\"en.person.alice\");\n    let people_stopped_working_after_alice_birth = [];\n    for (let person of api.people) {\n        for (let employment of person.employment) {\n            if (employment.end_date >= alice.birthdate) {\n                people_stopped_working_after_alice_birth.push(person);\n                break;\n            }\n        }\n    }\n    return people_stopped_working_after_alice_birth;\n}"}
{"qid": "socialnetwork_test_786", "query": "student whose end date is at least 2004 or 2010", "javascript": "function answer() {\n    let students = [];\n    for (let person of api.people) {\n        if (person.education && person.education.some(e => e.end_date >= 2004 || e.end_date >= 2010)) {\n            students.push(person);\n        }\n    }\n    return students;\n}"}
